{"ast":null,"code":"export function isArray(data) {\n  return Object.prototype.toString.call(data) === '[object Array]';\n}\nexport function assert(condition, msg) {\n  if (!condition) throw new Error(msg);\n}\nexport function getValues(data) {\n  return Object.keys(data).map(function (key) {\n    return data[key];\n  });\n}\nexport function getKeys(data) {\n  return Object.keys(data);\n}\nexport function getEntries(data) {\n  return Object.keys(data).map(function (key) {\n    return [key, data[key]];\n  });\n}\nexport function normalizeFileName(fileName, extension, fileNameFormatter) {\n  var suffix = '.' + extension;\n  var extensionPattern = new RegExp(\"(\\\\\".concat(extension, \")?$\"));\n  return fileNameFormatter(fileName).replace(extensionPattern, suffix);\n}\nexport function normalizeXMLName(name) {\n  '555xmlHello .  world!'.trim().replace(/^([0-9,;]|(xml))+/, '');\n  return name.replace(/[^_a-zA-Z 0-9:\\-\\.]/g, '').replace(/^([ 0-9-:\\-\\.]|(xml))+/i, '').replace(/ +/g, '-');\n}\nexport function indent(spaces) {\n  return Array(spaces + 1).join(' ');\n}\nexport function stripHTML(text) {\n  return text.replace(/([<>&])/g, function (_, $1) {\n    switch ($1) {\n      case '<':\n        return '&lt;';\n\n      case '>':\n        return '&gt;';\n\n      case '&':\n        return '&amp;';\n\n      default:\n        return '';\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}