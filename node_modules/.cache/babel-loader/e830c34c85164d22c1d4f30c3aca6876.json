{"ast":null,"code":"import { d as _toConsumableArray, b as _typeof } from './chunk-455cdeae.js';\nimport { toCssWidth, isCustomElement, createAbsoluteElement, removeElement } from './helpers.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport { _ as __vue_normalize__ } from './chunk-cca88db8.js';\nimport { P as ProviderParentMixin, I as InjectedChildMixin } from './chunk-60a03517.js';\nimport { t as trapFocus } from './chunk-42f463e6.js';\nvar DEFAULT_CLOSE_OPTIONS = ['escape', 'outside'];\nvar script = {\n  name: 'BDropdown',\n  directives: {\n    trapFocus: trapFocus\n  },\n  mixins: [ProviderParentMixin('dropdown')],\n  props: {\n    value: {\n      type: [String, Number, Boolean, Object, Array, Function],\n      \"default\": null\n    },\n    disabled: Boolean,\n    inline: Boolean,\n    scrollable: Boolean,\n    maxHeight: {\n      type: [String, Number],\n      \"default\": 200\n    },\n    position: {\n      type: String,\n      validator: function validator(value) {\n        return ['is-top-right', 'is-top-left', 'is-bottom-left', 'is-bottom-right'].indexOf(value) > -1;\n      }\n    },\n    triggers: {\n      type: Array,\n      \"default\": function _default() {\n        return ['click'];\n      }\n    },\n    mobileModal: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultDropdownMobileModal;\n      }\n    },\n    ariaRole: {\n      type: String,\n      validator: function validator(value) {\n        return ['menu', 'list', 'dialog'].indexOf(value) > -1;\n      },\n      \"default\": null\n    },\n    animation: {\n      type: String,\n      \"default\": 'fade'\n    },\n    multiple: Boolean,\n    trapFocus: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultTrapFocus;\n      }\n    },\n    closeOnClick: {\n      type: Boolean,\n      \"default\": true\n    },\n    canClose: {\n      type: [Array, Boolean],\n      \"default\": true\n    },\n    expanded: Boolean,\n    appendToBody: Boolean,\n    appendToBodyCopyParent: Boolean\n  },\n  data: function data() {\n    return {\n      selected: this.value,\n      style: {},\n      isActive: false,\n      isHoverable: false,\n      _bodyEl: undefined // Used to append to body\n\n    };\n  },\n  computed: {\n    rootClasses: function rootClasses() {\n      return [this.position, {\n        'is-disabled': this.disabled,\n        'is-hoverable': this.hoverable,\n        'is-inline': this.inline,\n        'is-active': this.isActive || this.inline,\n        'is-mobile-modal': this.isMobileModal,\n        'is-expanded': this.expanded\n      }];\n    },\n    isMobileModal: function isMobileModal() {\n      return this.mobileModal && !this.inline;\n    },\n    cancelOptions: function cancelOptions() {\n      return typeof this.canClose === 'boolean' ? this.canClose ? DEFAULT_CLOSE_OPTIONS : [] : this.canClose;\n    },\n    contentStyle: function contentStyle() {\n      return {\n        maxHeight: this.scrollable ? toCssWidth(this.maxHeight) : null,\n        overflow: this.scrollable ? 'auto' : null\n      };\n    },\n    hoverable: function hoverable() {\n      return this.triggers.indexOf('hover') >= 0;\n    }\n  },\n  watch: {\n    /**\r\n    * When v-model is changed set the new selected item.\r\n    */\n    value: function value(_value) {\n      this.selected = _value;\n    },\n\n    /**\r\n    * Emit event when isActive value is changed.\r\n    */\n    isActive: function isActive(value) {\n      var _this = this;\n\n      this.$emit('active-change', value);\n      this.handleScroll();\n\n      if (this.appendToBody) {\n        this.$nextTick(function () {\n          _this.updateAppendToBody();\n        });\n      }\n    },\n    isHoverable: function isHoverable(value) {\n      if (this.hoverable) {\n        this.$emit('active-change', value);\n      }\n    }\n  },\n  methods: {\n    handleScroll: function handleScroll() {\n      if (typeof window === 'undefined') return;\n\n      if (this.isMobileModal) {\n        if (this.isActive) {\n          document.documentElement.classList.add('is-clipped-touch');\n        } else {\n          document.documentElement.classList.remove('is-clipped-touch');\n        }\n      }\n    },\n\n    /**\r\n     * Click listener from DropdownItem.\r\n     *   1. Set new selected item.\r\n     *   2. Emit input event to update the user v-model.\r\n     *   3. Close the dropdown.\r\n     */\n    selectItem: function selectItem(value) {\n      if (this.multiple) {\n        if (this.selected) {\n          if (this.selected.indexOf(value) === -1) {\n            // Add value\n            this.selected = [].concat(_toConsumableArray(this.selected), [value]);\n          } else {\n            // Remove value\n            this.selected = this.selected.filter(function (val) {\n              return val !== value;\n            });\n          }\n        } else {\n          this.selected = [value];\n        }\n\n        this.$emit('change', this.selected);\n      } else {\n        if (this.selected !== value) {\n          this.selected = value;\n          this.$emit('change', this.selected);\n        }\n      }\n\n      this.$emit('input', this.selected);\n\n      if (!this.multiple) {\n        this.isActive = !this.closeOnClick;\n\n        if (this.hoverable && this.closeOnClick) {\n          this.isHoverable = false;\n        }\n      }\n    },\n\n    /**\r\n    * White-listed items to not close when clicked.\r\n    */\n    isInWhiteList: function isInWhiteList(el) {\n      if (el === this.$refs.dropdownMenu) return true;\n      if (el === this.$refs.trigger) return true; // All chidren from dropdown\n\n      if (this.$refs.dropdownMenu !== undefined) {\n        var children = this.$refs.dropdownMenu.querySelectorAll('*');\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var child = _step.value;\n\n            if (el === child) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } // All children from trigger\n\n\n      if (this.$refs.trigger !== undefined) {\n        var _children = this.$refs.trigger.querySelectorAll('*');\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = _children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _child = _step2.value;\n\n            if (el === _child) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n              _iterator2[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      return false;\n    },\n\n    /**\r\n    * Close dropdown if clicked outside.\r\n    */\n    clickedOutside: function clickedOutside(event) {\n      if (this.cancelOptions.indexOf('outside') < 0) return;\n      if (this.inline) return;\n      var target = isCustomElement(this) ? event.composedPath()[0] : event.target;\n      if (!this.isInWhiteList(target)) this.isActive = false;\n    },\n\n    /**\r\n     * Keypress event that is bound to the document\r\n     */\n    keyPress: function keyPress(_ref) {\n      var key = _ref.key;\n\n      if (this.isActive && (key === 'Escape' || key === 'Esc')) {\n        if (this.cancelOptions.indexOf('escape') < 0) return;\n        this.isActive = false;\n      }\n    },\n    onClick: function onClick() {\n      if (this.triggers.indexOf('click') < 0) return;\n      this.toggle();\n    },\n    onContextMenu: function onContextMenu() {\n      if (this.triggers.indexOf('contextmenu') < 0) return;\n      this.toggle();\n    },\n    onHover: function onHover() {\n      if (this.triggers.indexOf('hover') < 0) return;\n      this.isHoverable = true;\n    },\n    onFocus: function onFocus() {\n      if (this.triggers.indexOf('focus') < 0) return;\n      this.toggle();\n    },\n\n    /**\r\n    * Toggle dropdown if it's not disabled.\r\n    */\n    toggle: function toggle() {\n      var _this2 = this;\n\n      if (this.disabled) return;\n\n      if (!this.isActive) {\n        // if not active, toggle after clickOutside event\n        // this fixes toggling programmatic\n        this.$nextTick(function () {\n          var value = !_this2.isActive;\n          _this2.isActive = value; // Vue 2.6.x ???\n\n          setTimeout(function () {\n            return _this2.isActive = value;\n          });\n        });\n      } else {\n        this.isActive = !this.isActive;\n      }\n    },\n    updateAppendToBody: function updateAppendToBody() {\n      var dropdown = this.$refs.dropdown;\n      var dropdownMenu = this.$refs.dropdownMenu;\n      var trigger = this.$refs.trigger;\n\n      if (dropdownMenu && trigger) {\n        // update wrapper dropdown\n        var dropdownWrapper = this.$data._bodyEl.children[0];\n        dropdownWrapper.classList.forEach(function (item) {\n          return dropdownWrapper.classList.remove(item);\n        });\n        dropdownWrapper.classList.add('dropdown');\n        dropdownWrapper.classList.add('dropdown-menu-animation');\n\n        if (this.$vnode && this.$vnode.data && this.$vnode.data.staticClass) {\n          dropdownWrapper.classList.add(this.$vnode.data.staticClass);\n        }\n\n        this.rootClasses.forEach(function (item) {\n          // skip position prop\n          if (item && _typeof(item) === 'object') {\n            for (var key in item) {\n              if (item[key]) {\n                dropdownWrapper.classList.add(key);\n              }\n            }\n          }\n        });\n\n        if (this.appendToBodyCopyParent) {\n          var parentNode = this.$refs.dropdown.parentNode;\n          var parent = this.$data._bodyEl;\n          parent.classList.forEach(function (item) {\n            return parent.classList.remove(item);\n          });\n          parentNode.classList.forEach(function (item) {\n            parent.classList.add(item);\n          });\n        }\n\n        var rect = trigger.getBoundingClientRect();\n        var top = rect.top + window.scrollY;\n        var left = rect.left + window.scrollX;\n\n        if (!this.position || this.position.indexOf('bottom') >= 0) {\n          top += trigger.clientHeight;\n        } else {\n          top -= dropdownMenu.clientHeight;\n        }\n\n        if (this.position && this.position.indexOf('left') >= 0) {\n          left -= dropdownMenu.clientWidth - trigger.clientWidth;\n        }\n\n        this.style = {\n          position: 'absolute',\n          top: \"\".concat(top, \"px\"),\n          left: \"\".concat(left, \"px\"),\n          zIndex: '99',\n          width: this.expanded ? \"\".concat(dropdown.offsetWidth, \"px\") : undefined\n        };\n      }\n    }\n  },\n  mounted: function mounted() {\n    if (this.appendToBody) {\n      this.$data._bodyEl = createAbsoluteElement(this.$refs.dropdownMenu);\n      this.updateAppendToBody();\n    }\n  },\n  created: function created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('click', this.clickedOutside);\n      document.addEventListener('keyup', this.keyPress);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('click', this.clickedOutside);\n      document.removeEventListener('keyup', this.keyPress);\n    }\n\n    if (this.appendToBody) {\n      removeElement(this.$data._bodyEl);\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    ref: \"dropdown\",\n    staticClass: \"dropdown dropdown-menu-animation\",\n    \"class\": _vm.rootClasses,\n    on: {\n      \"mouseleave\": function mouseleave($event) {\n        _vm.isHoverable = false;\n      }\n    }\n  }, [!_vm.inline ? _c('div', {\n    ref: \"trigger\",\n    staticClass: \"dropdown-trigger\",\n    attrs: {\n      \"tabindex\": _vm.disabled ? false : 0,\n      \"aria-haspopup\": \"true\"\n    },\n    on: {\n      \"click\": _vm.onClick,\n      \"contextmenu\": function contextmenu($event) {\n        $event.preventDefault();\n        return _vm.onContextMenu($event);\n      },\n      \"mouseenter\": _vm.onHover,\n      \"!focus\": function focus($event) {\n        return _vm.onFocus($event);\n      }\n    }\n  }, [_vm._t(\"trigger\", null, {\n    \"active\": _vm.isActive\n  })], 2) : _vm._e(), _c('transition', {\n    attrs: {\n      \"name\": _vm.animation\n    }\n  }, [_vm.isMobileModal ? _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.isActive,\n      expression: \"isActive\"\n    }],\n    staticClass: \"background\",\n    attrs: {\n      \"aria-hidden\": !_vm.isActive\n    }\n  }) : _vm._e()]), _c('transition', {\n    attrs: {\n      \"name\": _vm.animation\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: !_vm.disabled && (_vm.isActive || _vm.isHoverable) || _vm.inline,\n      expression: \"(!disabled && (isActive || isHoverable)) || inline\"\n    }, {\n      name: \"trap-focus\",\n      rawName: \"v-trap-focus\",\n      value: _vm.trapFocus,\n      expression: \"trapFocus\"\n    }],\n    ref: \"dropdownMenu\",\n    staticClass: \"dropdown-menu\",\n    style: _vm.style,\n    attrs: {\n      \"aria-hidden\": !_vm.isActive\n    }\n  }, [_c('div', {\n    staticClass: \"dropdown-content\",\n    style: _vm.contentStyle,\n    attrs: {\n      \"role\": _vm.ariaRole,\n      \"aria-modal\": !_vm.inline\n    }\n  }, [_vm._t(\"default\")], 2)])])], 1);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Dropdown = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined); //\n\n\nvar script$1 = {\n  name: 'BDropdownItem',\n  mixins: [InjectedChildMixin('dropdown')],\n  props: {\n    value: {\n      type: [String, Number, Boolean, Object, Array, Function],\n      \"default\": null\n    },\n    separator: Boolean,\n    disabled: Boolean,\n    custom: Boolean,\n    focusable: {\n      type: Boolean,\n      \"default\": true\n    },\n    paddingless: Boolean,\n    hasLink: Boolean,\n    ariaRole: {\n      type: String,\n      \"default\": ''\n    }\n  },\n  computed: {\n    anchorClasses: function anchorClasses() {\n      return {\n        'is-disabled': this.parent.disabled || this.disabled,\n        'is-paddingless': this.paddingless,\n        'is-active': this.isActive\n      };\n    },\n    itemClasses: function itemClasses() {\n      return {\n        'dropdown-item': !this.hasLink,\n        'is-disabled': this.disabled,\n        'is-paddingless': this.paddingless,\n        'is-active': this.isActive,\n        'has-link': this.hasLink\n      };\n    },\n    ariaRoleItem: function ariaRoleItem() {\n      return this.ariaRole === 'menuitem' || this.ariaRole === 'listitem' ? this.ariaRole : null;\n    },\n    isClickable: function isClickable() {\n      return !this.parent.disabled && !this.separator && !this.disabled && !this.custom;\n    },\n    isActive: function isActive() {\n      if (this.parent.selected === null) return false;\n      if (this.parent.multiple) return this.parent.selected.indexOf(this.value) >= 0;\n      return this.value === this.parent.selected;\n    },\n    isFocusable: function isFocusable() {\n      return this.hasLink ? false : this.focusable;\n    }\n  },\n  methods: {\n    /**\r\n    * Click listener, select the item.\r\n    */\n    selectItem: function selectItem() {\n      if (!this.isClickable) return;\n      this.parent.selectItem(this.value);\n      this.$emit('click');\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$1 = script$1;\n/* template */\n\nvar __vue_render__$1 = function __vue_render__$1() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _vm.separator ? _c('hr', {\n    staticClass: \"dropdown-divider\"\n  }) : !_vm.custom && !_vm.hasLink ? _c('a', {\n    staticClass: \"dropdown-item\",\n    \"class\": _vm.anchorClasses,\n    attrs: {\n      \"role\": _vm.ariaRoleItem,\n      \"tabindex\": _vm.isFocusable ? 0 : null\n    },\n    on: {\n      \"click\": _vm.selectItem\n    }\n  }, [_vm._t(\"default\")], 2) : _c('div', {\n    \"class\": _vm.itemClasses,\n    attrs: {\n      \"role\": _vm.ariaRoleItem,\n      \"tabindex\": _vm.isFocusable ? 0 : null\n    },\n    on: {\n      \"click\": _vm.selectItem\n    }\n  }, [_vm._t(\"default\")], 2);\n};\n\nvar __vue_staticRenderFns__$1 = [];\n/* style */\n\nvar __vue_inject_styles__$1 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$1 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$1 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$1 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar DropdownItem = __vue_normalize__({\n  render: __vue_render__$1,\n  staticRenderFns: __vue_staticRenderFns__$1\n}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, undefined, undefined);\n\nexport { Dropdown as D, DropdownItem as a };","map":null,"metadata":{},"sourceType":"module"}