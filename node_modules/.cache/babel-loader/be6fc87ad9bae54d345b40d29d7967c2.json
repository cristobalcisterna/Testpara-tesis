{"ast":null,"code":"import { _ as _defineProperty, m as _objectWithoutProperties, b as _typeof } from './chunk-455cdeae.js';\nimport { getValueByPath } from './helpers.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport { F as FormElementMixin } from './chunk-17b33cd2.js';\nimport './chunk-7e17a637.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js';\nimport './chunk-83c8b459.js';\nimport { A as Autocomplete } from './chunk-b0123b89.js';\nimport { T as Tag } from './chunk-2f2f0a74.js';\n\nvar _components;\n\nvar script = {\n  name: 'BTaginput',\n  components: (_components = {}, _defineProperty(_components, Autocomplete.name, Autocomplete), _defineProperty(_components, Tag.name, Tag), _components),\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    data: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    type: String,\n    closeType: String,\n    rounded: {\n      type: Boolean,\n      \"default\": false\n    },\n    attached: {\n      type: Boolean,\n      \"default\": false\n    },\n    maxtags: {\n      type: [Number, String],\n      required: false\n    },\n    hasCounter: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultTaginputHasCounter;\n      }\n    },\n    field: {\n      type: String,\n      \"default\": 'value'\n    },\n    autocomplete: Boolean,\n    groupField: String,\n    groupOptions: String,\n    nativeAutocomplete: String,\n    openOnFocus: Boolean,\n    keepFirst: Boolean,\n    disabled: Boolean,\n    ellipsis: Boolean,\n    closable: {\n      type: Boolean,\n      \"default\": true\n    },\n    ariaCloseLabel: String,\n    confirmKeys: {\n      type: Array,\n      \"default\": function _default() {\n        return [',', 'Tab', 'Enter'];\n      }\n    },\n    removeOnKeys: {\n      type: Array,\n      \"default\": function _default() {\n        return ['Backspace'];\n      }\n    },\n    allowNew: Boolean,\n    onPasteSeparators: {\n      type: Array,\n      \"default\": function _default() {\n        return [','];\n      }\n    },\n    beforeAdding: {\n      type: Function,\n      \"default\": function _default() {\n        return true;\n      }\n    },\n    allowDuplicates: {\n      type: Boolean,\n      \"default\": false\n    },\n    checkInfiniteScroll: {\n      type: Boolean,\n      \"default\": false\n    },\n    createTag: {\n      type: Function,\n      \"default\": function _default(tag) {\n        return tag;\n      }\n    },\n    appendToBody: Boolean\n  },\n  data: function data() {\n    return {\n      tags: Array.isArray(this.value) ? this.value.slice(0) : this.value || [],\n      newTag: '',\n      isComposing: false,\n      _elementRef: 'autocomplete',\n      _isTaginput: true\n    };\n  },\n  computed: {\n    listeners: function listeners() {\n      var _this$$listeners = this.$listeners,\n          input = _this$$listeners.input,\n          listeners = _objectWithoutProperties(_this$$listeners, [\"input\"]);\n\n      return listeners;\n    },\n    rootClasses: function rootClasses() {\n      return {\n        'is-expanded': this.expanded\n      };\n    },\n    containerClasses: function containerClasses() {\n      return {\n        'is-focused': this.isFocused,\n        'is-focusable': this.hasInput\n      };\n    },\n    valueLength: function valueLength() {\n      return this.newTag.trim().length;\n    },\n    hasDefaultSlot: function hasDefaultSlot() {\n      return !!this.$scopedSlots[\"default\"];\n    },\n    hasEmptySlot: function hasEmptySlot() {\n      return !!this.$slots.empty;\n    },\n    hasHeaderSlot: function hasHeaderSlot() {\n      return !!this.$slots.header;\n    },\n    hasFooterSlot: function hasFooterSlot() {\n      return !!this.$slots.footer;\n    },\n\n    /**\r\n     * Show the input field if a maxtags hasn't been set or reached.\r\n     */\n    hasInput: function hasInput() {\n      return this.maxtags == null || this.maxtags === 1 || this.tagsLength < this.maxtags;\n    },\n    tagsLength: function tagsLength() {\n      return this.tags.length;\n    },\n\n    /**\r\n     * If Taginput has onPasteSeparators prop,\r\n     * returning new RegExp used to split pasted string.\r\n     */\n    separatorsAsRegExp: function separatorsAsRegExp() {\n      var sep = this.onPasteSeparators;\n      return sep.length ? new RegExp(sep.map(function (s) {\n        return s ? s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&') : null;\n      }).join('|'), 'g') : null;\n    }\n  },\n  watch: {\n    /**\r\n     * When v-model is changed set internal value.\r\n     */\n    value: function value(_value) {\n      this.tags = Array.isArray(_value) ? _value.slice(0) : _value || [];\n    },\n    hasInput: function hasInput() {\n      if (!this.hasInput) this.onBlur();\n    }\n  },\n  methods: {\n    addTag: function addTag(tag) {\n      var _this = this;\n\n      var tagToAdd = tag || this.newTag.trim();\n\n      if (tagToAdd) {\n        if (!this.autocomplete) {\n          var reg = this.separatorsAsRegExp;\n\n          if (reg && tagToAdd.match(reg)) {\n            tagToAdd.split(reg).map(function (t) {\n              return t.trim();\n            }).filter(function (t) {\n              return t.length !== 0;\n            }).map(this.addTag);\n            return;\n          }\n        } // Add the tag input if it is not blank\n        // or previously added (if not allowDuplicates).\n\n\n        var add = !this.allowDuplicates ? this.tags.indexOf(tagToAdd) === -1 : true;\n\n        if (add && this.beforeAdding(tagToAdd)) {\n          if (this.maxtags === 1) {\n            this.tags = []; // replace existing tag if only 1 is allowed\n          }\n\n          this.tags.push(this.createTag(tagToAdd));\n          this.$emit('input', this.tags);\n          this.$emit('add', tagToAdd);\n        } // after autocomplete events\n\n\n        requestAnimationFrame(function () {\n          _this.newTag = '';\n\n          _this.$emit('typing', '');\n        });\n      }\n    },\n    getNormalizedTagText: function getNormalizedTagText(tag) {\n      if (_typeof(tag) === 'object') {\n        tag = getValueByPath(tag, this.field);\n      }\n\n      return \"\".concat(tag);\n    },\n    customOnBlur: function customOnBlur(event) {\n      // Add tag on-blur if not select only\n      if (!this.autocomplete) this.addTag();\n      this.onBlur(event);\n    },\n    onSelect: function onSelect(option) {\n      var _this2 = this;\n\n      if (!option) return;\n      this.addTag(option);\n      this.$nextTick(function () {\n        _this2.newTag = '';\n      });\n    },\n    removeTag: function removeTag(index, event) {\n      var tag = this.tags.splice(index, 1)[0];\n      this.$emit('input', this.tags);\n      this.$emit('remove', tag);\n      if (event) event.stopPropagation();\n\n      if (this.openOnFocus && this.$refs.autocomplete) {\n        this.$refs.autocomplete.focus();\n      }\n\n      return tag;\n    },\n    removeLastTag: function removeLastTag() {\n      if (this.tagsLength > 0) {\n        this.removeTag(this.tagsLength - 1);\n      }\n    },\n    keydown: function keydown(event) {\n      var key = event.key; // cannot destructure preventDefault (https://stackoverflow.com/a/49616808/2774496)\n\n      if (this.removeOnKeys.indexOf(key) !== -1 && !this.newTag.length) {\n        this.removeLastTag();\n      } // Stop if is to accept select only\n\n\n      if (this.autocomplete && !this.allowNew) return;\n\n      if (this.confirmKeys.indexOf(key) >= 0) {\n        // Allow Tab to advance to next field regardless\n        if (key !== 'Tab') event.preventDefault();\n        if (key === 'Enter' && this.isComposing) return;\n        this.addTag();\n      }\n    },\n    onTyping: function onTyping(event) {\n      this.$emit('typing', event.trim());\n    },\n    emitInfiniteScroll: function emitInfiniteScroll() {\n      this.$emit('infinite-scroll');\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"taginput control\",\n    \"class\": _vm.rootClasses\n  }, [_c('div', {\n    staticClass: \"taginput-container\",\n    \"class\": [_vm.statusType, _vm.size, _vm.containerClasses],\n    attrs: {\n      \"disabled\": _vm.disabled\n    },\n    on: {\n      \"click\": function click($event) {\n        _vm.hasInput && _vm.focus($event);\n      }\n    }\n  }, [_vm._t(\"selected\", _vm._l(_vm.tags, function (tag, index) {\n    return _c('b-tag', {\n      key: _vm.getNormalizedTagText(tag) + index,\n      attrs: {\n        \"type\": _vm.type,\n        \"close-type\": _vm.closeType,\n        \"size\": _vm.size,\n        \"rounded\": _vm.rounded,\n        \"attached\": _vm.attached,\n        \"tabstop\": false,\n        \"disabled\": _vm.disabled,\n        \"ellipsis\": _vm.ellipsis,\n        \"closable\": _vm.closable,\n        \"aria-close-label\": _vm.ariaCloseLabel,\n        \"title\": _vm.ellipsis && _vm.getNormalizedTagText(tag)\n      },\n      on: {\n        \"close\": function close($event) {\n          return _vm.removeTag(index, $event);\n        }\n      }\n    }, [_vm._t(\"tag\", [_vm._v(\" \" + _vm._s(_vm.getNormalizedTagText(tag)) + \" \")], {\n      \"tag\": tag\n    })], 2);\n  }), {\n    \"tags\": _vm.tags\n  }), _vm.hasInput ? _c('b-autocomplete', _vm._g(_vm._b({\n    ref: \"autocomplete\",\n    attrs: {\n      \"data\": _vm.data,\n      \"field\": _vm.field,\n      \"icon\": _vm.icon,\n      \"icon-pack\": _vm.iconPack,\n      \"maxlength\": _vm.maxlength,\n      \"has-counter\": false,\n      \"size\": _vm.size,\n      \"disabled\": _vm.disabled,\n      \"loading\": _vm.loading,\n      \"autocomplete\": _vm.nativeAutocomplete,\n      \"open-on-focus\": _vm.openOnFocus,\n      \"keep-open\": _vm.openOnFocus,\n      \"keep-first\": _vm.keepFirst,\n      \"group-field\": _vm.groupField,\n      \"group-options\": _vm.groupOptions,\n      \"use-html5-validation\": _vm.useHtml5Validation,\n      \"check-infinite-scroll\": _vm.checkInfiniteScroll,\n      \"append-to-body\": _vm.appendToBody,\n      \"confirm-keys\": _vm.confirmKeys\n    },\n    on: {\n      \"typing\": _vm.onTyping,\n      \"focus\": _vm.onFocus,\n      \"blur\": _vm.customOnBlur,\n      \"select\": _vm.onSelect,\n      \"infinite-scroll\": _vm.emitInfiniteScroll\n    },\n    nativeOn: {\n      \"keydown\": function keydown($event) {\n        return _vm.keydown($event);\n      },\n      \"compositionstart\": function compositionstart($event) {\n        _vm.isComposing = true;\n      },\n      \"compositionend\": function compositionend($event) {\n        _vm.isComposing = false;\n      }\n    },\n    scopedSlots: _vm._u([_vm.hasHeaderSlot ? {\n      key: \"header\",\n      fn: function fn() {\n        return [_vm._t(\"header\")];\n      },\n      proxy: true\n    } : null, _vm.hasDefaultSlot ? {\n      key: \"default\",\n      fn: function fn(props) {\n        return [_vm._t(\"default\", null, {\n          \"option\": props.option,\n          \"index\": props.index\n        })];\n      }\n    } : null, _vm.hasEmptySlot ? {\n      key: \"empty\",\n      fn: function fn() {\n        return [_vm._t(\"empty\")];\n      },\n      proxy: true\n    } : null, _vm.hasFooterSlot ? {\n      key: \"footer\",\n      fn: function fn() {\n        return [_vm._t(\"footer\")];\n      },\n      proxy: true\n    } : null], null, true),\n    model: {\n      value: _vm.newTag,\n      callback: function callback($$v) {\n        _vm.newTag = $$v;\n      },\n      expression: \"newTag\"\n    }\n  }, 'b-autocomplete', _vm.$attrs, false), _vm.listeners)) : _vm._e()], 2), _vm.hasCounter && (_vm.maxtags || _vm.maxlength) ? _c('small', {\n    staticClass: \"help counter\"\n  }, [_vm.maxlength && _vm.valueLength > 0 ? [_vm._v(\" \" + _vm._s(_vm.valueLength) + \" / \" + _vm._s(_vm.maxlength) + \" \")] : _vm.maxtags ? [_vm._v(\" \" + _vm._s(_vm.tagsLength) + \" / \" + _vm._s(_vm.maxtags) + \" \")] : _vm._e()], 2) : _vm._e()]);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Taginput = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Taginput);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Taginput as BTaginput };","map":null,"metadata":{},"sourceType":"module"}