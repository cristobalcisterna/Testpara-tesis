{"ast":null,"code":"import { _ as _defineProperty, d as _toConsumableArray, b as _typeof } from './chunk-455cdeae.js';\nimport { getValueByPath, toCssWidth, isCustomElement, createAbsoluteElement, removeElement } from './helpers.js';\nimport { F as FormElementMixin } from './chunk-17b33cd2.js';\nimport { _ as __vue_normalize__ } from './chunk-cca88db8.js';\nimport { I as Input } from './chunk-83c8b459.js';\nvar script = {\n  name: 'BAutocomplete',\n  components: _defineProperty({}, Input.name, Input),\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: [Number, String],\n    data: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    field: {\n      type: String,\n      \"default\": 'value'\n    },\n    keepFirst: Boolean,\n    clearOnSelect: Boolean,\n    openOnFocus: Boolean,\n    customFormatter: Function,\n    checkInfiniteScroll: Boolean,\n    keepOpen: Boolean,\n    selectOnClickOutside: Boolean,\n    clearable: Boolean,\n    maxHeight: [String, Number],\n    dropdownPosition: {\n      type: String,\n      \"default\": 'auto'\n    },\n    groupField: String,\n    groupOptions: String,\n    iconRight: String,\n    iconRightClickable: Boolean,\n    appendToBody: Boolean,\n    type: {\n      type: String,\n      \"default\": 'text'\n    },\n    confirmKeys: {\n      type: Array,\n      \"default\": function _default() {\n        return ['Tab', 'Enter'];\n      }\n    },\n    selectableHeader: Boolean,\n    selectableFooter: Boolean\n  },\n  data: function data() {\n    return {\n      selected: null,\n      hovered: null,\n      headerHovered: null,\n      footerHovered: null,\n      isActive: false,\n      newValue: this.value,\n      newAutocomplete: this.autocomplete || 'off',\n      ariaAutocomplete: this.keepFirst ? 'both' : 'list',\n      isListInViewportVertically: true,\n      hasFocus: false,\n      style: {},\n      _isAutocomplete: true,\n      _elementRef: 'input',\n      _bodyEl: undefined // Used to append to body\n\n    };\n  },\n  computed: {\n    computedData: function computedData() {\n      var _this = this;\n\n      if (this.groupField) {\n        if (this.groupOptions) {\n          var newData = [];\n          this.data.forEach(function (option) {\n            var group = getValueByPath(option, _this.groupField);\n            var items = getValueByPath(option, _this.groupOptions);\n            newData.push({\n              group: group,\n              items: items\n            });\n          });\n          return newData;\n        } else {\n          var tmp = {};\n          this.data.forEach(function (option) {\n            var group = getValueByPath(option, _this.groupField);\n            if (!tmp[group]) tmp[group] = [];\n            tmp[group].push(option);\n          });\n          var _newData = [];\n          Object.keys(tmp).forEach(function (group) {\n            _newData.push({\n              group: group,\n              items: tmp[group]\n            });\n          });\n          return _newData;\n        }\n      }\n\n      return [{\n        items: this.data\n      }];\n    },\n    isEmpty: function isEmpty() {\n      if (!this.computedData) return true;\n      return !this.computedData.some(function (element) {\n        return element.items && element.items.length;\n      });\n    },\n\n    /**\r\n     * White-listed items to not close when clicked.\r\n     * Add input, dropdown and all children.\r\n     */\n    whiteList: function whiteList() {\n      var whiteList = [];\n      whiteList.push(this.$refs.input.$el.querySelector('input'));\n      whiteList.push(this.$refs.dropdown); // Add all children from dropdown\n\n      if (this.$refs.dropdown !== undefined) {\n        var children = this.$refs.dropdown.querySelectorAll('*');\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var child = _step.value;\n            whiteList.push(child);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      if (this.$parent.$data._isTaginput) {\n        // Add taginput container\n        whiteList.push(this.$parent.$el); // Add .tag and .delete\n\n        var tagInputChildren = this.$parent.$el.querySelectorAll('*');\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = tagInputChildren[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var tagInputChild = _step2.value;\n            whiteList.push(tagInputChild);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n              _iterator2[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      return whiteList;\n    },\n\n    /**\r\n     * Check if exists default slot\r\n     */\n    hasDefaultSlot: function hasDefaultSlot() {\n      return !!this.$scopedSlots[\"default\"];\n    },\n\n    /**\r\n     * Check if exists group slot\r\n     */\n    hasGroupSlot: function hasGroupSlot() {\n      return !!this.$scopedSlots.group;\n    },\n\n    /**\r\n     * Check if exists \"empty\" slot\r\n     */\n    hasEmptySlot: function hasEmptySlot() {\n      return !!this.$slots.empty;\n    },\n\n    /**\r\n     * Check if exists \"header\" slot\r\n     */\n    hasHeaderSlot: function hasHeaderSlot() {\n      return !!this.$slots.header;\n    },\n\n    /**\r\n     * Check if exists \"footer\" slot\r\n     */\n    hasFooterSlot: function hasFooterSlot() {\n      return !!this.$slots.footer;\n    },\n\n    /**\r\n     * Apply dropdownPosition property\r\n     */\n    isOpenedTop: function isOpenedTop() {\n      return this.dropdownPosition === 'top' || this.dropdownPosition === 'auto' && !this.isListInViewportVertically;\n    },\n    newIconRight: function newIconRight() {\n      if (this.clearable && this.newValue) {\n        return 'close-circle';\n      }\n\n      return this.iconRight;\n    },\n    newIconRightClickable: function newIconRightClickable() {\n      if (this.clearable) {\n        return true;\n      }\n\n      return this.iconRightClickable;\n    },\n    contentStyle: function contentStyle() {\n      return {\n        maxHeight: toCssWidth(this.maxHeight)\n      };\n    }\n  },\n  watch: {\n    /**\r\n     * When dropdown is toggled, check the visibility to know when\r\n     * to open upwards.\r\n     */\n    isActive: function isActive(active) {\n      var _this2 = this;\n\n      if (this.dropdownPosition === 'auto') {\n        if (active) {\n          this.calcDropdownInViewportVertical();\n        } else {\n          // Timeout to wait for the animation to finish before recalculating\n          setTimeout(function () {\n            _this2.calcDropdownInViewportVertical();\n          }, 100);\n        }\n      }\n    },\n\n    /**\r\n     * When updating input's value\r\n     *   1. Emit changes\r\n     *   2. If value isn't the same as selected, set null\r\n     *   3. Close dropdown if value is clear or else open it\r\n     */\n    newValue: function newValue(value) {\n      this.$emit('input', value); // Check if selected is invalid\n\n      var currentValue = this.getValue(this.selected);\n\n      if (currentValue && currentValue !== value) {\n        this.setSelected(null, false);\n      } // Close dropdown if input is clear or else open it\n\n\n      if (this.hasFocus && (!this.openOnFocus || value)) {\n        this.isActive = !!value;\n      }\n    },\n\n    /**\r\n     * When v-model is changed:\r\n     *   1. Update internal value.\r\n     *   2. If it's invalid, validate again.\r\n     */\n    value: function value(_value) {\n      this.newValue = _value;\n    },\n\n    /**\r\n     * Select first option if \"keep-first\r\n     */\n    data: function data() {\n      var _this3 = this; // Keep first option always pre-selected\n\n\n      if (this.keepFirst) {\n        this.$nextTick(function () {\n          if (_this3.isActive) {\n            _this3.selectFirstOption(_this3.computedData);\n          } else {\n            _this3.setHovered(null);\n          }\n        });\n      } else {\n        if (this.hovered) {\n          // reset hovered if list doesn't contain it\n          var hoveredValue = this.getValue(this.hovered);\n          var data = this.computedData.map(function (d) {\n            return d.items;\n          }).reduce(function (a, b) {\n            return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n          }, []);\n\n          if (!data.some(function (d) {\n            return _this3.getValue(d) === hoveredValue;\n          })) {\n            this.setHovered(null);\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    /**\r\n     * Set which option is currently hovered.\r\n     */\n    setHovered: function setHovered(option) {\n      if (option === undefined) return;\n      this.hovered = option;\n    },\n\n    /**\r\n     * Set which option is currently selected, update v-model,\r\n     * update input value and close dropdown.\r\n     */\n    setSelected: function setSelected(option) {\n      var _this4 = this;\n\n      var closeDropdown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var event = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      if (option === undefined) return;\n      this.selected = option;\n      this.$emit('select', this.selected, event);\n\n      if (this.selected !== null) {\n        if (this.clearOnSelect) {\n          var input = this.$refs.input;\n          input.newValue = '';\n          input.$refs.input.value = '';\n        } else {\n          this.newValue = this.getValue(this.selected);\n        }\n\n        this.setHovered(null);\n      }\n\n      closeDropdown && this.$nextTick(function () {\n        _this4.isActive = false;\n      });\n      this.checkValidity();\n    },\n\n    /**\r\n     * Select first option\r\n     */\n    selectFirstOption: function selectFirstOption(computedData) {\n      var _this5 = this;\n\n      this.$nextTick(function () {\n        var nonEmptyElements = computedData.filter(function (element) {\n          return element.items && element.items.length;\n        });\n\n        if (nonEmptyElements.length) {\n          var option = nonEmptyElements[0].items[0];\n\n          _this5.setHovered(option);\n        } else {\n          _this5.setHovered(null);\n        }\n      });\n    },\n    keydown: function keydown(event) {\n      var key = event.key; // cannot destructure preventDefault (https://stackoverflow.com/a/49616808/2774496)\n      // prevent emit submit event\n\n      if (key === 'Enter') event.preventDefault(); // Close dropdown on Tab & no hovered\n\n      if (key === 'Escape' || key === 'Tab') {\n        this.isActive = false;\n      }\n\n      if (this.confirmKeys.indexOf(key) >= 0) {\n        // If adding by comma, don't add the comma to the input\n        if (key === ',') event.preventDefault(); // Close dropdown on select by Tab\n\n        var closeDropdown = !this.keepOpen || key === 'Tab';\n\n        if (this.hovered === null) {\n          // header and footer uses headerHovered && footerHovered. If header or footer\n          // was selected then fire event otherwise just return so a value isn't selected\n          this.checkIfHeaderOrFooterSelected(event, null, closeDropdown);\n          return;\n        }\n\n        this.setSelected(this.hovered, closeDropdown, event);\n      }\n    },\n    selectHeaderOrFoterByClick: function selectHeaderOrFoterByClick(event, origin) {\n      this.checkIfHeaderOrFooterSelected(event, {\n        origin: origin\n      });\n    },\n\n    /**\r\n     * Check if header or footer was selected.\r\n     */\n    checkIfHeaderOrFooterSelected: function checkIfHeaderOrFooterSelected(event, triggerClick) {\n      var closeDropdown = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      if (this.selectableHeader && (this.headerHovered || triggerClick && triggerClick.origin === 'header')) {\n        this.$emit('select-header', event);\n        this.headerHovered = false;\n        if (triggerClick) this.setHovered(null);\n        if (closeDropdown) this.isActive = false;\n      }\n\n      if (this.selectableFooter && (this.footerHovered || triggerClick && triggerClick.origin === 'footer')) {\n        this.$emit('select-footer', event);\n        this.footerHovered = false;\n        if (triggerClick) this.setHovered(null);\n        if (closeDropdown) this.isActive = false;\n      }\n    },\n\n    /**\r\n     * Close dropdown if clicked outside.\r\n     */\n    clickedOutside: function clickedOutside(event) {\n      var target = isCustomElement(this) ? event.composedPath()[0] : event.target;\n\n      if (!this.hasFocus && this.whiteList.indexOf(target) < 0) {\n        if (this.keepFirst && this.hovered && this.selectOnClickOutside) {\n          this.setSelected(this.hovered, true);\n        } else {\n          this.isActive = false;\n        }\n      }\n    },\n\n    /**\r\n     * Return display text for the input.\r\n     * If object, get value from path, or else just the value.\r\n     */\n    getValue: function getValue(option) {\n      if (option === null) return;\n\n      if (typeof this.customFormatter !== 'undefined') {\n        return this.customFormatter(option);\n      }\n\n      return _typeof(option) === 'object' ? getValueByPath(option, this.field) : option;\n    },\n\n    /**\r\n     * Check if the scroll list inside the dropdown\r\n     * reached it's end.\r\n     */\n    checkIfReachedTheEndOfScroll: function checkIfReachedTheEndOfScroll(list) {\n      if (list.clientHeight !== list.scrollHeight && list.scrollTop + list.clientHeight >= list.scrollHeight) {\n        this.$emit('infinite-scroll');\n      }\n    },\n\n    /**\r\n     * Calculate if the dropdown is vertically visible when activated,\r\n     * otherwise it is openened upwards.\r\n     */\n    calcDropdownInViewportVertical: function calcDropdownInViewportVertical() {\n      var _this6 = this;\n\n      this.$nextTick(function () {\n        /**\r\n         * this.$refs.dropdown may be undefined\r\n         * when Autocomplete is conditional rendered\r\n         */\n        if (_this6.$refs.dropdown === undefined) return;\n\n        var rect = _this6.$refs.dropdown.getBoundingClientRect();\n\n        _this6.isListInViewportVertically = rect.top >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight);\n\n        if (_this6.appendToBody) {\n          _this6.updateAppendToBody();\n        }\n      });\n    },\n\n    /**\r\n     * Arrows keys listener.\r\n     * If dropdown is active, set hovered option, or else just open.\r\n     */\n    keyArrows: function keyArrows(direction) {\n      var sum = direction === 'down' ? 1 : -1;\n\n      if (this.isActive) {\n        var data = this.computedData.map(function (d) {\n          return d.items;\n        }).reduce(function (a, b) {\n          return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n        }, []);\n\n        if (this.hasHeaderSlot && this.selectableHeader) {\n          data.unshift(undefined);\n        }\n\n        if (this.hasFooterSlot && this.selectableFooter) {\n          data.push(undefined);\n        }\n\n        var index;\n\n        if (this.headerHovered) {\n          index = 0 + sum;\n        } else if (this.footerHovered) {\n          index = data.length - 1 + sum;\n        } else {\n          index = data.indexOf(this.hovered) + sum;\n        }\n\n        index = index > data.length - 1 ? data.length - 1 : index;\n        index = index < 0 ? 0 : index;\n        this.footerHovered = false;\n        this.headerHovered = false;\n        this.setHovered(data[index] !== undefined ? data[index] : null);\n\n        if (this.hasFooterSlot && this.selectableFooter && index === data.length - 1) {\n          this.footerHovered = true;\n        }\n\n        if (this.hasHeaderSlot && this.selectableHeader && index === 0) {\n          this.headerHovered = true;\n        }\n\n        var list = this.$refs.dropdown.querySelector('.dropdown-content');\n        var querySelectorText = 'a.dropdown-item:not(.is-disabled)';\n\n        if (this.hasHeaderSlot && this.selectableHeader) {\n          querySelectorText += ',div.dropdown-header';\n        }\n\n        if (this.hasFooterSlot && this.selectableFooter) {\n          querySelectorText += ',div.dropdown-footer';\n        }\n\n        var element = list.querySelectorAll(querySelectorText)[index];\n        if (!element) return;\n        var visMin = list.scrollTop;\n        var visMax = list.scrollTop + list.clientHeight - element.clientHeight;\n\n        if (element.offsetTop < visMin) {\n          list.scrollTop = element.offsetTop;\n        } else if (element.offsetTop >= visMax) {\n          list.scrollTop = element.offsetTop - list.clientHeight + element.clientHeight;\n        }\n      } else {\n        this.isActive = true;\n      }\n    },\n\n    /**\r\n     * Focus listener.\r\n     * If value is the same as selected, select all text.\r\n     */\n    focused: function focused(event) {\n      if (this.getValue(this.selected) === this.newValue) {\n        this.$el.querySelector('input').select();\n      }\n\n      if (this.openOnFocus) {\n        this.isActive = true;\n\n        if (this.keepFirst) {\n          // If open on focus, update the hovered\n          this.selectFirstOption(this.computedData);\n        }\n      }\n\n      this.hasFocus = true;\n      this.$emit('focus', event);\n    },\n\n    /**\r\n     * Blur listener.\r\n     */\n    onBlur: function onBlur(event) {\n      this.hasFocus = false;\n      this.$emit('blur', event);\n    },\n    onInput: function onInput() {\n      var currentValue = this.getValue(this.selected);\n      if (currentValue && currentValue === this.newValue) return;\n      this.$emit('typing', this.newValue);\n      this.checkValidity();\n    },\n    rightIconClick: function rightIconClick(event) {\n      if (this.clearable) {\n        this.newValue = '';\n        this.setSelected(null, false);\n\n        if (this.openOnFocus) {\n          this.$refs.input.$el.focus();\n        }\n      } else {\n        this.$emit('icon-right-click', event);\n      }\n    },\n    checkValidity: function checkValidity() {\n      var _this7 = this;\n\n      if (this.useHtml5Validation) {\n        this.$nextTick(function () {\n          _this7.checkHtml5Validity();\n        });\n      }\n    },\n    updateAppendToBody: function updateAppendToBody() {\n      var dropdownMenu = this.$refs.dropdown;\n      var trigger = this.$refs.input.$el;\n\n      if (dropdownMenu && trigger) {\n        // update wrapper dropdown\n        var root = this.$data._bodyEl;\n        root.classList.forEach(function (item) {\n          return root.classList.remove(item);\n        });\n        root.classList.add('autocomplete');\n        root.classList.add('control');\n\n        if (this.expandend) {\n          root.classList.add('is-expandend');\n        }\n\n        var rect = trigger.getBoundingClientRect();\n        var top = rect.top + window.scrollY;\n        var left = rect.left + window.scrollX;\n\n        if (!this.isOpenedTop) {\n          top += trigger.clientHeight;\n        } else {\n          top -= dropdownMenu.clientHeight;\n        }\n\n        this.style = {\n          position: 'absolute',\n          top: \"\".concat(top, \"px\"),\n          left: \"\".concat(left, \"px\"),\n          width: \"\".concat(trigger.clientWidth, \"px\"),\n          maxWidth: \"\".concat(trigger.clientWidth, \"px\"),\n          zIndex: '99'\n        };\n      }\n    }\n  },\n  created: function created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('click', this.clickedOutside);\n\n      if (this.dropdownPosition === 'auto') {\n        window.addEventListener('resize', this.calcDropdownInViewportVertical);\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this8 = this;\n\n    if (this.checkInfiniteScroll && this.$refs.dropdown && this.$refs.dropdown.querySelector('.dropdown-content')) {\n      var list = this.$refs.dropdown.querySelector('.dropdown-content');\n      list.addEventListener('scroll', function () {\n        return _this8.checkIfReachedTheEndOfScroll(list);\n      });\n    }\n\n    if (this.appendToBody) {\n      this.$data._bodyEl = createAbsoluteElement(this.$refs.dropdown);\n      this.updateAppendToBody();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('click', this.clickedOutside);\n\n      if (this.dropdownPosition === 'auto') {\n        window.removeEventListener('resize', this.calcDropdownInViewportVertical);\n      }\n    }\n\n    if (this.checkInfiniteScroll && this.$refs.dropdown && this.$refs.dropdown.querySelector('.dropdown-content')) {\n      var list = this.$refs.dropdown.querySelector('.dropdown-content');\n      list.removeEventListener('scroll', this.checkIfReachedTheEndOfScroll);\n    }\n\n    if (this.appendToBody) {\n      removeElement(this.$data._bodyEl);\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"autocomplete control\",\n    \"class\": {\n      'is-expanded': _vm.expanded\n    }\n  }, [_c('b-input', _vm._b({\n    ref: \"input\",\n    attrs: {\n      \"type\": _vm.type,\n      \"size\": _vm.size,\n      \"loading\": _vm.loading,\n      \"rounded\": _vm.rounded,\n      \"icon\": _vm.icon,\n      \"icon-right\": _vm.newIconRight,\n      \"icon-right-clickable\": _vm.newIconRightClickable,\n      \"icon-pack\": _vm.iconPack,\n      \"maxlength\": _vm.maxlength,\n      \"autocomplete\": _vm.newAutocomplete,\n      \"use-html5-validation\": false,\n      \"aria-autocomplete\": _vm.ariaAutocomplete\n    },\n    on: {\n      \"input\": _vm.onInput,\n      \"focus\": _vm.focused,\n      \"blur\": _vm.onBlur,\n      \"icon-right-click\": _vm.rightIconClick,\n      \"icon-click\": function iconClick(event) {\n        return _vm.$emit('icon-click', event);\n      }\n    },\n    nativeOn: {\n      \"keydown\": [function ($event) {\n        return _vm.keydown($event);\n      }, function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"up\", 38, $event.key, [\"Up\", \"ArrowUp\"])) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.keyArrows('up');\n      }, function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"down\", 40, $event.key, [\"Down\", \"ArrowDown\"])) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.keyArrows('down');\n      }]\n    },\n    model: {\n      value: _vm.newValue,\n      callback: function callback($$v) {\n        _vm.newValue = $$v;\n      },\n      expression: \"newValue\"\n    }\n  }, 'b-input', _vm.$attrs, false)), _c('transition', {\n    attrs: {\n      \"name\": \"fade\"\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.isActive && (!_vm.isEmpty || _vm.hasEmptySlot || _vm.hasHeaderSlot),\n      expression: \"isActive && (!isEmpty || hasEmptySlot || hasHeaderSlot)\"\n    }],\n    ref: \"dropdown\",\n    staticClass: \"dropdown-menu\",\n    \"class\": {\n      'is-opened-top': _vm.isOpenedTop && !_vm.appendToBody\n    },\n    style: _vm.style\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.isActive,\n      expression: \"isActive\"\n    }],\n    staticClass: \"dropdown-content\",\n    style: _vm.contentStyle\n  }, [_vm.hasHeaderSlot ? _c('div', {\n    staticClass: \"dropdown-item dropdown-header\",\n    \"class\": {\n      'is-hovered': _vm.headerHovered\n    },\n    attrs: {\n      \"role\": \"button\",\n      \"tabindex\": \"0\"\n    },\n    on: {\n      \"click\": function click($event) {\n        return _vm.selectHeaderOrFoterByClick($event, 'header');\n      }\n    }\n  }, [_vm._t(\"header\")], 2) : _vm._e(), _vm._l(_vm.computedData, function (element, groupindex) {\n    return [element.group ? _c('div', {\n      key: groupindex + 'group',\n      staticClass: \"dropdown-item\"\n    }, [_vm.hasGroupSlot ? _vm._t(\"group\", null, {\n      \"group\": element.group,\n      \"index\": groupindex\n    }) : _c('span', {\n      staticClass: \"has-text-weight-bold\"\n    }, [_vm._v(\" \" + _vm._s(element.group) + \" \")])], 2) : _vm._e(), _vm._l(element.items, function (option, index) {\n      return _c('a', {\n        key: groupindex + ':' + index,\n        staticClass: \"dropdown-item\",\n        \"class\": {\n          'is-hovered': option === _vm.hovered\n        },\n        attrs: {\n          \"role\": \"button\",\n          \"tabindex\": \"0\"\n        },\n        on: {\n          \"click\": function click($event) {\n            $event.stopPropagation();\n            return _vm.setSelected(option, !_vm.keepOpen, $event);\n          }\n        }\n      }, [_vm.hasDefaultSlot ? _vm._t(\"default\", null, {\n        \"option\": option,\n        \"index\": index\n      }) : _c('span', [_vm._v(\" \" + _vm._s(_vm.getValue(option, true)) + \" \")])], 2);\n    })];\n  }), _vm.isEmpty && _vm.hasEmptySlot ? _c('div', {\n    staticClass: \"dropdown-item is-disabled\"\n  }, [_vm._t(\"empty\")], 2) : _vm._e(), _vm.hasFooterSlot ? _c('div', {\n    staticClass: \"dropdown-item dropdown-footer\",\n    \"class\": {\n      'is-hovered': _vm.footerHovered\n    },\n    attrs: {\n      \"role\": \"button\",\n      \"tabindex\": \"0\"\n    },\n    on: {\n      \"click\": function click($event) {\n        return _vm.selectHeaderOrFoterByClick($event, 'footer');\n      }\n    }\n  }, [_vm._t(\"footer\")], 2) : _vm._e()], 2)])])], 1);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Autocomplete = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nexport { Autocomplete as A };","map":null,"metadata":{},"sourceType":"module"}