{"ast":null,"code":"import { _ as _defineProperty } from './chunk-455cdeae.js';\nimport './helpers.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport './chunk-17b33cd2.js';\nimport { I as Icon } from './chunk-7e17a637.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js';\nimport { I as Input } from './chunk-83c8b459.js';\nimport './chunk-60a03517.js';\nimport { T as TimepickerMixin } from './chunk-6e56b8bc.js';\nimport './chunk-42f463e6.js';\nimport { D as Dropdown, a as DropdownItem } from './chunk-ade5b253.js';\nimport { F as Field } from './chunk-d46e7ff0.js'; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// These should match the variables in clockpicker.scss\n\nvar indicatorSize = 40;\nvar paddingInner = 5;\nvar script = {\n  name: 'BClockpickerFace',\n  props: {\n    pickerSize: Number,\n    min: Number,\n    max: Number,\n    \"double\": Boolean,\n    value: Number,\n    faceNumbers: Array,\n    disabledValues: Function\n  },\n  data: function data() {\n    return {\n      isDragging: false,\n      inputValue: this.value,\n      prevAngle: 720\n    };\n  },\n  computed: {\n    /**\r\n    * How many number indicators are shown on the face\r\n    */\n    count: function count() {\n      return this.max - this.min + 1;\n    },\n\n    /**\r\n    * How many number indicators are shown per ring on the face\r\n    */\n    countPerRing: function countPerRing() {\n      return this[\"double\"] ? this.count / 2 : this.count;\n    },\n\n    /**\r\n    * Radius of the clock face\r\n    */\n    radius: function radius() {\n      return this.pickerSize / 2;\n    },\n\n    /**\r\n    * Radius of the outer ring of number indicators\r\n    */\n    outerRadius: function outerRadius() {\n      return this.radius - paddingInner - indicatorSize / 2;\n    },\n\n    /**\r\n    * Radius of the inner ring of number indicators\r\n    */\n    innerRadius: function innerRadius() {\n      return Math.max(this.outerRadius * 0.6, this.outerRadius - paddingInner - indicatorSize); // 48px gives enough room for the outer ring of numbers\n    },\n\n    /**\r\n    * The angle for each selectable value\r\n    * For hours this ends up being 30 degrees, for minutes 6 degrees\r\n    */\n    degreesPerUnit: function degreesPerUnit() {\n      return 360 / this.countPerRing;\n    },\n\n    /**\r\n    * Used for calculating x/y grid location based on degrees\r\n    */\n    degrees: function degrees() {\n      return this.degreesPerUnit * Math.PI / 180;\n    },\n\n    /**\r\n    * Calculates the angle the clock hand should be rotated for the\r\n    * selected value\r\n    */\n    handRotateAngle: function handRotateAngle() {\n      var currentAngle = this.prevAngle;\n\n      while (currentAngle < 0) {\n        currentAngle += 360;\n      }\n\n      var targetAngle = this.calcHandAngle(this.displayedValue);\n      var degreesDiff = this.shortestDistanceDegrees(currentAngle, targetAngle);\n      var angle = this.prevAngle + degreesDiff;\n      return angle;\n    },\n\n    /**\r\n    * Determines how long the selector hand is based on if the\r\n    * selected value is located along the outer or inner ring\r\n    */\n    handScale: function handScale() {\n      return this.calcHandScale(this.displayedValue);\n    },\n    handStyle: function handStyle() {\n      return {\n        transform: \"rotate(\".concat(this.handRotateAngle, \"deg) scaleY(\").concat(this.handScale, \")\"),\n        transition: '.3s cubic-bezier(.25,.8,.50,1)'\n      };\n    },\n\n    /**\r\n    * The value the hand should be pointing at\r\n    */\n    displayedValue: function displayedValue() {\n      return this.inputValue == null ? this.min : this.inputValue;\n    }\n  },\n  watch: {\n    value: function value(_value) {\n      if (_value !== this.inputValue) {\n        this.prevAngle = this.handRotateAngle;\n      }\n\n      this.inputValue = _value;\n    }\n  },\n  methods: {\n    isDisabled: function isDisabled(value) {\n      return this.disabledValues && this.disabledValues(value);\n    },\n\n    /**\r\n    * Calculates the distance between two points\r\n    */\n    euclidean: function euclidean(p0, p1) {\n      var dx = p1.x - p0.x;\n      var dy = p1.y - p0.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    },\n    shortestDistanceDegrees: function shortestDistanceDegrees(start, stop) {\n      var modDiff = (stop - start) % 360;\n      var shortestDistance = 180 - Math.abs(Math.abs(modDiff) - 180);\n      return (modDiff + 360) % 360 < 180 ? shortestDistance * 1 : shortestDistance * -1;\n    },\n\n    /**\r\n    * Calculates the angle of the line from the center point\r\n    * to the given point.\r\n    */\n    coordToAngle: function coordToAngle(center, p1) {\n      var value = 2 * Math.atan2(p1.y - center.y - this.euclidean(center, p1), p1.x - center.x);\n      return Math.abs(value * 180 / Math.PI);\n    },\n\n    /**\r\n    * Generates the inline style translate() property for a\r\n    * number indicator, which determines it's location on the\r\n    * clock face\r\n    */\n    getNumberTranslate: function getNumberTranslate(value) {\n      var _this$getNumberCoords = this.getNumberCoords(value),\n          x = _this$getNumberCoords.x,\n          y = _this$getNumberCoords.y;\n\n      return \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n    },\n\n    /***\r\n    * Calculates the coordinates on the clock face for a number\r\n    * indicator value\r\n    */\n    getNumberCoords: function getNumberCoords(value) {\n      var radius = this.isInnerRing(value) ? this.innerRadius : this.outerRadius;\n      return {\n        x: Math.round(radius * Math.sin((value - this.min) * this.degrees)),\n        y: Math.round(-radius * Math.cos((value - this.min) * this.degrees))\n      };\n    },\n    getFaceNumberClasses: function getFaceNumberClasses(num) {\n      return {\n        'active': num.value === this.displayedValue,\n        'disabled': this.isDisabled(num.value)\n      };\n    },\n\n    /**\r\n    * Determines if a value resides on the inner ring\r\n    */\n    isInnerRing: function isInnerRing(value) {\n      return this[\"double\"] && value - this.min >= this.countPerRing;\n    },\n    calcHandAngle: function calcHandAngle(value) {\n      var angle = this.degreesPerUnit * (value - this.min);\n      if (this.isInnerRing(value)) angle -= 360;\n      return angle;\n    },\n    calcHandScale: function calcHandScale(value) {\n      return this.isInnerRing(value) ? this.innerRadius / this.outerRadius : 1;\n    },\n    onMouseDown: function onMouseDown(e) {\n      e.preventDefault();\n      this.isDragging = true;\n      this.onDragMove(e);\n    },\n    onMouseUp: function onMouseUp() {\n      this.isDragging = false;\n\n      if (!this.isDisabled(this.inputValue)) {\n        this.$emit('change', this.inputValue);\n      }\n    },\n    onDragMove: function onDragMove(e) {\n      e.preventDefault();\n      if (!this.isDragging && e.type !== 'click') return;\n\n      var _this$$refs$clock$get = this.$refs.clock.getBoundingClientRect(),\n          width = _this$$refs$clock$get.width,\n          top = _this$$refs$clock$get.top,\n          left = _this$$refs$clock$get.left;\n\n      var _ref = 'touches' in e ? e.touches[0] : e,\n          clientX = _ref.clientX,\n          clientY = _ref.clientY;\n\n      var center = {\n        x: width / 2,\n        y: -width / 2\n      };\n      var coords = {\n        x: clientX - left,\n        y: top - clientY\n      };\n      var handAngle = Math.round(this.coordToAngle(center, coords) + 360) % 360;\n      var insideClick = this[\"double\"] && this.euclidean(center, coords) < (this.outerRadius + this.innerRadius) / 2 - 16;\n      var value = Math.round(handAngle / this.degreesPerUnit) + this.min + (insideClick ? this.countPerRing : 0); // Necessary to fix edge case when selecting left part of max value\n\n      if (handAngle >= 360 - this.degreesPerUnit / 2) {\n        value = insideClick ? this.max : this.min;\n      }\n\n      this.update(value);\n    },\n    update: function update(value) {\n      if (this.inputValue !== value && !this.isDisabled(value)) {\n        this.prevAngle = this.handRotateAngle;\n        this.inputValue = value;\n        this.$emit('input', value);\n      }\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"b-clockpicker-face\",\n    on: {\n      \"mousedown\": _vm.onMouseDown,\n      \"mouseup\": _vm.onMouseUp,\n      \"mousemove\": _vm.onDragMove,\n      \"touchstart\": _vm.onMouseDown,\n      \"touchend\": _vm.onMouseUp,\n      \"touchmove\": _vm.onDragMove\n    }\n  }, [_c('div', {\n    ref: \"clock\",\n    staticClass: \"b-clockpicker-face-outer-ring\"\n  }, [_c('div', {\n    staticClass: \"b-clockpicker-face-hand\",\n    style: _vm.handStyle\n  }), _vm._l(_vm.faceNumbers, function (num, index) {\n    return _c('span', {\n      key: index,\n      staticClass: \"b-clockpicker-face-number\",\n      \"class\": _vm.getFaceNumberClasses(num),\n      style: {\n        transform: _vm.getNumberTranslate(num.value)\n      }\n    }, [_c('span', [_vm._v(_vm._s(num.label))])]);\n  })], 2)]);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar ClockpickerFace = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar _components;\n\nvar outerPadding = 12;\nvar script$1 = {\n  name: 'BClockpicker',\n  components: (_components = {}, _defineProperty(_components, ClockpickerFace.name, ClockpickerFace), _defineProperty(_components, Input.name, Input), _defineProperty(_components, Field.name, Field), _defineProperty(_components, Icon.name, Icon), _defineProperty(_components, Dropdown.name, Dropdown), _defineProperty(_components, DropdownItem.name, DropdownItem), _components),\n  mixins: [TimepickerMixin],\n  props: {\n    pickerSize: {\n      type: Number,\n      \"default\": 290\n    },\n    incrementMinutes: {\n      type: Number,\n      \"default\": 5\n    },\n    autoSwitch: {\n      type: Boolean,\n      \"default\": true\n    },\n    type: {\n      type: String,\n      \"default\": 'is-primary'\n    },\n    hoursLabel: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultClockpickerHoursLabel || 'Hours';\n      }\n    },\n    minutesLabel: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultClockpickerMinutesLabel || 'Min';\n      }\n    }\n  },\n  data: function data() {\n    return {\n      isSelectingHour: true,\n      isDragging: false,\n      _isClockpicker: true\n    };\n  },\n  computed: {\n    hoursDisplay: function hoursDisplay() {\n      if (this.hoursSelected == null) return '--';\n      if (this.isHourFormat24) return this.pad(this.hoursSelected);\n      var display = this.hoursSelected;\n\n      if (this.meridienSelected === this.pmString) {\n        display -= 12;\n      }\n\n      if (display === 0) display = 12;\n      return display;\n    },\n    minutesDisplay: function minutesDisplay() {\n      return this.minutesSelected == null ? '--' : this.pad(this.minutesSelected);\n    },\n    minFaceValue: function minFaceValue() {\n      return this.isSelectingHour && !this.isHourFormat24 && this.meridienSelected === this.pmString ? 12 : 0;\n    },\n    maxFaceValue: function maxFaceValue() {\n      return this.isSelectingHour ? !this.isHourFormat24 && this.meridienSelected === this.amString ? 11 : 23 : 59;\n    },\n    faceSize: function faceSize() {\n      return this.pickerSize - outerPadding * 2;\n    },\n    faceDisabledValues: function faceDisabledValues() {\n      return this.isSelectingHour ? this.isHourDisabled : this.isMinuteDisabled;\n    }\n  },\n  methods: {\n    onClockInput: function onClockInput(value) {\n      if (this.isSelectingHour) {\n        this.hoursSelected = value;\n        this.onHoursChange(value);\n      } else {\n        this.minutesSelected = value;\n        this.onMinutesChange(value);\n      }\n    },\n    onClockChange: function onClockChange(value) {\n      if (this.autoSwitch && this.isSelectingHour) {\n        this.isSelectingHour = !this.isSelectingHour;\n      }\n    },\n    onMeridienClick: function onMeridienClick(value) {\n      if (this.meridienSelected !== value) {\n        this.meridienSelected = value;\n        this.onMeridienChange(value);\n      }\n    },\n\n    /*\r\n     * Avoid dropdown toggle when is already visible\r\n     */\n    onInputClick: function onInputClick(event) {\n      if (this.$refs.dropdown.isActive) {\n        event.stopPropagation();\n      }\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$1 = script$1;\n/* template */\n\nvar __vue_render__$1 = function __vue_render__$1() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"b-clockpicker control\",\n    \"class\": [_vm.size, _vm.type, {\n      'is-expanded': _vm.expanded\n    }]\n  }, [!_vm.isMobile || _vm.inline ? _c('b-dropdown', {\n    ref: \"dropdown\",\n    attrs: {\n      \"position\": _vm.position,\n      \"disabled\": _vm.disabled,\n      \"inline\": _vm.inline,\n      \"append-to-body\": _vm.appendToBody,\n      \"append-to-body-copy-parent\": \"\"\n    },\n    on: {\n      \"active-change\": _vm.onActiveChange\n    },\n    scopedSlots: _vm._u([!_vm.inline ? {\n      key: \"trigger\",\n      fn: function fn() {\n        return [_vm._t(\"trigger\", [_c('b-input', _vm._b({\n          ref: \"input\",\n          attrs: {\n            \"slot\": \"trigger\",\n            \"autocomplete\": \"off\",\n            \"value\": _vm.formatValue(_vm.computedValue),\n            \"placeholder\": _vm.placeholder,\n            \"size\": _vm.size,\n            \"icon\": _vm.icon,\n            \"icon-pack\": _vm.iconPack,\n            \"loading\": _vm.loading,\n            \"disabled\": _vm.disabled,\n            \"readonly\": !_vm.editable,\n            \"rounded\": _vm.rounded,\n            \"use-html5-validation\": _vm.useHtml5Validation\n          },\n          on: {\n            \"focus\": _vm.handleOnFocus,\n            \"blur\": function blur($event) {\n              return _vm.checkHtml5Validity();\n            }\n          },\n          nativeOn: {\n            \"click\": function click($event) {\n              return _vm.onInputClick($event);\n            },\n            \"keyup\": function keyup($event) {\n              if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) {\n                return null;\n              }\n\n              return _vm.toggle(true);\n            },\n            \"change\": function change($event) {\n              return _vm.onChange($event.target.value);\n            }\n          },\n          slot: \"trigger\"\n        }, 'b-input', _vm.$attrs, false))])];\n      },\n      proxy: true\n    } : null], null, true)\n  }, [_c('div', {\n    staticClass: \"card\",\n    attrs: {\n      \"disabled\": _vm.disabled,\n      \"custom\": \"\"\n    }\n  }, [_vm.inline ? _c('header', {\n    staticClass: \"card-header\"\n  }, [_c('div', {\n    staticClass: \"b-clockpicker-header card-header-title\"\n  }, [_c('div', {\n    staticClass: \"b-clockpicker-time\"\n  }, [_c('span', {\n    staticClass: \"b-clockpicker-btn\",\n    \"class\": {\n      active: _vm.isSelectingHour\n    },\n    on: {\n      \"click\": function click($event) {\n        _vm.isSelectingHour = true;\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.hoursDisplay))]), _c('span', [_vm._v(_vm._s(_vm.hourLiteral))]), _c('span', {\n    staticClass: \"b-clockpicker-btn\",\n    \"class\": {\n      active: !_vm.isSelectingHour\n    },\n    on: {\n      \"click\": function click($event) {\n        _vm.isSelectingHour = false;\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.minutesDisplay))])]), !_vm.isHourFormat24 ? _c('div', {\n    staticClass: \"b-clockpicker-period\"\n  }, [_c('div', {\n    staticClass: \"b-clockpicker-btn\",\n    \"class\": {\n      active: _vm.meridienSelected === _vm.amString || _vm.meridienSelected === _vm.AM\n    },\n    on: {\n      \"click\": function click($event) {\n        return _vm.onMeridienClick(_vm.amString);\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.amString))]), _c('div', {\n    staticClass: \"b-clockpicker-btn\",\n    \"class\": {\n      active: _vm.meridienSelected === _vm.pmString || _vm.meridienSelected === _vm.PM\n    },\n    on: {\n      \"click\": function click($event) {\n        return _vm.onMeridienClick(_vm.pmString);\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.pmString))])]) : _vm._e()])]) : _vm._e(), _c('div', {\n    staticClass: \"card-content\"\n  }, [_c('div', {\n    staticClass: \"b-clockpicker-body\",\n    style: {\n      width: _vm.faceSize + 'px',\n      height: _vm.faceSize + 'px'\n    }\n  }, [!_vm.inline ? _c('div', {\n    staticClass: \"b-clockpicker-time\"\n  }, [_c('div', {\n    staticClass: \"b-clockpicker-btn\",\n    \"class\": {\n      active: _vm.isSelectingHour\n    },\n    on: {\n      \"click\": function click($event) {\n        _vm.isSelectingHour = true;\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.hoursLabel))]), _c('span', {\n    staticClass: \"b-clockpicker-btn\",\n    \"class\": {\n      active: !_vm.isSelectingHour\n    },\n    on: {\n      \"click\": function click($event) {\n        _vm.isSelectingHour = false;\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.minutesLabel))])]) : _vm._e(), !_vm.isHourFormat24 && !_vm.inline ? _c('div', {\n    staticClass: \"b-clockpicker-period\"\n  }, [_c('div', {\n    staticClass: \"b-clockpicker-btn\",\n    \"class\": {\n      active: _vm.meridienSelected === _vm.amString || _vm.meridienSelected === _vm.AM\n    },\n    on: {\n      \"click\": function click($event) {\n        return _vm.onMeridienClick(_vm.amString);\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.amString))]), _c('div', {\n    staticClass: \"b-clockpicker-btn\",\n    \"class\": {\n      active: _vm.meridienSelected === _vm.pmString || _vm.meridienSelected === _vm.PM\n    },\n    on: {\n      \"click\": function click($event) {\n        return _vm.onMeridienClick(_vm.pmString);\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.pmString))])]) : _vm._e(), _c('b-clockpicker-face', {\n    attrs: {\n      \"picker-size\": _vm.faceSize,\n      \"min\": _vm.minFaceValue,\n      \"max\": _vm.maxFaceValue,\n      \"face-numbers\": _vm.isSelectingHour ? _vm.hours : _vm.minutes,\n      \"disabled-values\": _vm.faceDisabledValues,\n      \"double\": _vm.isSelectingHour && _vm.isHourFormat24,\n      \"value\": _vm.isSelectingHour ? _vm.hoursSelected : _vm.minutesSelected\n    },\n    on: {\n      \"input\": _vm.onClockInput,\n      \"change\": _vm.onClockChange\n    }\n  })], 1)]), _vm.$slots[\"default\"] !== undefined && _vm.$slots[\"default\"].length ? _c('footer', {\n    staticClass: \"b-clockpicker-footer card-footer\"\n  }, [_vm._t(\"default\")], 2) : _vm._e()])]) : _c('b-input', _vm._b({\n    ref: \"input\",\n    attrs: {\n      \"type\": \"time\",\n      \"autocomplete\": \"off\",\n      \"value\": _vm.formatHHMMSS(_vm.computedValue),\n      \"placeholder\": _vm.placeholder,\n      \"size\": _vm.size,\n      \"icon\": _vm.icon,\n      \"icon-pack\": _vm.iconPack,\n      \"loading\": _vm.loading,\n      \"max\": _vm.formatHHMMSS(_vm.maxTime),\n      \"min\": _vm.formatHHMMSS(_vm.minTime),\n      \"disabled\": _vm.disabled,\n      \"readonly\": false,\n      \"use-html5-validation\": _vm.useHtml5Validation\n    },\n    on: {\n      \"focus\": _vm.handleOnFocus,\n      \"blur\": function blur($event) {\n        _vm.onBlur() && _vm.checkHtml5Validity();\n      }\n    },\n    nativeOn: {\n      \"click\": function click($event) {\n        $event.stopPropagation();\n        return _vm.toggle(true);\n      },\n      \"keyup\": function keyup($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) {\n          return null;\n        }\n\n        return _vm.toggle(true);\n      },\n      \"change\": function change($event) {\n        return _vm.onChangeNativePicker($event);\n      }\n    }\n  }, 'b-input', _vm.$attrs, false))], 1);\n};\n\nvar __vue_staticRenderFns__$1 = [];\n/* style */\n\nvar __vue_inject_styles__$1 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$1 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$1 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$1 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Clockpicker = __vue_normalize__({\n  render: __vue_render__$1,\n  staticRenderFns: __vue_staticRenderFns__$1\n}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Clockpicker);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Clockpicker as BClockpicker };","map":null,"metadata":{},"sourceType":"module"}