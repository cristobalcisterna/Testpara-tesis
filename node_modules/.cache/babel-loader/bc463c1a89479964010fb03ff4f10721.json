{"ast":null,"code":"import { _ as _defineProperty } from './chunk-1fafdf15.js';\nimport { isMobile, matchWithGroups } from './helpers.js';\nimport { c as config } from './chunk-652f2dad.js';\nimport { F as FormElementMixin } from './chunk-516e4877.js';\nimport './chunk-7fd02ffe.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js';\nimport './chunk-f160efb9.js';\nimport './chunk-1297c2c9.js';\nimport './chunk-e8611f22.js';\nimport './chunk-42f463e6.js';\nimport './chunk-2c957994.js';\nimport './chunk-c3b09672.js';\nimport './chunk-37678809.js';\nimport { D as Datepicker } from './chunk-f9299099.js';\nimport { T as Timepicker } from './chunk-349dd751.js';\n\nvar _components;\n\nvar AM = 'AM';\nvar PM = 'PM';\nvar script = {\n  name: 'BDatetimepicker',\n  components: (_components = {}, _defineProperty(_components, Datepicker.name, Datepicker), _defineProperty(_components, Timepicker.name, Timepicker), _components),\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: {\n      type: Date\n    },\n    editable: {\n      type: Boolean,\n      \"default\": false\n    },\n    placeholder: String,\n    horizontalTimePicker: Boolean,\n    disabled: Boolean,\n    icon: String,\n    iconRight: String,\n    iconRightClickable: Boolean,\n    iconPack: String,\n    inline: Boolean,\n    openOnFocus: Boolean,\n    position: String,\n    mobileNative: {\n      type: Boolean,\n      \"default\": true\n    },\n    minDatetime: Date,\n    maxDatetime: Date,\n    datetimeFormatter: {\n      type: Function\n    },\n    datetimeParser: {\n      type: Function\n    },\n    datetimeCreator: {\n      type: Function,\n      \"default\": function _default(date) {\n        if (typeof config.defaultDatetimeCreator === 'function') {\n          return config.defaultDatetimeCreator(date);\n        } else {\n          return date;\n        }\n      }\n    },\n    datepicker: Object,\n    timepicker: Object,\n    tzOffset: {\n      type: Number,\n      \"default\": 0\n    },\n    focusable: {\n      type: Boolean,\n      \"default\": true\n    },\n    appendToBody: Boolean\n  },\n  data: function data() {\n    return {\n      newValue: this.adjustValue(this.value)\n    };\n  },\n  computed: {\n    computedValue: {\n      get: function get() {\n        return this.newValue;\n      },\n      set: function set(value) {\n        if (value) {\n          var val = new Date(value.getTime());\n\n          if (this.newValue) {\n            // restore time part\n            if ((value.getDate() !== this.newValue.getDate() || value.getMonth() !== this.newValue.getMonth() || value.getFullYear() !== this.newValue.getFullYear()) && value.getHours() === 0 && value.getMinutes() === 0 && value.getSeconds() === 0) {\n              val.setHours(this.newValue.getHours(), this.newValue.getMinutes(), this.newValue.getSeconds(), 0);\n            }\n          } else {\n            val = this.datetimeCreator(value);\n          } // check min and max range\n\n\n          if (this.minDatetime && val < this.adjustValue(this.minDatetime)) {\n            val = this.adjustValue(this.minDatetime);\n          } else if (this.maxDatetime && val > this.adjustValue(this.maxDatetime)) {\n            val = this.adjustValue(this.maxDatetime);\n          }\n\n          this.newValue = new Date(val.getTime());\n        } else {\n          this.newValue = this.adjustValue(value);\n        }\n\n        var adjustedValue = this.adjustValue(this.newValue, true); // reverse adjust\n\n        this.$emit('input', adjustedValue);\n      }\n    },\n    localeOptions: function localeOptions() {\n      return new Intl.DateTimeFormat(this.locale, {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: this.enableSeconds() ? 'numeric' : undefined\n      }).resolvedOptions();\n    },\n    dtf: function dtf() {\n      return new Intl.DateTimeFormat(this.locale, {\n        year: this.localeOptions.year || 'numeric',\n        month: this.localeOptions.month || 'numeric',\n        day: this.localeOptions.day || 'numeric',\n        hour: this.localeOptions.hour || 'numeric',\n        minute: this.localeOptions.minute || 'numeric',\n        second: this.enableSeconds() ? this.localeOptions.second || 'numeric' : undefined,\n        hour12: !this.isHourFormat24()\n      });\n    },\n    isMobileNative: function isMobileNative() {\n      return this.mobileNative && this.tzOffset === 0;\n    },\n    isMobile: function isMobile$1() {\n      return this.isMobileNative && isMobile.any();\n    },\n    minDate: function minDate() {\n      if (!this.minDatetime) {\n        return this.datepicker ? this.adjustValue(this.datepicker.minDate) : null;\n      }\n\n      var adjMinDatetime = this.adjustValue(this.minDatetime);\n      return new Date(adjMinDatetime.getFullYear(), adjMinDatetime.getMonth(), adjMinDatetime.getDate(), 0, 0, 0, 0);\n    },\n    maxDate: function maxDate() {\n      if (!this.maxDatetime) {\n        return this.datepicker ? this.adjustValue(this.datepicker.maxDate) : null;\n      }\n\n      var adjMaxDatetime = this.adjustValue(this.maxDatetime);\n      return new Date(adjMaxDatetime.getFullYear(), adjMaxDatetime.getMonth(), adjMaxDatetime.getDate(), 0, 0, 0, 0);\n    },\n    minTime: function minTime() {\n      if (!this.minDatetime || this.newValue === null || typeof this.newValue === 'undefined') {\n        return this.timepicker ? this.adjustValue(this.timepicker.minTime) : null;\n      }\n\n      var adjMinDatetime = this.adjustValue(this.minDatetime);\n\n      if (adjMinDatetime.getFullYear() === this.newValue.getFullYear() && adjMinDatetime.getMonth() === this.newValue.getMonth() && adjMinDatetime.getDate() === this.newValue.getDate()) {\n        return adjMinDatetime;\n      }\n    },\n    maxTime: function maxTime() {\n      if (!this.maxDatetime || this.newValue === null || typeof this.newValue === 'undefined') {\n        return this.timepicker ? this.adjustValue(this.timepicker.maxTime) : null;\n      }\n\n      var adjMaxDatetime = this.adjustValue(this.maxDatetime);\n\n      if (adjMaxDatetime.getFullYear() === this.newValue.getFullYear() && adjMaxDatetime.getMonth() === this.newValue.getMonth() && adjMaxDatetime.getDate() === this.newValue.getDate()) {\n        return adjMaxDatetime;\n      }\n    },\n    datepickerSize: function datepickerSize() {\n      return this.datepicker && this.datepicker.size ? this.datepicker.size : this.size;\n    },\n    timepickerSize: function timepickerSize() {\n      return this.timepicker && this.timepicker.size ? this.timepicker.size : this.size;\n    },\n    timepickerDisabled: function timepickerDisabled() {\n      return this.timepicker && this.timepicker.disabled ? this.timepicker.disabled : this.disabled;\n    }\n  },\n  watch: {\n    value: function value() {\n      this.newValue = this.adjustValue(this.value);\n    },\n    tzOffset: function tzOffset() {\n      this.newValue = this.adjustValue(this.value);\n    }\n  },\n  methods: {\n    enableSeconds: function enableSeconds() {\n      if (this.$refs.timepicker) {\n        return this.$refs.timepicker.enableSeconds;\n      }\n\n      return false;\n    },\n    isHourFormat24: function isHourFormat24() {\n      if (this.$refs.timepicker) {\n        return this.$refs.timepicker.isHourFormat24;\n      }\n\n      return !this.localeOptions.hour12;\n    },\n    adjustValue: function adjustValue(value) {\n      var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!value) return value;\n\n      if (reverse) {\n        return new Date(value.getTime() - this.tzOffset * 60000);\n      } else {\n        return new Date(value.getTime() + this.tzOffset * 60000);\n      }\n    },\n    defaultDatetimeParser: function defaultDatetimeParser(date) {\n      if (typeof this.datetimeParser === 'function') {\n        return this.datetimeParser(date);\n      } else if (typeof config.defaultDatetimeParser === 'function') {\n        return config.defaultDatetimeParser(date);\n      } else {\n        if (this.dtf.formatToParts && typeof this.dtf.formatToParts === 'function') {\n          var dayPeriods = [AM, PM, AM.toLowerCase(), PM.toLowerCase()];\n\n          if (this.$refs.timepicker) {\n            dayPeriods.push(this.$refs.timepicker.amString);\n            dayPeriods.push(this.$refs.timepicker.pmString);\n          }\n\n          var parts = this.dtf.formatToParts(new Date());\n          var formatRegex = parts.map(function (part, idx) {\n            if (part.type === 'literal') {\n              if (idx + 1 < parts.length && parts[idx + 1].type === 'hour') {\n                return \"[^\\\\d]+\";\n              }\n\n              return part.value.replace(/ /g, '\\\\s?');\n            } else if (part.type === 'dayPeriod') {\n              return \"((?!=<\".concat(part.type, \">)(\").concat(dayPeriods.join('|'), \")?)\");\n            }\n\n            return \"((?!=<\".concat(part.type, \">)\\\\d+)\");\n          }).join('');\n          var datetimeGroups = matchWithGroups(formatRegex, date); // We do a simple validation for the group.\n          // If it is not valid, it will fallback to Date.parse below\n\n          if (datetimeGroups.year && datetimeGroups.year.length === 4 && datetimeGroups.month && datetimeGroups.month <= 12 && datetimeGroups.day && datetimeGroups.day <= 31 && datetimeGroups.hour && datetimeGroups.hour >= 0 && datetimeGroups.hour < 24 && datetimeGroups.minute && datetimeGroups.minute >= 0 && datetimeGroups.minute < 59) {\n            var d = new Date(datetimeGroups.year, datetimeGroups.month - 1, datetimeGroups.day, datetimeGroups.hour, datetimeGroups.minute, datetimeGroups.second || 0);\n            return d;\n          }\n        }\n\n        return new Date(Date.parse(date));\n      }\n    },\n    defaultDatetimeFormatter: function defaultDatetimeFormatter(date) {\n      if (typeof this.datetimeFormatter === 'function') {\n        return this.datetimeFormatter(date);\n      } else if (typeof config.defaultDatetimeFormatter === 'function') {\n        return config.defaultDatetimeFormatter(date);\n      } else {\n        return this.dtf.format(date);\n      }\n    },\n\n    /*\r\n    * Parse date from string\r\n    */\n    onChangeNativePicker: function onChangeNativePicker(event) {\n      var date = event.target.value;\n      var s = date ? date.split(/\\D/) : [];\n\n      if (s.length >= 5) {\n        var year = parseInt(s[0], 10);\n        var month = parseInt(s[1], 10) - 1;\n        var day = parseInt(s[2], 10);\n        var hours = parseInt(s[3], 10);\n        var minutes = parseInt(s[4], 10); // Seconds are omitted intentionally; they are unsupported by input\n        // type=datetime-local and cause the control to fail native validation\n\n        this.computedValue = new Date(year, month, day, hours, minutes);\n      } else {\n        this.computedValue = null;\n      }\n    },\n    formatNative: function formatNative(value) {\n      var date = new Date(value);\n\n      if (value && !isNaN(date)) {\n        var year = date.getFullYear();\n        var month = date.getMonth() + 1;\n        var day = date.getDate();\n        var hours = date.getHours();\n        var minutes = date.getMinutes();\n        var seconds = date.getSeconds();\n        return year + '-' + ((month < 10 ? '0' : '') + month) + '-' + ((day < 10 ? '0' : '') + day) + 'T' + ((hours < 10 ? '0' : '') + hours) + ':' + ((minutes < 10 ? '0' : '') + minutes) + ':' + ((seconds < 10 ? '0' : '') + seconds);\n      }\n\n      return '';\n    },\n    toggle: function toggle() {\n      this.$refs.datepicker.toggle();\n    }\n  },\n  mounted: function mounted() {\n    if (!this.isMobile || this.inline) {\n      // $refs attached, it's time to refresh datepicker (input)\n      if (this.newValue) {\n        this.$refs.datepicker.$forceUpdate();\n      }\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return !_vm.isMobile || _vm.inline ? _c('b-datepicker', _vm._b({\n    ref: \"datepicker\",\n    attrs: {\n      \"rounded\": _vm.rounded,\n      \"open-on-focus\": _vm.openOnFocus,\n      \"position\": _vm.position,\n      \"loading\": _vm.loading,\n      \"inline\": _vm.inline,\n      \"editable\": _vm.editable,\n      \"expanded\": _vm.expanded,\n      \"close-on-click\": false,\n      \"date-formatter\": _vm.defaultDatetimeFormatter,\n      \"date-parser\": _vm.defaultDatetimeParser,\n      \"min-date\": _vm.minDate,\n      \"max-date\": _vm.maxDate,\n      \"icon\": _vm.icon,\n      \"icon-right\": _vm.iconRight,\n      \"icon-right-clickable\": _vm.iconRightClickable,\n      \"icon-pack\": _vm.iconPack,\n      \"size\": _vm.datepickerSize,\n      \"placeholder\": _vm.placeholder,\n      \"horizontal-time-picker\": _vm.horizontalTimePicker,\n      \"range\": false,\n      \"disabled\": _vm.disabled,\n      \"mobile-native\": _vm.isMobileNative,\n      \"locale\": _vm.locale,\n      \"focusable\": _vm.focusable,\n      \"append-to-body\": _vm.appendToBody\n    },\n    on: {\n      \"focus\": _vm.onFocus,\n      \"blur\": _vm.onBlur,\n      \"icon-right-click\": function iconRightClick($event) {\n        return _vm.$emit('icon-right-click');\n      },\n      \"change-month\": function changeMonth($event) {\n        return _vm.$emit('change-month', $event);\n      },\n      \"change-year\": function changeYear($event) {\n        return _vm.$emit('change-year', $event);\n      }\n    },\n    model: {\n      value: _vm.computedValue,\n      callback: function callback($$v) {\n        _vm.computedValue = $$v;\n      },\n      expression: \"computedValue\"\n    }\n  }, 'b-datepicker', _vm.datepicker, false), [_c('nav', {\n    staticClass: \"level is-mobile\"\n  }, [_vm.$slots.left !== undefined ? _c('div', {\n    staticClass: \"level-item has-text-centered\"\n  }, [_vm._t(\"left\")], 2) : _vm._e(), _c('div', {\n    staticClass: \"level-item has-text-centered\"\n  }, [_c('b-timepicker', _vm._b({\n    ref: \"timepicker\",\n    attrs: {\n      \"inline\": \"\",\n      \"editable\": _vm.editable,\n      \"min-time\": _vm.minTime,\n      \"max-time\": _vm.maxTime,\n      \"size\": _vm.timepickerSize,\n      \"disabled\": _vm.timepickerDisabled,\n      \"focusable\": _vm.focusable,\n      \"mobile-native\": _vm.isMobileNative,\n      \"locale\": _vm.locale\n    },\n    model: {\n      value: _vm.computedValue,\n      callback: function callback($$v) {\n        _vm.computedValue = $$v;\n      },\n      expression: \"computedValue\"\n    }\n  }, 'b-timepicker', _vm.timepicker, false))], 1), _vm.$slots.right !== undefined ? _c('div', {\n    staticClass: \"level-item has-text-centered\"\n  }, [_vm._t(\"right\")], 2) : _vm._e()])]) : _c('b-input', _vm._b({\n    ref: \"input\",\n    attrs: {\n      \"type\": \"datetime-local\",\n      \"autocomplete\": \"off\",\n      \"value\": _vm.formatNative(_vm.computedValue),\n      \"placeholder\": _vm.placeholder,\n      \"size\": _vm.size,\n      \"icon\": _vm.icon,\n      \"icon-pack\": _vm.iconPack,\n      \"rounded\": _vm.rounded,\n      \"loading\": _vm.loading,\n      \"max\": _vm.formatNative(_vm.maxDate),\n      \"min\": _vm.formatNative(_vm.minDate),\n      \"disabled\": _vm.disabled,\n      \"readonly\": false,\n      \"use-html5-validation\": _vm.useHtml5Validation\n    },\n    on: {\n      \"focus\": _vm.onFocus,\n      \"blur\": _vm.onBlur\n    },\n    nativeOn: {\n      \"change\": function change($event) {\n        return _vm.onChangeNativePicker($event);\n      }\n    }\n  }, 'b-input', _vm.$attrs, false));\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Datetimepicker = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Datetimepicker);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Datetimepicker as BDatetimepicker };","map":null,"metadata":{},"sourceType":"module"}