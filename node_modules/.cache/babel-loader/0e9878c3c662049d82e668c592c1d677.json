{"ast":null,"code":"import { _ as _defineProperty } from './chunk-1fafdf15.js';\nimport './helpers.js';\nimport './chunk-652f2dad.js';\nimport { F as FormElementMixin } from './chunk-516e4877.js';\nimport { I as Icon } from './chunk-7fd02ffe.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js';\nimport { I as Input } from './chunk-f160efb9.js';\n\nvar _components;\n\nvar script = {\n  name: 'BNumberinput',\n  components: (_components = {}, _defineProperty(_components, Icon.name, Icon), _defineProperty(_components, Input.name, Input), _components),\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: Number,\n    min: {\n      type: [Number, String]\n    },\n    max: [Number, String],\n    step: [Number, String],\n    minStep: [Number, String],\n    exponential: [Boolean, Number],\n    disabled: Boolean,\n    type: {\n      type: String,\n      \"default\": 'is-primary'\n    },\n    editable: {\n      type: Boolean,\n      \"default\": true\n    },\n    controls: {\n      type: Boolean,\n      \"default\": true\n    },\n    controlsAlignment: {\n      type: String,\n      \"default\": 'center',\n      validator: function validator(value) {\n        return ['left', 'right', 'center'].indexOf(value) >= 0;\n      }\n    },\n    controlsRounded: {\n      type: Boolean,\n      \"default\": false\n    },\n    controlsPosition: String,\n    placeholder: [Number, String],\n    ariaMinusLabel: String,\n    ariaPlusLabel: String\n  },\n  data: function data() {\n    return {\n      newValue: this.value,\n      newStep: this.step || 1,\n      newMinStep: this.minStep,\n      timesPressed: 1,\n      _elementRef: 'input'\n    };\n  },\n  computed: {\n    computedValue: {\n      get: function get() {\n        return this.newValue;\n      },\n      set: function set(value) {\n        var _this = this;\n\n        var newValue = value;\n\n        if (value === '' || value === undefined || value === null) {\n          if (this.minNumber !== undefined) {\n            newValue = this.minNumber;\n          } else {\n            newValue = null;\n          }\n        }\n\n        this.newValue = newValue;\n\n        if (newValue === null) {\n          this.$emit('input', newValue);\n        } else if (!isNaN(newValue) && newValue !== '-0') {\n          this.$emit('input', Number(newValue));\n        }\n\n        this.$nextTick(function () {\n          _this.$refs.input.checkHtml5Validity();\n        });\n      }\n    },\n    controlsLeft: function controlsLeft() {\n      if (this.controls && this.controlsAlignment !== 'right') {\n        return this.controlsAlignment === 'left' ? ['minus', 'plus'] : ['minus'];\n      }\n\n      return [];\n    },\n    controlsRight: function controlsRight() {\n      if (this.controls && this.controlsAlignment !== 'left') {\n        return this.controlsAlignment === 'right' ? ['minus', 'plus'] : ['plus'];\n      }\n\n      return [];\n    },\n    fieldClasses: function fieldClasses() {\n      return [{\n        'has-addons': this.controlsPosition === 'compact'\n      }, {\n        'is-grouped': this.controlsPosition !== 'compact'\n      }, {\n        'is-expanded': this.expanded\n      }];\n    },\n    buttonClasses: function buttonClasses() {\n      return [this.type, this.size, {\n        'is-rounded': this.controlsRounded\n      }];\n    },\n    minNumber: function minNumber() {\n      return typeof this.min === 'string' ? parseFloat(this.min) : this.min;\n    },\n    maxNumber: function maxNumber() {\n      return typeof this.max === 'string' ? parseFloat(this.max) : this.max;\n    },\n    stepNumber: function stepNumber() {\n      return typeof this.newStep === 'string' ? parseFloat(this.newStep) : this.newStep;\n    },\n    minStepNumber: function minStepNumber() {\n      var step = typeof this.newMinStep !== 'undefined' ? this.newMinStep : this.newStep;\n      return typeof step === 'string' ? parseFloat(step) : step;\n    },\n    disabledMin: function disabledMin() {\n      return this.computedValue - this.stepNumber < this.minNumber;\n    },\n    disabledMax: function disabledMax() {\n      return this.computedValue + this.stepNumber > this.maxNumber;\n    },\n    stepDecimals: function stepDecimals() {\n      var step = this.minStepNumber.toString();\n      var index = step.indexOf('.');\n\n      if (index >= 0) {\n        return step.substring(index + 1).length;\n      }\n\n      return 0;\n    }\n  },\n  watch: {\n    /**\r\n     * When v-model is changed:\r\n     *   1. Set internal value.\r\n     */\n    value: {\n      immediate: true,\n      handler: function handler(value) {\n        this.newValue = value;\n      }\n    },\n    step: function step(value) {\n      this.newStep = value;\n    },\n    minStep: function minStep(value) {\n      this.newMinStep = value;\n    }\n  },\n  methods: {\n    isDisabled: function isDisabled(control) {\n      return this.disabled || (control === 'plus' ? this.disabledMax : this.disabledMin);\n    },\n    decrement: function decrement() {\n      if (typeof this.minNumber === 'undefined' || this.computedValue - this.stepNumber >= this.minNumber) {\n        if (this.computedValue === null || typeof this.computedValue === 'undefined') {\n          if (this.maxNumber) {\n            this.computedValue = this.maxNumber;\n            return;\n          }\n\n          this.computedValue = 0;\n        }\n\n        var value = this.computedValue - this.stepNumber;\n        this.computedValue = parseFloat(value.toFixed(this.stepDecimals));\n      }\n    },\n    increment: function increment() {\n      if (typeof this.maxNumber === 'undefined' || this.computedValue + this.stepNumber <= this.maxNumber) {\n        if (this.computedValue === null || typeof this.computedValue === 'undefined') {\n          if (this.minNumber) {\n            this.computedValue = this.minNumber;\n            return;\n          }\n\n          this.computedValue = 0;\n        }\n\n        var value = this.computedValue + this.stepNumber;\n        this.computedValue = parseFloat(value.toFixed(this.stepDecimals));\n      }\n    },\n    onControlClick: function onControlClick(event, inc) {\n      // IE 11 -> filter click event\n      if (event.detail !== 0 || event.type !== 'click') return;\n      if (inc) this.increment();else this.decrement();\n    },\n    longPressTick: function longPressTick(inc) {\n      var _this2 = this;\n\n      if (inc) this.increment();else this.decrement();\n      this._$intervalRef = setTimeout(function () {\n        _this2.longPressTick(inc);\n      }, this.exponential ? 250 / (this.exponential * this.timesPressed++) : 250);\n    },\n    onStartLongPress: function onStartLongPress(event, inc) {\n      if (event.button !== 0 && event.type !== 'touchstart') return;\n      clearTimeout(this._$intervalRef);\n      this.longPressTick(inc);\n    },\n    onStopLongPress: function onStopLongPress() {\n      if (!this._$intervalRef) return;\n      this.timesPressed = 1;\n      clearTimeout(this._$intervalRef);\n      this._$intervalRef = null;\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"b-numberinput field\",\n    \"class\": _vm.fieldClasses\n  }, [_vm._l(_vm.controlsLeft, function (control) {\n    return _c('p', {\n      key: control,\n      \"class\": ['control', control],\n      on: {\n        \"mouseup\": _vm.onStopLongPress,\n        \"mouseleave\": _vm.onStopLongPress,\n        \"touchend\": _vm.onStopLongPress,\n        \"touchcancel\": _vm.onStopLongPress\n      }\n    }, [_c('button', {\n      staticClass: \"button\",\n      \"class\": _vm.buttonClasses,\n      attrs: {\n        \"type\": \"button\",\n        \"disabled\": _vm.isDisabled(control),\n        \"aria-label\": control === 'plus' ? _vm.ariaPlusLabel : _vm.ariaMinusLabel\n      },\n      on: {\n        \"mousedown\": function mousedown($event) {\n          !_vm.isDisabled(control) && _vm.onStartLongPress($event, control === 'plus');\n        },\n        \"touchstart\": function touchstart($event) {\n          $event.preventDefault();\n          !_vm.isDisabled(control) && _vm.onStartLongPress($event, control === 'plus');\n        },\n        \"click\": function click($event) {\n          !_vm.isDisabled(control) && _vm.onControlClick($event, control === 'plus');\n        }\n      }\n    }, [_c('b-icon', {\n      attrs: {\n        \"both\": \"\",\n        \"icon\": control,\n        \"pack\": _vm.iconPack,\n        \"size\": _vm.iconSize\n      }\n    })], 1)]);\n  }), _c('b-input', _vm._b({\n    ref: \"input\",\n    attrs: {\n      \"type\": \"number\",\n      \"step\": _vm.minStepNumber,\n      \"max\": _vm.max,\n      \"min\": _vm.min,\n      \"size\": _vm.size,\n      \"disabled\": _vm.disabled,\n      \"readonly\": !_vm.editable,\n      \"loading\": _vm.loading,\n      \"rounded\": _vm.rounded,\n      \"icon\": _vm.icon,\n      \"icon-pack\": _vm.iconPack,\n      \"autocomplete\": _vm.autocomplete,\n      \"expanded\": _vm.expanded,\n      \"placeholder\": _vm.placeholder,\n      \"use-html5-validation\": _vm.useHtml5Validation\n    },\n    on: {\n      \"focus\": function focus($event) {\n        return _vm.$emit('focus', $event);\n      },\n      \"blur\": function blur($event) {\n        return _vm.$emit('blur', $event);\n      }\n    },\n    model: {\n      value: _vm.computedValue,\n      callback: function callback($$v) {\n        _vm.computedValue = $$v;\n      },\n      expression: \"computedValue\"\n    }\n  }, 'b-input', _vm.$attrs, false)), _vm._l(_vm.controlsRight, function (control) {\n    return _c('p', {\n      key: control,\n      \"class\": ['control', control],\n      on: {\n        \"mouseup\": _vm.onStopLongPress,\n        \"mouseleave\": _vm.onStopLongPress,\n        \"touchend\": _vm.onStopLongPress,\n        \"touchcancel\": _vm.onStopLongPress\n      }\n    }, [_c('button', {\n      staticClass: \"button\",\n      \"class\": _vm.buttonClasses,\n      attrs: {\n        \"type\": \"button\",\n        \"disabled\": _vm.isDisabled(control),\n        \"aria-label\": control === 'plus' ? _vm.ariaPlusLabel : _vm.ariaMinusLabel\n      },\n      on: {\n        \"mousedown\": function mousedown($event) {\n          !_vm.isDisabled(control) && _vm.onStartLongPress($event, control === 'plus');\n        },\n        \"touchstart\": function touchstart($event) {\n          $event.preventDefault();\n          !_vm.isDisabled(control) && _vm.onStartLongPress($event, control === 'plus');\n        },\n        \"click\": function click($event) {\n          !_vm.isDisabled(control) && _vm.onControlClick($event, control === 'plus');\n        }\n      }\n    }, [_c('b-icon', {\n      attrs: {\n        \"both\": \"\",\n        \"icon\": control,\n        \"pack\": _vm.iconPack,\n        \"size\": _vm.iconSize\n      }\n    })], 1)]);\n  })], 2);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Numberinput = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Numberinput);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Numberinput as BNumberinput };","map":null,"metadata":{},"sourceType":"module"}