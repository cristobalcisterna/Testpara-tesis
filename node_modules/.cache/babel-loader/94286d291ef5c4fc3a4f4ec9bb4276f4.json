{"ast":null,"code":"import { _ as _defineProperty } from './chunk-455cdeae.js';\nimport { I as Icon } from './chunk-7e17a637.js';\nvar MessageMixin = {\n  components: _defineProperty({}, Icon.name, Icon),\n  // deprecated, to replace with default 'value' in the next breaking change\n  model: {\n    prop: 'active',\n    event: 'update:active'\n  },\n  props: {\n    active: {\n      type: Boolean,\n      \"default\": true\n    },\n    title: String,\n    closable: {\n      type: Boolean,\n      \"default\": true\n    },\n    message: String,\n    type: String,\n    hasIcon: Boolean,\n    size: String,\n    icon: String,\n    iconPack: String,\n    iconSize: String,\n    autoClose: {\n      type: Boolean,\n      \"default\": false\n    },\n    duration: {\n      type: Number,\n      \"default\": 2000\n    },\n    progressBar: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      isActive: this.active,\n      remainingTime: this.duration / 1000,\n      // in seconds\n      newIconSize: this.iconSize || this.size || 'is-large'\n    };\n  },\n  watch: {\n    active: function active(value) {\n      this.isActive = value;\n    },\n    isActive: function isActive(value) {\n      if (value) {\n        this.setAutoClose();\n        this.setDurationProgress();\n      } else {\n        if (this.timer) {\n          clearTimeout(this.timer);\n        }\n      }\n    }\n  },\n  computed: {\n    /**\r\n     * Icon name (MDI) based on type.\r\n     */\n    computedIcon: function computedIcon() {\n      if (this.icon) {\n        return this.icon;\n      }\n\n      switch (this.type) {\n        case 'is-info':\n          return 'information';\n\n        case 'is-success':\n          return 'check-circle';\n\n        case 'is-warning':\n          return 'alert';\n\n        case 'is-danger':\n          return 'alert-circle';\n\n        default:\n          return null;\n      }\n    }\n  },\n  methods: {\n    /**\r\n     * Close the Message and emit events.\r\n     */\n    close: function close() {\n      this.isActive = false;\n      this.resetDurationProgress();\n      this.$emit('close');\n      this.$emit('update:active', false);\n    },\n    click: function click() {\n      this.$emit('click');\n    },\n\n    /**\r\n     * Set timer to auto close message\r\n     */\n    setAutoClose: function setAutoClose() {\n      var _this = this;\n\n      if (this.autoClose) {\n        this.timer = setTimeout(function () {\n          if (_this.isActive) {\n            _this.close();\n          }\n        }, this.duration);\n      }\n    },\n    setDurationProgress: function setDurationProgress() {\n      var _this2 = this;\n\n      if (this.progressBar) {\n        /**\r\n         * Runs every one second to set the duration passed before\r\n         * the alert will auto close to show it in the progress bar (Remaining Time)\r\n         */\n        this.$buefy.globalNoticeInterval = setInterval(function () {\n          if (_this2.remainingTime !== 0) {\n            _this2.remainingTime -= 1;\n          } else {\n            _this2.resetDurationProgress();\n          }\n        }, 1000);\n      }\n    },\n    resetDurationProgress: function resetDurationProgress() {\n      var _this3 = this;\n      /**\r\n       * Wait until the component get closed and then reset\r\n       **/\n\n\n      setTimeout(function () {\n        _this3.remainingTime = _this3.duration / 1000;\n        clearInterval(_this3.$buefy.globalNoticeInterval);\n      }, 100);\n    }\n  },\n  mounted: function mounted() {\n    this.setAutoClose();\n  }\n};\nexport { MessageMixin as M };","map":null,"metadata":{},"sourceType":"module"}