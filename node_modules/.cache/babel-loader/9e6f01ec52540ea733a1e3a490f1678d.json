{"ast":null,"code":"var findFocusable = function findFocusable(element) {\n  var programmatic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (!element) {\n    return null;\n  }\n\n  if (programmatic) {\n    return element.querySelectorAll(\"*[tabindex=\\\"-1\\\"]\");\n  }\n\n  return element.querySelectorAll(\"a[href]:not([tabindex=\\\"-1\\\"]),\\n                                     area[href],\\n                                     input:not([disabled]),\\n                                     select:not([disabled]),\\n                                     textarea:not([disabled]),\\n                                     button:not([disabled]),\\n                                     iframe,\\n                                     object,\\n                                     embed,\\n                                     *[tabindex]:not([tabindex=\\\"-1\\\"]),\\n                                     *[contenteditable]\");\n};\n\nvar onKeyDown;\n\nvar bind = function bind(el, _ref) {\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? true : _ref$value;\n\n  if (value) {\n    var focusable = findFocusable(el);\n    var focusableProg = findFocusable(el, true);\n\n    if (focusable && focusable.length > 0) {\n      onKeyDown = function onKeyDown(event) {\n        // Need to get focusable each time since it can change between key events\n        // ex. changing month in a datepicker\n        focusable = findFocusable(el);\n        focusableProg = findFocusable(el, true);\n        var firstFocusable = focusable[0];\n        var lastFocusable = focusable[focusable.length - 1];\n\n        if (event.target === firstFocusable && event.shiftKey && event.key === 'Tab') {\n          event.preventDefault();\n          lastFocusable.focus();\n        } else if ((event.target === lastFocusable || Array.from(focusableProg).indexOf(event.target) >= 0) && !event.shiftKey && event.key === 'Tab') {\n          event.preventDefault();\n          firstFocusable.focus();\n        }\n      };\n\n      el.addEventListener('keydown', onKeyDown);\n    }\n  }\n};\n\nvar unbind = function unbind(el) {\n  el.removeEventListener('keydown', onKeyDown);\n};\n\nvar directive = {\n  bind: bind,\n  unbind: unbind\n};\nexport { directive as t };","map":null,"metadata":{},"sourceType":"module"}