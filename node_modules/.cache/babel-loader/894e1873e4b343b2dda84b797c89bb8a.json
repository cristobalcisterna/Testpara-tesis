{"ast":null,"code":"import './chunk-1fafdf15.js';\nimport { isCustomElement, removeElement } from './helpers.js';\nimport { c as config } from './chunk-652f2dad.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js'; //\n\nvar script = {\n  name: 'BSidebar',\n  // deprecated, to replace with default 'value' in the next breaking change\n  model: {\n    prop: 'open',\n    event: 'update:open'\n  },\n  props: {\n    open: Boolean,\n    type: [String, Object],\n    overlay: Boolean,\n    position: {\n      type: String,\n      \"default\": 'fixed',\n      validator: function validator(value) {\n        return ['fixed', 'absolute', 'static'].indexOf(value) >= 0;\n      }\n    },\n    fullheight: Boolean,\n    fullwidth: Boolean,\n    right: Boolean,\n    mobile: {\n      type: String\n    },\n    reduce: Boolean,\n    expandOnHover: Boolean,\n    expandOnHoverFixed: Boolean,\n    delay: {\n      type: Number,\n      \"default\": function _default() {\n        return config.defaultSidebarDelay;\n      }\n    },\n    canCancel: {\n      type: [Array, Boolean],\n      \"default\": function _default() {\n        return ['escape', 'outside'];\n      }\n    },\n    onCancel: {\n      type: Function,\n      \"default\": function _default() {}\n    },\n    scroll: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultModalScroll ? config.defaultModalScroll : 'clip';\n      },\n      validator: function validator(value) {\n        return ['clip', 'keep'].indexOf(value) >= 0;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      isOpen: this.open,\n      isDelayOver: false,\n      transitionName: null,\n      animating: true,\n      savedScrollTop: null,\n      hasLeaved: false\n    };\n  },\n  computed: {\n    rootClasses: function rootClasses() {\n      return [this.type, {\n        'is-fixed': this.isFixed,\n        'is-static': this.isStatic,\n        'is-absolute': this.isAbsolute,\n        'is-fullheight': this.fullheight,\n        'is-fullwidth': this.fullwidth,\n        'is-right': this.right,\n        'is-mini': this.reduce && !this.isDelayOver,\n        'is-mini-expand': this.expandOnHover || this.isDelayOver,\n        'is-mini-expand-fixed': this.expandOnHover && this.expandOnHoverFixed || this.isDelayOver,\n        'is-mini-delayed': this.delay !== null,\n        'is-mini-mobile': this.mobile === 'reduce',\n        'is-hidden-mobile': this.mobile === 'hide',\n        'is-fullwidth-mobile': this.mobile === 'fullwidth'\n      }];\n    },\n    cancelOptions: function cancelOptions() {\n      return typeof this.canCancel === 'boolean' ? this.canCancel ? ['escape', 'outside'] : [] : this.canCancel;\n    },\n    isStatic: function isStatic() {\n      return this.position === 'static';\n    },\n    isFixed: function isFixed() {\n      return this.position === 'fixed';\n    },\n    isAbsolute: function isAbsolute() {\n      return this.position === 'absolute';\n    }\n  },\n  watch: {\n    open: {\n      handler: function handler(value) {\n        this.isOpen = value;\n\n        if (this.overlay) {\n          this.handleScroll();\n        }\n\n        var open = this.right ? !value : value;\n        this.transitionName = !open ? 'slide-prev' : 'slide-next';\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    /**\r\n    * White-listed items to not close when clicked.\r\n    * Add sidebar content and all children.\r\n    */\n    getWhiteList: function getWhiteList() {\n      var whiteList = [];\n      whiteList.push(this.$refs.sidebarContent); // Add all chidren from dropdown\n\n      if (this.$refs.sidebarContent !== undefined) {\n        var children = this.$refs.sidebarContent.querySelectorAll('*');\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var child = _step.value;\n            whiteList.push(child);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      return whiteList;\n    },\n\n    /**\r\n    * Keypress event that is bound to the document.\r\n    */\n    keyPress: function keyPress(_ref) {\n      var key = _ref.key;\n\n      if (this.isFixed) {\n        if (this.isOpen && (key === 'Escape' || key === 'Esc')) this.cancel('escape');\n      }\n    },\n\n    /**\r\n    * Close the Sidebar if canCancel and call the onCancel prop (function).\r\n    */\n    cancel: function cancel(method) {\n      if (this.cancelOptions.indexOf(method) < 0) return;\n      if (this.isStatic) return;\n      this.onCancel.apply(null, arguments);\n      this.close();\n    },\n\n    /**\r\n    * Call the onCancel prop (function) and emit events\r\n    */\n    close: function close() {\n      this.isOpen = false;\n      this.$emit('close');\n      this.$emit('update:open', false);\n    },\n\n    /**\r\n     * Close fixed sidebar if clicked outside.\r\n     */\n    clickedOutside: function clickedOutside(event) {\n      if (this.isFixed) {\n        if (this.isOpen && !this.animating) {\n          var target = isCustomElement(this) ? event.composedPath()[0] : event.target;\n\n          if (this.getWhiteList().indexOf(target) < 0) {\n            this.cancel('outside');\n          }\n        }\n      }\n    },\n\n    /**\r\n    * Transition before-enter hook\r\n    */\n    beforeEnter: function beforeEnter() {\n      this.animating = true;\n    },\n\n    /**\r\n    * Transition after-leave hook\r\n    */\n    afterEnter: function afterEnter() {\n      this.animating = false;\n    },\n    handleScroll: function handleScroll() {\n      if (typeof window === 'undefined') return;\n\n      if (this.scroll === 'clip') {\n        if (this.open) {\n          document.documentElement.classList.add('is-clipped');\n        } else {\n          document.documentElement.classList.remove('is-clipped');\n        }\n\n        return;\n      }\n\n      this.savedScrollTop = !this.savedScrollTop ? document.documentElement.scrollTop : this.savedScrollTop;\n\n      if (this.open) {\n        document.body.classList.add('is-noscroll');\n      } else {\n        document.body.classList.remove('is-noscroll');\n      }\n\n      if (this.open) {\n        document.body.style.top = \"-\".concat(this.savedScrollTop, \"px\");\n        return;\n      }\n\n      document.documentElement.scrollTop = this.savedScrollTop;\n      document.body.style.top = null;\n      this.savedScrollTop = null;\n    },\n    onHover: function onHover() {\n      var _this = this;\n\n      if (this.delay) {\n        this.hasLeaved = false;\n        this.timer = setTimeout(function () {\n          if (!_this.hasLeaved) {\n            _this.isDelayOver = true;\n          }\n\n          _this.timer = null;\n        }, this.delay);\n      } else {\n        this.isDelayOver = false;\n      }\n    },\n    onHoverLeave: function onHoverLeave() {\n      this.hasLeaved = true;\n      this.timer = null;\n      this.isDelayOver = false;\n    }\n  },\n  created: function created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('keyup', this.keyPress);\n      document.addEventListener('click', this.clickedOutside);\n    }\n  },\n  mounted: function mounted() {\n    if (typeof window !== 'undefined') {\n      if (this.isFixed) {\n        document.body.appendChild(this.$el);\n      }\n    }\n\n    if (this.overlay && this.open) {\n      this.handleScroll();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('keyup', this.keyPress);\n      document.removeEventListener('click', this.clickedOutside);\n\n      if (this.overlay) {\n        // reset scroll\n        document.documentElement.classList.remove('is-clipped');\n        var savedScrollTop = !this.savedScrollTop ? document.documentElement.scrollTop : this.savedScrollTop;\n        document.body.classList.remove('is-noscroll');\n        document.documentElement.scrollTop = savedScrollTop;\n        document.body.style.top = null;\n      }\n    }\n\n    if (this.isFixed) {\n      removeElement(this.$el);\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"b-sidebar\"\n  }, [_vm.overlay && _vm.isOpen ? _c('div', {\n    staticClass: \"sidebar-background\"\n  }) : _vm._e(), _c('transition', {\n    attrs: {\n      \"name\": _vm.transitionName\n    },\n    on: {\n      \"before-enter\": _vm.beforeEnter,\n      \"after-enter\": _vm.afterEnter\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.isOpen,\n      expression: \"isOpen\"\n    }],\n    ref: \"sidebarContent\",\n    staticClass: \"sidebar-content\",\n    \"class\": _vm.rootClasses,\n    on: {\n      \"mouseenter\": _vm.onHover,\n      \"mouseleave\": _vm.onHoverLeave\n    }\n  }, [_vm._t(\"default\")], 2)])], 1);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Sidebar = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Sidebar);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Sidebar as BSidebar };","map":null,"metadata":{},"sourceType":"module"}