{"ast":null,"code":"import { removeElement } from './helpers.js';\nimport { _ as __vue_normalize__ } from './chunk-cca88db8.js';\nimport { H as HTMLElement } from './chunk-b9bdb0e4.js'; //\n\nvar script = {\n  name: 'BLoading',\n  // deprecated, to replace with default 'value' in the next breaking change\n  model: {\n    prop: 'active',\n    event: 'update:active'\n  },\n  props: {\n    active: Boolean,\n    programmatic: Boolean,\n    container: [Object, Function, HTMLElement],\n    isFullPage: {\n      type: Boolean,\n      \"default\": true\n    },\n    animation: {\n      type: String,\n      \"default\": 'fade'\n    },\n    canCancel: {\n      type: Boolean,\n      \"default\": false\n    },\n    onCancel: {\n      type: Function,\n      \"default\": function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      isActive: this.active || false,\n      displayInFullPage: this.isFullPage\n    };\n  },\n  watch: {\n    active: function active(value) {\n      this.isActive = value;\n    },\n    isFullPage: function isFullPage(value) {\n      this.displayInFullPage = value;\n    }\n  },\n  methods: {\n    /**\r\n    * Close the Modal if canCancel.\r\n    */\n    cancel: function cancel() {\n      if (!this.canCancel || !this.isActive) return;\n      this.close();\n    },\n\n    /**\r\n    * Emit events, and destroy modal if it's programmatic.\r\n    */\n    close: function close() {\n      var _this = this;\n\n      this.onCancel.apply(null, arguments);\n      this.$emit('close');\n      this.$emit('update:active', false); // Timeout for the animation complete before destroying\n\n      if (this.programmatic) {\n        this.isActive = false;\n        setTimeout(function () {\n          _this.$destroy();\n\n          removeElement(_this.$el);\n        }, 150);\n      }\n    },\n\n    /**\r\n    * Keypress event that is bound to the document.\r\n    */\n    keyPress: function keyPress(_ref) {\n      var key = _ref.key;\n      if (key === 'Escape' || key === 'Esc') this.cancel();\n    }\n  },\n  created: function created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('keyup', this.keyPress);\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Insert the Loading component in body tag\n    // only if it's programmatic\n    if (this.programmatic) {\n      if (!this.container) {\n        document.body.appendChild(this.$el);\n      } else {\n        this.displayInFullPage = false;\n        this.$emit('update:is-full-page', false);\n        this.container.appendChild(this.$el);\n      }\n    }\n  },\n  mounted: function mounted() {\n    if (this.programmatic) this.isActive = true;\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('keyup', this.keyPress);\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('transition', {\n    attrs: {\n      \"name\": _vm.animation\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.isActive,\n      expression: \"isActive\"\n    }],\n    staticClass: \"loading-overlay is-active\",\n    \"class\": {\n      'is-full-page': _vm.displayInFullPage\n    }\n  }, [_c('div', {\n    staticClass: \"loading-background\",\n    on: {\n      \"click\": _vm.cancel\n    }\n  }), _vm._t(\"default\", [_c('div', {\n    staticClass: \"loading-icon\"\n  })])], 2)]);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Loading = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nexport { Loading as L };","map":null,"metadata":{},"sourceType":"module"}