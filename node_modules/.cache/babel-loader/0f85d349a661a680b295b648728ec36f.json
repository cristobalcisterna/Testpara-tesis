{"ast":null,"code":"import { _ as _defineProperty } from './chunk-455cdeae.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport { _ as __vue_normalize__ } from './chunk-cca88db8.js';\nvar script = {\n  name: 'BFieldBody',\n  props: {\n    message: {\n      type: [String, Array]\n    },\n    type: {\n      type: [String, Object]\n    }\n  },\n  render: function render(createElement) {\n    var _this = this;\n\n    var first = true;\n    return createElement('div', {\n      attrs: {\n        'class': 'field-body'\n      }\n    }, this.$slots[\"default\"].map(function (element) {\n      // skip returns and comments\n      if (!element.tag) {\n        return element;\n      }\n\n      var message;\n\n      if (first) {\n        message = _this.message;\n        first = false;\n      }\n\n      return createElement('b-field', {\n        attrs: {\n          type: _this.type,\n          message: message\n        }\n      }, [element]);\n    }));\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = undefined;\n/* style inject */\n\n/* style inject SSR */\n\nvar FieldBody = __vue_normalize__({}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar script$1 = {\n  name: 'BField',\n  components: _defineProperty({}, FieldBody.name, FieldBody),\n  provide: function provide() {\n    return {\n      'BField': this\n    };\n  },\n  inject: {\n    parent: {\n      from: 'BField',\n      \"default\": false\n    }\n  },\n  // Used internally only when using Field in Field\n  props: {\n    type: [String, Object],\n    label: String,\n    labelFor: String,\n    message: [String, Array, Object],\n    grouped: Boolean,\n    groupMultiline: Boolean,\n    position: String,\n    expanded: Boolean,\n    horizontal: Boolean,\n    addons: {\n      type: Boolean,\n      \"default\": true\n    },\n    customClass: String,\n    labelPosition: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultFieldLabelPosition;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      newType: this.type,\n      newMessage: this.message,\n      fieldLabelSize: null,\n      _isField: true // Used internally by Input and Select\n\n    };\n  },\n  computed: {\n    rootClasses: function rootClasses() {\n      return [{\n        'is-expanded': this.expanded,\n        'is-horizontal': this.horizontal,\n        'is-floating-in-label': this.hasLabel && !this.horizontal && this.labelPosition === 'inside',\n        'is-floating-label': this.hasLabel && !this.horizontal && this.labelPosition === 'on-border'\n      }, this.numberInputClasses];\n    },\n    innerFieldClasses: function innerFieldClasses() {\n      return [this.fieldType(), this.newPosition, {\n        'is-grouped-multiline': this.groupMultiline\n      }];\n    },\n    hasInnerField: function hasInnerField() {\n      return this.grouped || this.groupMultiline || this.hasAddons();\n    },\n\n    /**\r\n    * Correct Bulma class for the side of the addon or group.\r\n    *\r\n    * This is not kept like the others (is-small, etc.),\r\n    * because since 'has-addons' is set automatically it\r\n    * doesn't make sense to teach users what addons are exactly.\r\n    */\n    newPosition: function newPosition() {\n      if (this.position === undefined) return;\n      var position = this.position.split('-');\n      if (position.length < 1) return;\n      var prefix = this.grouped ? 'is-grouped-' : 'has-addons-';\n      if (this.position) return prefix + position[1];\n    },\n\n    /**\r\n    * Formatted message in case it's an array\r\n    * (each element is separated by <br> tag)\r\n    */\n    formattedMessage: function formattedMessage() {\n      if (this.parent && this.parent.hasInnerField) {\n        return ''; // Message will be displayed in parent field\n      }\n\n      if (typeof this.newMessage === 'string') {\n        return [this.newMessage];\n      }\n\n      var messages = [];\n\n      if (Array.isArray(this.newMessage)) {\n        this.newMessage.forEach(function (message) {\n          if (typeof message === 'string') {\n            messages.push(message);\n          } else {\n            for (var key in message) {\n              if (message[key]) {\n                messages.push(key);\n              }\n            }\n          }\n        });\n      } else {\n        for (var key in this.newMessage) {\n          if (this.newMessage[key]) {\n            messages.push(key);\n          }\n        }\n      }\n\n      return messages.filter(function (m) {\n        if (m) return m;\n      });\n    },\n    hasLabel: function hasLabel() {\n      return this.label || this.$slots.label;\n    },\n    hasMessage: function hasMessage() {\n      return (!this.parent || !this.parent.hasInnerField) && this.newMessage || this.$slots.message;\n    },\n    numberInputClasses: function numberInputClasses() {\n      if (this.$slots[\"default\"]) {\n        var numberinput = this.$slots[\"default\"].filter(function (node) {\n          return node.tag && node.tag.toLowerCase().indexOf('numberinput') >= 0;\n        })[0];\n\n        if (numberinput) {\n          var classes = ['has-numberinput'];\n          var controlsPosition = numberinput.componentOptions.propsData.controlsPosition;\n          var size = numberinput.componentOptions.propsData.size;\n\n          if (controlsPosition) {\n            classes.push(\"has-numberinput-\".concat(controlsPosition));\n          }\n\n          if (size) {\n            classes.push(\"has-numberinput-\".concat(size));\n          }\n\n          return classes;\n        }\n      }\n\n      return null;\n    }\n  },\n  watch: {\n    /**\r\n    * Set internal type when prop change.\r\n    */\n    type: function type(value) {\n      this.newType = value;\n    },\n\n    /**\r\n    * Set internal message when prop change.\r\n    */\n    message: function message(value) {\n      this.newMessage = value;\n    },\n\n    /**\r\n    * Set parent message if we use Field in Field.\r\n    */\n    newMessage: function newMessage(value) {\n      if (this.parent && this.parent.hasInnerField) {\n        if (!this.parent.type) {\n          this.parent.newType = this.newType;\n        }\n\n        if (!this.parent.message) {\n          this.parent.newMessage = value;\n        }\n      }\n    }\n  },\n  methods: {\n    /**\r\n    * Field has addons if there are more than one slot\r\n    * (element / component) in the Field.\r\n    * Or is grouped when prop is set.\r\n    * Is a method to be called when component re-render.\r\n    */\n    fieldType: function fieldType() {\n      if (this.grouped) return 'is-grouped';\n      if (this.hasAddons()) return 'has-addons';\n    },\n    hasAddons: function hasAddons() {\n      var renderedNode = 0;\n\n      if (this.$slots[\"default\"]) {\n        renderedNode = this.$slots[\"default\"].reduce(function (i, node) {\n          return node.tag ? i + 1 : i;\n        }, 0);\n      }\n\n      return renderedNode > 1 && this.addons && !this.horizontal;\n    }\n  },\n  mounted: function mounted() {\n    if (this.horizontal) {\n      // Bulma docs: .is-normal for any .input or .button\n      var elements = this.$el.querySelectorAll('.input, .select, .button, .textarea, .b-slider');\n\n      if (elements.length > 0) {\n        this.fieldLabelSize = 'is-normal';\n      }\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$1 = script$1;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"field\",\n    \"class\": _vm.rootClasses\n  }, [_vm.horizontal ? _c('div', {\n    staticClass: \"field-label\",\n    \"class\": [_vm.customClass, _vm.fieldLabelSize]\n  }, [_vm.hasLabel ? _c('label', {\n    staticClass: \"label\",\n    \"class\": _vm.customClass,\n    attrs: {\n      \"for\": _vm.labelFor\n    }\n  }, [_vm.$slots.label ? _vm._t(\"label\") : [_vm._v(_vm._s(_vm.label))]], 2) : _vm._e()]) : [_vm.hasLabel ? _c('label', {\n    staticClass: \"label\",\n    \"class\": _vm.customClass,\n    attrs: {\n      \"for\": _vm.labelFor\n    }\n  }, [_vm.$slots.label ? _vm._t(\"label\") : [_vm._v(_vm._s(_vm.label))]], 2) : _vm._e()], _vm.horizontal ? _c('b-field-body', {\n    attrs: {\n      \"message\": _vm.newMessage ? _vm.formattedMessage : '',\n      \"type\": _vm.newType\n    }\n  }, [_vm._t(\"default\")], 2) : _vm.hasInnerField ? _c('div', {\n    staticClass: \"field-body\"\n  }, [_c('b-field', {\n    \"class\": _vm.innerFieldClasses,\n    attrs: {\n      \"addons\": false,\n      \"type\": _vm.newType\n    }\n  }, [_vm._t(\"default\")], 2)], 1) : [_vm._t(\"default\")], _vm.hasMessage && !_vm.horizontal ? _c('p', {\n    staticClass: \"help\",\n    \"class\": _vm.newType\n  }, [_vm.$slots.message ? _vm._t(\"message\") : [_vm._l(_vm.formattedMessage, function (mess, i) {\n    return [_vm._v(\" \" + _vm._s(mess) + \" \"), i + 1 < _vm.formattedMessage.length ? _c('br', {\n      key: i\n    }) : _vm._e()];\n  })]], 2) : _vm._e()], 2);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__$1 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$1 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$1 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$1 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Field = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, undefined, undefined);\n\nexport { Field as F };","map":null,"metadata":{},"sourceType":"module"}