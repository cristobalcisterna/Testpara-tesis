{"ast":null,"code":"import { _ as _defineProperty } from './chunk-1fafdf15.js';\nimport { F as FormElementMixin } from './chunk-516e4877.js';\nimport { I as Icon } from './chunk-7fd02ffe.js';\nimport { _ as __vue_normalize__ } from './chunk-cca88db8.js';\nvar script = {\n  name: 'BSelect',\n  components: _defineProperty({}, Icon.name, Icon),\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: {\n      type: [String, Number, Boolean, Object, Array, Function, Date],\n      \"default\": null\n    },\n    placeholder: String,\n    multiple: Boolean,\n    nativeSize: [String, Number]\n  },\n  data: function data() {\n    return {\n      selected: this.value,\n      _elementRef: 'select'\n    };\n  },\n  computed: {\n    computedValue: {\n      get: function get() {\n        return this.selected;\n      },\n      set: function set(value) {\n        this.selected = value;\n        this.$emit('input', value);\n        !this.isValid && this.checkHtml5Validity();\n      }\n    },\n    spanClasses: function spanClasses() {\n      return [this.size, this.statusType, {\n        'is-fullwidth': this.expanded,\n        'is-loading': this.loading,\n        'is-multiple': this.multiple,\n        'is-rounded': this.rounded,\n        'is-empty': this.selected === null\n      }];\n    }\n  },\n  watch: {\n    /**\r\n    * When v-model is changed:\r\n    *   1. Set the selected option.\r\n    *   2. If it's invalid, validate again.\r\n    */\n    value: function value(_value) {\n      this.selected = _value;\n      !this.isValid && this.checkHtml5Validity();\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"control\",\n    \"class\": {\n      'is-expanded': _vm.expanded,\n      'has-icons-left': _vm.icon\n    }\n  }, [_c('span', {\n    staticClass: \"select\",\n    \"class\": _vm.spanClasses\n  }, [_c('select', _vm._b({\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.computedValue,\n      expression: \"computedValue\"\n    }],\n    ref: \"select\",\n    attrs: {\n      \"multiple\": _vm.multiple,\n      \"size\": _vm.nativeSize\n    },\n    on: {\n      \"blur\": function blur($event) {\n        _vm.$emit('blur', $event) && _vm.checkHtml5Validity();\n      },\n      \"focus\": function focus($event) {\n        return _vm.$emit('focus', $event);\n      },\n      \"change\": function change($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.computedValue = $event.target.multiple ? $$selectedVal : $$selectedVal[0];\n      }\n    }\n  }, 'select', _vm.$attrs, false), [_vm.placeholder ? [_vm.computedValue == null ? _c('option', {\n    attrs: {\n      \"disabled\": \"\",\n      \"hidden\": \"\"\n    },\n    domProps: {\n      \"value\": null\n    }\n  }, [_vm._v(\" \" + _vm._s(_vm.placeholder) + \" \")]) : _vm._e()] : _vm._e(), _vm._t(\"default\")], 2)]), _vm.icon ? _c('b-icon', {\n    staticClass: \"is-left\",\n    attrs: {\n      \"icon\": _vm.icon,\n      \"pack\": _vm.iconPack,\n      \"size\": _vm.iconSize\n    }\n  }) : _vm._e()], 1);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Select = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nexport { Select as S };","map":null,"metadata":{},"sourceType":"module"}