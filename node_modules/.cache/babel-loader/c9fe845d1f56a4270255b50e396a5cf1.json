{"ast":null,"code":"import { e as _inherits, f as _wrapNativeSuper, g as _classCallCheck, h as _possibleConstructorReturn, i as _getPrototypeOf, j as _createClass, b as _typeof, d as _toConsumableArray, k as _slicedToArray, l as _taggedTemplateLiteral, _ as _defineProperty } from './chunk-455cdeae.js';\nimport { isMobile } from './helpers.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport { F as FormElementMixin } from './chunk-17b33cd2.js';\nimport { I as Icon } from './chunk-7e17a637.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js';\nimport { I as Input } from './chunk-83c8b459.js';\nimport './chunk-60a03517.js';\nimport './chunk-42f463e6.js';\nimport { D as Dropdown, a as DropdownItem } from './chunk-ade5b253.js';\nimport { F as Field } from './chunk-d46e7ff0.js';\nimport { S as Select } from './chunk-4e788733.js';\nimport { T as Tooltip } from './chunk-9b0b8225.js';\nvar colorChannels = ['red', 'green', 'blue', 'alpha'];\nvar colorsNammed = {\n  black: '#000000',\n  silver: '#c0c0c0',\n  gray: '#808080',\n  white: '#ffffff',\n  maroon: '#800000',\n  red: '#ff0000',\n  purple: '#800080',\n  fuchsia: '#ff00ff',\n  green: '#008000',\n  lime: '#00ff00',\n  olive: '#808000',\n  yellow: '#ffff00',\n  navy: '#000080',\n  blue: '#0000ff',\n  teal: '#008080',\n  aqua: '#00ffff',\n  orange: '#ffa500',\n  aliceblue: '#f0f8ff',\n  antiquewhite: '#faebd7',\n  aquamarine: '#7fffd4',\n  azure: '#f0ffff',\n  beige: '#f5f5dc',\n  bisque: '#ffe4c4',\n  blanchedalmond: '#ffebcd',\n  blueviolet: '#8a2be2',\n  brown: '#a52a2a',\n  burlywood: '#deb887',\n  cadetblue: '#5f9ea0',\n  chartreuse: '#7fff00',\n  chocolate: '#d2691e',\n  coral: '#ff7f50',\n  cornflowerblue: '#6495ed',\n  cornsilk: '#fff8dc',\n  crimson: '#dc143c',\n  cyan: '#00ffff',\n  darkblue: '#00008b',\n  darkcyan: '#008b8b',\n  darkgoldenrod: '#b8860b',\n  darkgray: '#a9a9a9',\n  darkgreen: '#006400',\n  darkgrey: '#a9a9a9',\n  darkkhaki: '#bdb76b',\n  darkmagenta: '#8b008b',\n  darkolivegreen: '#556b2f',\n  darkorange: '#ff8c00',\n  darkorchid: '#9932cc',\n  darkred: '#8b0000',\n  darksalmon: '#e9967a',\n  darkseagreen: '#8fbc8f',\n  darkslateblue: '#483d8b',\n  darkslategray: '#2f4f4f',\n  darkslategrey: '#2f4f4f',\n  darkturquoise: '#00ced1',\n  darkviolet: '#9400d3',\n  deeppink: '#ff1493',\n  deepskyblue: '#00bfff',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1e90ff',\n  firebrick: '#b22222',\n  floralwhite: '#fffaf0',\n  forestgreen: '#228b22',\n  gainsboro: '#dcdcdc',\n  ghostwhite: '#f8f8ff',\n  gold: '#ffd700',\n  goldenrod: '#daa520',\n  greenyellow: '#adff2f',\n  grey: '#808080',\n  honeydew: '#f0fff0',\n  hotpink: '#ff69b4',\n  indianred: '#cd5c5c',\n  indigo: '#4b0082',\n  ivory: '#fffff0',\n  khaki: '#f0e68c',\n  lavender: '#e6e6fa',\n  lavenderblush: '#fff0f5',\n  lawngreen: '#7cfc00',\n  lemonchiffon: '#fffacd',\n  lightblue: '#add8e6',\n  lightcoral: '#f08080',\n  lightcyan: '#e0ffff',\n  lightgoldenrodyellow: '#fafad2',\n  lightgray: '#d3d3d3',\n  lightgreen: '#90ee90',\n  lightgrey: '#d3d3d3',\n  lightpink: '#ffb6c1',\n  lightsalmon: '#ffa07a',\n  lightseagreen: '#20b2aa',\n  lightskyblue: '#87cefa',\n  lightslategray: '#778899',\n  lightslategrey: '#778899',\n  lightsteelblue: '#b0c4de',\n  lightyellow: '#ffffe0',\n  limegreen: '#32cd32',\n  linen: '#faf0e6',\n  magenta: '#ff00ff',\n  mediumaquamarine: '#66cdaa',\n  mediumblue: '#0000cd',\n  mediumorchid: '#ba55d3',\n  mediumpurple: '#9370db',\n  mediumseagreen: '#3cb371',\n  mediumslateblue: '#7b68ee',\n  mediumspringgreen: '#00fa9a',\n  mediumturquoise: '#48d1cc',\n  mediumvioletred: '#c71585',\n  midnightblue: '#191970',\n  mintcream: '#f5fffa',\n  mistyrose: '#ffe4e1',\n  moccasin: '#ffe4b5',\n  navajowhite: '#ffdead',\n  oldlace: '#fdf5e6',\n  olivedrab: '#6b8e23',\n  orangered: '#ff4500',\n  orchid: '#da70d6',\n  palegoldenrod: '#eee8aa',\n  palegreen: '#98fb98',\n  paleturquoise: '#afeeee',\n  palevioletred: '#db7093',\n  papayawhip: '#ffefd5',\n  peachpuff: '#ffdab9',\n  peru: '#cd853f',\n  pink: '#ffc0cb',\n  plum: '#dda0dd',\n  powderblue: '#b0e0e6',\n  rosybrown: '#bc8f8f',\n  royalblue: '#4169e1',\n  saddlebrown: '#8b4513',\n  salmon: '#fa8072',\n  sandybrown: '#f4a460',\n  seagreen: '#2e8b57',\n  seashell: '#fff5ee',\n  sienna: '#a0522d',\n  skyblue: '#87ceeb',\n  slateblue: '#6a5acd',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#fffafa',\n  springgreen: '#00ff7f',\n  steelblue: '#4682b4',\n  tan: '#d2b48c',\n  thistle: '#d8bfd8',\n  tomato: '#ff6347',\n  turquoise: '#40e0d0',\n  violet: '#ee82ee',\n  wheat: '#f5deb3',\n  whitesmoke: '#f5f5f5',\n  yellowgreen: '#9acd32',\n  rebeccapurple: '#663399'\n};\n\nvar ColorTypeError = /*#__PURE__*/function (_Error) {\n  _inherits(ColorTypeError, _Error);\n\n  function ColorTypeError() {\n    _classCallCheck(this, ColorTypeError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ColorTypeError).call(this, 'ColorTypeError: type must be hex(a), rgb(a) or hsl(a)'));\n  }\n\n  return ColorTypeError;\n}(_wrapNativeSuper(Error));\n\nvar Color = /*#__PURE__*/function () {\n  function Color() {\n    var _this = this;\n\n    _classCallCheck(this, Color);\n\n    if (arguments.length > 0) {\n      return Color.parse.apply(Color, arguments);\n    }\n\n    this.$channels = new Uint8Array(colorChannels.length);\n    colorChannels.forEach(function (channel, index) {\n      Object.defineProperty(_this, channel, {\n        get: function get() {\n          return _this.$channels[index];\n        },\n        set: function set(_byte) {\n          if (!Number.isNaN(_byte / 1)) {\n            _this.$channels[index] = Math.min(255, Math.max(0, _byte));\n          }\n        },\n        enumerable: true,\n        configurable: true\n      });\n    }) // Required for observability\n    ;\n    ['hue', 'saturation', 'lightness'].forEach(function (name) {\n      var capitalizedName = name.replace(/^./, function (m) {\n        return m.toUpperCase();\n      });\n      Object.defineProperty(_this, name, {\n        get: function get() {\n          return _this[\"get\".concat(capitalizedName)]();\n        },\n        set: function set(value) {\n          if (!Number.isNaN(value / 1)) {\n            _this[\"set\".concat(capitalizedName)](value);\n          }\n        },\n        enumerable: true,\n        configurable: true\n      });\n    });\n  }\n\n  _createClass(Color, [{\n    key: \"getHue\",\n    value: function getHue() {\n      var _Array$from$map = Array.from(this.$channels).map(function (c) {\n        return c / 255;\n      }),\n          _Array$from$map2 = _slicedToArray(_Array$from$map, 3),\n          red = _Array$from$map2[0],\n          green = _Array$from$map2[1],\n          blue = _Array$from$map2[2];\n\n      var _ref = [Math.min(red, green, blue), Math.max(red, green, blue)],\n          min = _ref[0],\n          max = _ref[1];\n      var delta = max - min;\n      var hue = 0;\n\n      if (delta === 0) {\n        return hue;\n      }\n\n      if (red === max) {\n        hue = (green - blue) / delta % 6;\n      } else if (green === max) {\n        hue = (blue - red) / delta + 2;\n      } else {\n        hue = (red - green) / delta + 4;\n      }\n\n      hue *= 60;\n\n      while (hue !== -Infinity && hue < 0) {\n        hue += 360;\n      }\n\n      return Math.round(hue % 360);\n    }\n  }, {\n    key: \"setHue\",\n    value: function setHue(value) {\n      var color = Color.fromHSL(value, this.saturation, this.lightness, this.alpha / 255);\n\n      for (var i = 0; i < this.$channels.length; i++) {\n        this.$channels[i] = Number(color.$channels[i]);\n      }\n    }\n  }, {\n    key: \"getSaturation\",\n    value: function getSaturation() {\n      var _Array$from$map3 = Array.from(this.$channels).map(function (c) {\n        return c / 255;\n      }),\n          _Array$from$map4 = _slicedToArray(_Array$from$map3, 3),\n          red = _Array$from$map4[0],\n          green = _Array$from$map4[1],\n          blue = _Array$from$map4[2];\n\n      var _ref2 = [Math.min(red, green, blue), Math.max(red, green, blue)],\n          min = _ref2[0],\n          max = _ref2[1];\n      var delta = max - min;\n      return delta !== 0 ? Math.round(delta / (1 - Math.abs(2 * this.lightness - 1)) * 100) / 100 : 0;\n    }\n  }, {\n    key: \"setSaturation\",\n    value: function setSaturation(value) {\n      var _this2 = this;\n\n      var color = Color.fromHSL(this.hue, value, this.lightness, this.alpha / 255);\n      colorChannels.forEach(function (_, i) {\n        return _this2.$channels[i] = color.$channels[i];\n      });\n    }\n  }, {\n    key: \"getLightness\",\n    value: function getLightness() {\n      var _Array$from$map5 = Array.from(this.$channels).map(function (c) {\n        return c / 255;\n      }),\n          _Array$from$map6 = _slicedToArray(_Array$from$map5, 3),\n          red = _Array$from$map6[0],\n          green = _Array$from$map6[1],\n          blue = _Array$from$map6[2];\n\n      var _ref3 = [Math.min(red, green, blue), Math.max(red, green, blue)],\n          min = _ref3[0],\n          max = _ref3[1];\n      return Math.round((max + min) / 2 * 100) / 100;\n    }\n  }, {\n    key: \"setLightness\",\n    value: function setLightness(value) {\n      var _this3 = this;\n\n      var color = Color.fromHSL(this.hue, this.lightness, value, this.alpha / 255);\n      colorChannels.forEach(function (_, i) {\n        return _this3.$channels[i] = color.$channels[i];\n      });\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var _this4 = this;\n\n      var color = new Color();\n      colorChannels.forEach(function (_, i) {\n        return color.$channels[i] = _this4.$channels[i];\n      });\n      return color;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this5 = this;\n\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hex';\n\n      switch (String(type).toLowerCase()) {\n        case 'hex':\n          return '#' + colorChannels.slice(0, 3).map(function (channel) {\n            return _this5[channel].toString(16).padStart(2, '0');\n          }).join('');\n\n        case 'hexa':\n          return '#' + colorChannels.map(function (channel) {\n            return _this5[channel].toString(16).padStart(2, '0');\n          }).join('');\n\n        case 'rgb':\n          return \"rgb(\".concat(this.red, \", \").concat(this.green, \", \").concat(this.blue, \")\");\n\n        case 'rgba':\n          return \"rgba(\".concat(this.red, \", \").concat(this.green, \", \").concat(this.blue, \", \").concat(Math.round(this.alpha / 2.55) / 100, \")\");\n\n        case 'hsl':\n          return \"hsl(\".concat(Math.round(this.hue), \"deg, \").concat(Math.round(this.saturation * 100), \"%, \").concat(Math.round(this.lightness * 100), \"%)\");\n\n        case 'hsla':\n          return \"hsla(\".concat(Math.round(this.hue), \"deg, \").concat(Math.round(this.saturation * 100), \"%, \").concat(Math.round(this.lightness * 100), \"%, \").concat(Math.round(this.alpha / 2.55) / 100, \")\");\n\n        default:\n          throw new ColorTypeError();\n      }\n    }\n  }, {\n    key: Symbol.toString,\n    get: function get() {\n      return this.toString('hex');\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (_typeof(args[0]) === 'object') {\n        return Color.parseObject(args[0]);\n      } else if (args.every(function (arg) {\n        return !Number.isNaN(arg / 1);\n      })) {\n        var color = new Color();\n\n        if (args.length > 3) {\n          color.red = args[0];\n          color.green = args[1];\n          color.blue = args[2];\n\n          if (args[3]) {\n            color.alpha = args[3];\n          }\n        } else if (args.length === 1) {\n          var index = Number(args[0]);\n          return Color.parseIndex(index, index > Math.pow(2, 24) ? 3 : 4);\n        }\n      } else if (typeof args[0] === 'string') {\n        var match = null;\n\n        if (typeof colorsNammed[args[0].toLowerCase()] === 'string') {\n          return Color.parseHex(colorsNammed[args[0].toLowerCase()]);\n        } else if ((match = args[0].match(/^(#|&h|0x)?(([a-f0-9]{3,4}){1,2})$/i)) !== null) {\n          return Color.parseHex(match[2]);\n        } else if ((match = args[0].match(/^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)(\\s*,\\s*(\\d*\\.?\\d+))?\\s*\\)$/i)) !== null) {\n          var channels = [match[1], match[2], match[3], typeof match[5] !== 'undefined' ? match[5] : 1];\n          return Color.fromRGB.apply(Color, _toConsumableArray(channels.map(function (value) {\n            return Number(value);\n          })));\n        } else if (match = args[0].match(/^(h(sl|wb)a?|lab|color|cmyk)\\(/i)) {\n          throw new Error('Color expression not implemented yet');\n        }\n      }\n\n      return new Color();\n    }\n  }, {\n    key: \"parseObject\",\n    value: function parseObject(object) {\n      var color = new Color();\n\n      if (object === null || _typeof(object) !== 'object') {\n        return color;\n      }\n\n      if (Color.isColor(object)) {\n        return object.clone();\n      }\n\n      colorChannels.forEach(function (channel) {\n        if (!Number.isNaN(object[channel])) {\n          color[channel] = object[channel];\n        }\n      });\n      return color;\n    }\n  }, {\n    key: \"parseHex\",\n    value: function parseHex(hex) {\n      if (typeof hex !== 'string') {\n        throw new Error('Hex expression must be a string');\n      }\n\n      hex = hex.trim().replace(/^(0x|&h|#)/i, '');\n\n      if (hex.length === 3 || hex.length === 4) {\n        hex = hex.split('').map(function (c) {\n          return c.repeat(2);\n        }).join('');\n      }\n\n      if (!(hex.length === 6 || hex.length === 8)) {\n        throw new Error('Incorrect Hex expression length');\n      }\n\n      var chans = hex.split(/(..)/).filter(function (value) {\n        return value;\n      }).map(function (value) {\n        return Number.parseInt(value, 16);\n      });\n\n      if (typeof chans[3] === 'number') {\n        chans[3] /= 255;\n      }\n\n      return Color.fromRGB.apply(Color, _toConsumableArray(chans));\n    }\n  }, {\n    key: \"parseIndex\",\n    value: function parseIndex(value) {\n      var channels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n      var color = new Color();\n\n      for (var i = 0; i < 4; i++) {\n        color[colorChannels[i]] = value >> (channels - i) * 8 && 0xff;\n      }\n\n      return color;\n    }\n  }, {\n    key: \"fromRGB\",\n    value: function fromRGB(red, green, blue) {\n      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n      if ([red, green, blue, alpha].some(function (arg) {\n        return Number.isNaN(arg / 1);\n      })) {\n        throw new Error('Invalid arguments');\n      }\n\n      alpha *= 255;\n      var color = new Color();\n      [red, green, blue, alpha].forEach(function (value, index) {\n        color[colorChannels[index]] = value;\n      });\n      return color;\n    }\n  }, {\n    key: \"fromHSL\",\n    value: function fromHSL(hue, saturation, lightness) {\n      var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n      if ([hue, saturation, lightness, alpha].some(function (arg) {\n        return Number.isNaN(arg);\n      })) {\n        throw new Error('Invalid arguments');\n      }\n\n      while (hue < 0 && hue !== -Infinity) {\n        hue += 360;\n      }\n\n      hue = hue % 360;\n      saturation = Math.max(0, Math.min(1, saturation));\n      lightness = Math.max(0, Math.min(1, lightness));\n      alpha = Math.max(0, Math.min(1, alpha));\n      var c = (1 - Math.abs(2 * lightness - 1)) * saturation;\n      var x = c * (1 - Math.abs(hue / 60 % 2 - 1));\n      var m = lightness - c / 2;\n\n      var _ref4 = hue < 60 ? [c, x, 0] : hue < 120 ? [x, c, 0] : hue < 180 ? [0, c, x] : hue < 240 ? [0, x, c] : hue < 300 ? [x, 0, c] : [c, 0, x],\n          _ref5 = _slicedToArray(_ref4, 3),\n          r = _ref5[0],\n          g = _ref5[1],\n          b = _ref5[2];\n\n      return Color.fromRGB((r + m) * 255, (g + m) * 255, (b + m) * 255, alpha);\n    }\n  }, {\n    key: \"isColor\",\n    value: function isColor(arg) {\n      return arg instanceof Color;\n    }\n  }]);\n\n  return Color;\n}(); //\n\n\nvar cos30 = 0.86602540378;\nvar sin30 = 0.5;\nvar id = 0;\nvar script = {\n  name: 'BColorpickerHSLRepresentationTriangle',\n  props: {\n    value: {\n      type: Object,\n      required: true,\n      validator: function validator(value) {\n        return typeof value.hue === 'number' && typeof value.saturation === 'number' && typeof value.lightness === 'number';\n      }\n    },\n    size: {\n      type: Number,\n      \"default\": 200\n    },\n    thickness: {\n      type: Number,\n      \"default\": 20\n    }\n  },\n  data: function data() {\n    return {\n      id: id++,\n      hue: this.value.hue,\n      saturation: this.value.saturation,\n      lightness: this.value.lightness,\n      captureMouse: false,\n      captureType: 'hue',\n      clientOffset: {\n        cx: -1,\n        cy: -1,\n        width: 0,\n        height: 0\n      },\n      cos30: cos30,\n      sin30: sin30,\n      debounce: 0\n    };\n  },\n  computed: {\n    viewBox: function viewBox() {\n      var size = this.size;\n      return \"0 0 \".concat(size, \" \").concat(size);\n    },\n    internalRadius: function internalRadius() {\n      return this.size / 2 - this.thickness;\n    },\n    haloPath: function haloPath() {\n      var size = this.size,\n          thickness = this.thickness;\n      var radius = size / 2 - 2; // 2px padding\n\n      var thicknessRadius = radius - thickness;\n      var center = size / 2;\n      return \"M\".concat(center - radius, \" \").concat(center, \"a\").concat(radius, \"  \").concat(radius, \"  0 1 1 \").concat(2 * radius, \" 0\") + \"h\".concat(-thickness) + \"a\".concat(-thicknessRadius, \"  \").concat(thicknessRadius, \"  0 1 0 \").concat(-2 * thicknessRadius, \" 0\") + \"a\".concat(thicknessRadius, \"  \").concat(thicknessRadius, \"  0 1 0 \").concat(2 * thicknessRadius, \" 0\") + \"h\".concat(thickness) + \"a\".concat(radius, \"  \").concat(radius, \"  0 1 1 \").concat(-2 * radius, \" 0z\");\n    },\n    trianglePath: function trianglePath() {\n      var size = this.size,\n          thickness = this.thickness;\n      var radius = size - 4;\n      var thicknessRadius = (radius - 2 * thickness) / 2;\n      return \"M0 \".concat(-thicknessRadius) + \"L\".concat(cos30 * thicknessRadius, \" \").concat(sin30 * thicknessRadius) + \"H\".concat(-cos30 * thicknessRadius, \"z\");\n    }\n  },\n  watch: {\n    captureMouse: function captureMouse(newValue, oldValue) {\n      if (oldValue === false && newValue !== false) {\n        var rect = this.$el.getBoundingClientRect(); // Caching offset\n\n        this.clientOffset.cx = rect.x + rect.width / 2;\n        this.clientOffset.cy = rect.y + rect.height / 2;\n        this.clientOffset.width = rect.width;\n        this.clientOffset.height = rect.height;\n      }\n    },\n    value: {\n      deep: true,\n      handler: function handler(newColor) {\n        var _this = this;\n\n        var hue = newColor.hue,\n            saturation = newColor.saturation,\n            lightness = newColor.lightness;\n        window.clearTimeout(this.debounce);\n        this.debounce = window.setTimeout(function () {\n          if (lightness >= 0.03 && lightness <= 0.97 && saturation > 0) {\n            _this.hue = hue;\n          }\n\n          _this.saturation = saturation;\n          _this.lightness = lightness;\n        }, 200);\n      }\n    }\n  },\n  methods: {\n    increaseHue: function increaseHue() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.hue = (this.hue + value) % 360;\n    },\n    decreaseHue: function decreaseHue() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.hue = (360 + this.hue - value) % 360;\n    },\n    increaseSaturation: function increaseSaturation() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.01;\n      this.saturation = Math.min(1, Math.max(0, this.saturation + value));\n      this.lightness = Math.min(0.5 + (1 - this.saturation) * 0.5, Math.max(0.5 - (1 - this.saturation) * 0.5, this.lightness));\n    },\n    decreaseSaturation: function decreaseSaturation() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.01;\n      this.saturation = Math.min(1, Math.max(0, this.saturation - value));\n      this.lightness = Math.min(0.5 + (1 - this.saturation) * 0.5, Math.max(0.5 - (1 - this.saturation) * 0.5, this.lightness));\n    },\n    increaseLightness: function increaseLightness() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.01;\n      this.lightness = Math.min(0.5 + (1 - this.saturation) * 0.5, Math.max(0.5 - (1 - this.saturation) * 0.5, this.lightness + value));\n    },\n    decreaseLightness: function decreaseLightness() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.01;\n      this.lightness = Math.min(0.5 + (1 - this.saturation) * 0.5, Math.max(0.5 - (1 - this.saturation) * 0.5, this.lightness - value));\n    },\n    hueKeyPress: function hueKeyPress(event) {\n      var handled = false;\n\n      switch (event.key) {\n        case 'ArrowRight':\n        case 'ArrowUp':\n          this.increaseHue();\n          handled = true;\n          break;\n\n        case 'ArrowLeft':\n        case 'ArrowDown':\n          this.decreaseHue();\n          handled = true;\n          break;\n\n        case 'Home':\n          this.increaseHue(360 - this.hue);\n          handled = true;\n          break;\n\n        case 'End':\n          this.decreaseHue(this.hue);\n          handled = true;\n          break;\n\n        case 'PageUp':\n          this.increaseHue(60 - this.hue % 60);\n          handled = true;\n          break;\n\n        case 'PageDown':\n          this.decreaseHue(60 + this.hue % 60);\n          handled = true;\n          break;\n      }\n\n      if (handled) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.emitColor();\n      }\n    },\n    slKeyPress: function slKeyPress(event) {\n      var handled = false;\n\n      switch (event.key) {\n        case 'ArrowRight':\n          this.decreaseLightness();\n          handled = true;\n          break;\n\n        case 'ArrowUp':\n          this.increaseSaturation();\n          handled = true;\n          break;\n\n        case 'ArrowLeft':\n          this.increaseLightness();\n          handled = true;\n          break;\n\n        case 'ArrowDown':\n          this.decreaseSaturation();\n          handled = true;\n          break;\n\n        case 'Home':\n          this.increaseLightness(1 - this.lightness);\n          handled = true;\n          break;\n\n        case 'End':\n          this.decreaseLightness(this.lightness);\n          handled = true;\n          break;\n\n        case 'PageUp':\n          this.increaseSaturation(1 - this.saturation);\n          handled = true;\n          break;\n\n        case 'PageDown':\n          this.decreaseSaturation(this.saturation);\n          handled = true;\n          break;\n      }\n\n      if (handled) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.emitColor();\n      }\n    },\n    clickHue: function clickHue(event) {\n      this.startMouseCapture(event);\n      this.trackMouse(event);\n      this.stopMouseCapture(event);\n      this.$refs.hueCursor.focus();\n    },\n    clickSL: function clickSL(event) {\n      this.startMouseCapture(event);\n      this.trackMouse(event);\n      this.stopMouseCapture(event);\n      this.$refs.slCursor.focus();\n    },\n    trackMouse: function trackMouse(event) {\n      if (this.captureMouse === false) {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n      var mouseX = 0,\n          mouseY = 0;\n\n      if (typeof event.touches !== 'undefined' && event.touches.length) {\n        var _ref = [event.touches[0].clientX, event.touches[0].clientY];\n        mouseX = _ref[0];\n        mouseY = _ref[1];\n      } else {\n        var _ref2 = [event.clientX, event.clientY];\n        mouseX = _ref2[0];\n        mouseY = _ref2[1];\n      }\n\n      var angle = Math.atan2(mouseY - this.clientOffset.cy, mouseX - this.clientOffset.cx);\n\n      if (this.captureType === 'sl') {\n        var d = Math.sqrt(Math.pow(mouseX - this.clientOffset.cx, 2) + Math.pow(mouseY - this.clientOffset.cy, 2));\n        var ratio = this.size / this.clientOffset.width;\n        var dx = d * Math.cos(angle - this.hue / 180 * Math.PI) * ratio;\n        var dy = d * Math.sin(angle - this.hue / 180 * Math.PI) * ratio;\n        var radius = this.internalRadius;\n        var saturation = 1 - (Math.min(radius * sin30, Math.max(-radius, dy)) + radius) / (radius + radius * sin30);\n        var lightness = (Math.min(radius * cos30 * (1 - saturation), Math.max(-radius * cos30 * (1 - saturation), dx)) + radius * cos30) / (radius * 2 * cos30);\n        this.saturation = Math.round(saturation * 1000) / 1000;\n        this.lightness = 1 - Math.round(lightness * 1000) / 1000;\n      } else {\n        this.hue = Math.round(angle / Math.PI * 180 + 90) % 360;\n      }\n\n      this.emitColor();\n    },\n    startMouseCapture: function startMouseCapture(event) {\n      event.stopPropagation();\n      this.captureMouse = true;\n\n      if (event.target.closest('.colorpicker-triangle-slider-sl') !== null) {\n        this.captureType = 'sl';\n      } else {\n        this.captureType = 'hue';\n      }\n    },\n    stopMouseCapture: function stopMouseCapture(event) {\n      if (this.captureMouse !== false) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.$refs[this.captureType === 'sl' ? 'slCursor' : 'hueCursor'].focus();\n      }\n\n      this.captureMouse = false;\n    },\n    emitColor: function emitColor() {\n      var hue = this.hue,\n          saturation = this.saturation,\n          lightness = this.lightness;\n      this.$emit('input', Color.fromHSL(hue, saturation, lightness));\n      window.clearTimeout(this.debounce);\n    }\n  },\n  mounted: function mounted() {\n    window.addEventListener('mousemove', this.trackMouse);\n    window.addEventListener('touchmove', this.trackMouse, {\n      passive: false\n    });\n    window.addEventListener('mouseup', this.stopMouseCapture);\n    window.addEventListener('touchend', this.stopMouseCapture);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('mousemove', this.trackMouse);\n    window.removeEventListener('touchmove', this.trackMouse);\n    window.removeEventListener('mouseup', this.stopMouseCapture);\n    window.removeEventListener('touchend', this.stopMouseCapture);\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('svg', {\n    staticClass: \"b-colorpicker-triangle\",\n    attrs: {\n      \"viewBox\": _vm.viewBox\n    }\n  }, [_c('defs', [_c('linearGradient', {\n    attrs: {\n      \"id\": \"cp-triangle-gradient-ligthness-\" + _vm.id,\n      \"x1\": \"0\",\n      \"y1\": \"0\",\n      \"x2\": \"1\",\n      \"y2\": \"0\"\n    }\n  }, [_c('stop', {\n    attrs: {\n      \"offset\": \"0%\",\n      \"stop-color\": \"#fff\"\n    }\n  }), _c('stop', {\n    attrs: {\n      \"offset\": \"100%\",\n      \"stop-color\": \"#000\"\n    }\n  })], 1), _c('linearGradient', {\n    attrs: {\n      \"id\": \"cp-triangle-gradient-saturation-\" + _vm.id,\n      \"x1\": \"0\",\n      \"y1\": \"0\",\n      \"x2\": \"0\",\n      \"y2\": \"1\"\n    }\n  }, [_c('stop', {\n    attrs: {\n      \"offset\": \"0%\",\n      \"stop-color\": \"hsl(\" + _vm.hue + \"deg, 100%, 50%)\",\n      \"stop-opacity\": \"1\"\n    }\n  }), _c('stop', {\n    attrs: {\n      \"offset\": \"100%\",\n      \"stop-color\": \"hsl(\" + _vm.hue + \"deg, 100%, 50%)\",\n      \"stop-opacity\": \"0\"\n    }\n  })], 1), _c('clipPath', {\n    attrs: {\n      \"id\": \"cp-triangle-clip-\" + _vm.id\n    }\n  }, [_c('path', {\n    attrs: {\n      \"d\": _vm.haloPath\n    }\n  })])], 1), _c('g', {\n    staticClass: \"colorpicker-triangle-slider-hue\"\n  }, [_c('foreignObject', {\n    attrs: {\n      \"x\": 0,\n      \"y\": 0,\n      \"width\": _vm.size,\n      \"height\": _vm.size,\n      \"clip-path\": \"url(#cp-triangle-clip-\" + _vm.id + \")\"\n    }\n  }, [_c('div', {\n    staticClass: \"colorpicker-triangle-hue\",\n    on: {\n      \"click\": _vm.clickHue,\n      \"mousedown\": function mousedown($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      },\n      \"touchstart\": function touchstart($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      }\n    }\n  })]), _c('g', {\n    style: \"transform: rotate(\" + _vm.hue + \"deg)\"\n  }, [_c('foreignObject', {\n    attrs: {\n      \"x\": _vm.size / 2 - 4,\n      \"y\": 0,\n      \"width\": \"8\",\n      \"height\": _vm.thickness + 4\n    }\n  }, [_c('div', {\n    ref: \"hueCursor\",\n    staticClass: \"hue-range-thumb\",\n    style: \"background-color: hsl(\" + _vm.hue + \"deg, 100%, 50%)\",\n    attrs: {\n      \"role\": \"slider\",\n      \"tabindex\": \"0\",\n      \"aria-label\": \"Hue\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuenow\": _vm.hue,\n      \"aria-valuemax\": \"360\"\n    },\n    on: {\n      \"click\": _vm.clickHue,\n      \"keydown\": _vm.hueKeyPress,\n      \"mousedown\": function mousedown($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      },\n      \"touchstart\": function touchstart($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      }\n    }\n  })])], 1)], 1), _c('g', {\n    staticClass: \"colorpicker-triangle-slider-sl\",\n    style: \"transform: rotate(\" + _vm.hue + \"deg) translate(50%, 50%)\",\n    attrs: {\n      \"role\": \"graphics-datagroup\",\n      \"aria-datascales\": \"lightness, saturation\"\n    }\n  }, [_c('path', {\n    attrs: {\n      \"d\": _vm.trianglePath,\n      \"fill\": \"url(#cp-triangle-gradient-ligthness-\" + _vm.id + \")\"\n    }\n  }), _c('path', {\n    staticStyle: {\n      \"mix-blend-mode\": \"overlay\"\n    },\n    attrs: {\n      \"d\": _vm.trianglePath,\n      \"fill\": \"url(#cp-triangle-gradient-saturation-\" + _vm.id + \")\"\n    },\n    on: {\n      \"click\": _vm.clickSL,\n      \"mousedown\": function mousedown($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      },\n      \"touchstart\": function touchstart($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      }\n    }\n  }), _c('foreignObject', {\n    attrs: {\n      \"x\": (_vm.internalRadius - 3) * _vm.cos30 * (-_vm.lightness + 0.5) * 2 - 6,\n      \"y\": -_vm.internalRadius + (1 - _vm.saturation) * (_vm.internalRadius - 3) * 1.5 - 3,\n      \"width\": \"12\",\n      \"height\": \"12\"\n    }\n  }, [_c('div', {\n    ref: \"slCursor\",\n    staticClass: \"sl-range-thumb\",\n    style: {\n      backgroundColor: \"hsl(\" + _vm.hue + \"deg, \" + _vm.saturation * 100 + \"%, \" + _vm.lightness * 100 + \"%)\"\n    },\n    attrs: {\n      \"tabindex\": \"0\",\n      \"aria-datavalues\": _vm.saturation * 100 + \"%, \" + _vm.lightness * 100 + \"%\"\n    },\n    on: {\n      \"click\": _vm.clickSL,\n      \"keydown\": _vm.slKeyPress,\n      \"mousedown\": function mousedown($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      },\n      \"touchstart\": function touchstart($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      }\n    }\n  })])], 1)]);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar ColorpickerHSLRepresentationTriangle = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\", \"px\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\", \"px\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\", \"px\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar precision = function precision(strs) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  var tmp = [];\n  strs.forEach(function (str, i) {\n    tmp.push(str);\n\n    if (values[i]) {\n      tmp.push(Number.isNaN(values[i] / 1) ? values[i] : Math.round(values * 10) / 10);\n    }\n  });\n  return tmp.join('');\n};\n\nvar script$1 = {\n  name: 'BColorpickerHSLRepresentationSquare',\n  props: {\n    value: {\n      type: Object,\n      required: true,\n      validator: function validator(value) {\n        return typeof value.hue === 'number' && typeof value.saturation === 'number' && typeof value.lightness === 'number';\n      }\n    },\n    size: {\n      type: Number,\n      \"default\": 200\n    },\n    thickness: {\n      type: Number,\n      \"default\": 20\n    }\n  },\n  data: function data() {\n    return {\n      hue: this.value.hue,\n      saturation: this.value.saturation,\n      lightness: this.value.lightness,\n      captureMouse: false,\n      captureType: 'hue',\n      clientOffset: {\n        cx: -1,\n        cy: -1,\n        width: 0,\n        height: 0\n      },\n      debounce: 0\n    };\n  },\n  computed: {\n    hueThumbStyle: function hueThumbStyle() {\n      var hue = this.hue,\n          size = this.size,\n          thickness = this.thickness;\n      var side = size - thickness;\n      var offset = size / 2;\n      var angle = (hue + 720 + 90) % 360 / 180 * Math.PI;\n      var ciq = 1 / Math.cos(Math.PI / 4);\n      var _x$y = {\n        x: -Math.min(1, Math.max(-1, ciq * Math.cos(angle))) / 2 * side + offset,\n        y: -Math.min(1, Math.max(-1, ciq * Math.sin(angle))) / 2 * side + offset\n      },\n          x = _x$y.x,\n          y = _x$y.y;\n      return {\n        background: \"hsl(\".concat(hue, \"deg, 100%, 50%)\"),\n        left: precision(_templateObject(), x),\n        top: precision(_templateObject2(), y),\n        width: precision(_templateObject3(), thickness - 2)\n      };\n    },\n    slThumbStyle: function slThumbStyle() {\n      var hue = this.hue,\n          saturation = this.saturation,\n          lightness = this.lightness;\n      saturation = Math.max(0, Math.min(1, saturation));\n      lightness = Math.max(0, Math.min(1, lightness));\n      return {\n        background: \"hsl(\".concat(hue, \"deg, \").concat(saturation * 100, \"%, \").concat(lightness * 100, \"%)\"),\n        left: \"\".concat(saturation * 100, \"%\"),\n        top: \"\".concat((1 - lightness) * 100, \"%\")\n      };\n    },\n    SLBackground: function SLBackground() {\n      var hue = this.hue;\n      return \"linear-gradient(90deg, hsl(\".concat(hue, \"deg, 0%, 50%), hsl(\").concat(hue, \"deg, 100%, 50%))\");\n    }\n  },\n  watch: {\n    captureMouse: function captureMouse(newValue, oldValue) {\n      if (oldValue === false && newValue !== false) {\n        var rect = this.$el.getBoundingClientRect(); // Caching offset\n\n        this.clientOffset.cx = rect.x + rect.width / 2;\n        this.clientOffset.cy = rect.y + rect.height / 2;\n        this.clientOffset.width = rect.width;\n        this.clientOffset.height = rect.height;\n      }\n    },\n    value: {\n      deep: true,\n      handler: function handler(newColor) {\n        var _this = this;\n\n        var hue = newColor.hue,\n            saturation = newColor.saturation,\n            lightness = newColor.lightness;\n        window.clearTimeout(this.debounce);\n        this.debounce = window.setTimeout(function () {\n          _this.hue = hue;\n          _this.saturation = saturation;\n          _this.lightness = lightness;\n        }, 200);\n      }\n    }\n  },\n  methods: {\n    increaseHue: function increaseHue() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.hue = (this.hue + value) % 360;\n    },\n    decreaseHue: function decreaseHue() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.hue = (360 + this.hue - value) % 360;\n    },\n    increaseSaturation: function increaseSaturation() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.01;\n      this.saturation = Math.min(1, Math.max(0, this.saturation + value));\n      this.lightness = Math.min(0.5 + (1 - this.saturation) * 0.5, Math.max(0.5 - (1 - this.saturation) * 0.5, this.lightness));\n    },\n    decreaseSaturation: function decreaseSaturation() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.01;\n      this.saturation = Math.min(1, Math.max(0, this.saturation - value));\n      this.lightness = Math.min(0.5 + (1 - this.saturation) * 0.5, Math.max(0.5 - (1 - this.saturation) * 0.5, this.lightness));\n    },\n    increaseLightness: function increaseLightness() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.01;\n      this.lightness = Math.min(0.5 + (1 - this.saturation) * 0.5, Math.max(0.5 - (1 - this.saturation) * 0.5, this.lightness + value));\n    },\n    decreaseLightness: function decreaseLightness() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.01;\n      this.lightness = Math.min(0.5 + (1 - this.saturation) * 0.5, Math.max(0.5 - (1 - this.saturation) * 0.5, this.lightness - value));\n    },\n    hueKeyPress: function hueKeyPress(event) {\n      var handled = false;\n\n      switch (event.key) {\n        case 'ArrowRight':\n        case 'ArrowUp':\n          this.increaseHue();\n          handled = true;\n          break;\n\n        case 'ArrowLeft':\n        case 'ArrowDown':\n          this.decreaseHue();\n          handled = true;\n          break;\n\n        case 'Home':\n          this.increaseHue(360 - this.hue);\n          handled = true;\n          break;\n\n        case 'End':\n          this.decreaseHue(this.hue);\n          handled = true;\n          break;\n\n        case 'PageUp':\n          this.increaseHue(60 - this.hue % 60);\n          handled = true;\n          break;\n\n        case 'PageDown':\n          this.decreaseHue(60 + this.hue % 60);\n          handled = true;\n          break;\n      }\n\n      if (handled) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.emitColor();\n      }\n    },\n    slKeyPress: function slKeyPress(event) {\n      var handled = false;\n\n      switch (event.key) {\n        case 'ArrowRight':\n          this.increaseSaturation();\n          handled = true;\n          break;\n\n        case 'ArrowUp':\n          this.increaseLightness();\n          handled = true;\n          break;\n\n        case 'ArrowLeft':\n          this.decreaseSaturation();\n          handled = true;\n          break;\n\n        case 'ArrowDown':\n          this.decreaseLightness();\n          handled = true;\n          break;\n\n        case 'Home':\n          this.increaseLightness(1 - this.lightness);\n          handled = true;\n          break;\n\n        case 'End':\n          this.decreaseLightness(this.lightness);\n          handled = true;\n          break;\n\n        case 'PageUp':\n          this.increaseSaturation(1 - this.saturation);\n          handled = true;\n          break;\n\n        case 'PageDown':\n          this.decreaseSaturation(this.saturation);\n          handled = true;\n          break;\n      }\n\n      if (handled) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.emitColor();\n      }\n    },\n    startMouseCapture: function startMouseCapture(event) {\n      event.stopPropagation();\n      this.captureMouse = true;\n\n      if (event.target.closest('.colorpicker-square-slider-sl') !== null) {\n        this.captureType = 'sl';\n      } else {\n        this.captureType = 'hue';\n      }\n    },\n    stopMouseCapture: function stopMouseCapture(event) {\n      if (this.captureMouse !== false) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.$refs[this.captureType === 'sl' ? 'slCursor' : 'hueCursor'].focus();\n      }\n\n      this.captureMouse = false;\n    },\n    clickHue: function clickHue(event) {\n      this.startMouseCapture(event);\n      this.trackMouse(event);\n      this.stopMouseCapture(event);\n      this.$refs.hueCursor.focus();\n    },\n    clickSL: function clickSL(event) {\n      this.startMouseCapture(event);\n      this.trackMouse(event);\n      this.stopMouseCapture(event);\n      this.$refs.slCursor.focus();\n    },\n    trackMouse: function trackMouse(event) {\n      if (this.captureMouse === false) {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n      var mouseX = 0,\n          mouseY = 0;\n\n      if (typeof event.touches !== 'undefined' && event.touches.length) {\n        var _ref = [event.touches[0].clientX, event.touches[0].clientY];\n        mouseX = _ref[0];\n        mouseY = _ref[1];\n      } else {\n        var _ref2 = [event.clientX, event.clientY];\n        mouseX = _ref2[0];\n        mouseY = _ref2[1];\n      }\n\n      var angle = Math.atan2(mouseY - this.clientOffset.cy, mouseX - this.clientOffset.cx);\n\n      if (this.captureType === 'sl') {\n        var saturation = (mouseX - this.clientOffset.cx) / (this.clientOffset.width - this.thickness * 2) + 0.5;\n        var lightness = (mouseY - this.clientOffset.cy) / (this.clientOffset.height - this.thickness * 2) + 0.5;\n        this.saturation = Math.round(Math.min(1, Math.max(0, saturation)) * 1000) / 1000;\n        this.lightness = 1 - Math.round(Math.min(1, Math.max(0, lightness)) * 1000) / 1000;\n      } else {\n        this.hue = Math.round(angle / Math.PI * 180 + 90) % 360;\n      }\n\n      this.emitColor();\n    },\n    emitColor: function emitColor() {\n      var hue = this.hue,\n          saturation = this.saturation,\n          lightness = this.lightness;\n      this.$emit('input', Color.fromHSL(hue, saturation, lightness));\n      window.clearTimeout(this.debounce);\n    }\n  },\n  mounted: function mounted() {\n    window.addEventListener('mousemove', this.trackMouse);\n    window.addEventListener('touchmove', this.trackMouse, {\n      passive: false\n    });\n    window.addEventListener('mouseup', this.stopMouseCapture);\n    window.addEventListener('touchend', this.stopMouseCapture);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('mousemove', this.trackMouse);\n    window.removeEventListener('touchmove', this.trackMouse);\n    window.removeEventListener('mouseup', this.stopMouseCapture);\n    window.removeEventListener('touchend', this.stopMouseCapture);\n  }\n};\n/* script */\n\nvar __vue_script__$1 = script$1;\n/* template */\n\nvar __vue_render__$1 = function __vue_render__$1() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"b-colorpicker-square\",\n    style: {\n      width: _vm.size + \"px\"\n    }\n  }, [_c('div', {\n    staticClass: \"colorpicker-square-slider-hue\",\n    on: {\n      \"click\": _vm.clickHue,\n      \"mousedown\": function mousedown($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      },\n      \"touchstart\": function touchstart($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      }\n    }\n  }, [_c('div', {\n    ref: \"hueCursor\",\n    staticClass: \"hue-range-thumb\",\n    style: _vm.hueThumbStyle,\n    attrs: {\n      \"role\": \"slider\",\n      \"tabindex\": \"0\",\n      \"aria-label\": \"Hue\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"359\"\n    }\n  })]), _c('div', {\n    staticClass: \"colorpicker-square-slider-sl\",\n    style: {\n      background: _vm.SLBackground,\n      margin: _vm.thickness + \"px\"\n    },\n    attrs: {\n      \"aria-datascales\": \"lightness, saturation\"\n    },\n    on: {\n      \"click\": _vm.clickSL,\n      \"mousedown\": function mousedown($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      },\n      \"touchstart\": function touchstart($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      }\n    }\n  }, [_c('div', {\n    ref: \"slCursor\",\n    staticClass: \"sl-range-thumb\",\n    style: _vm.slThumbStyle,\n    attrs: {\n      \"role\": \"slider\",\n      \"tabindex\": \"0\",\n      \"aria-datavalues\": _vm.saturation * 100 + \"%, \" + _vm.lightness * 100 + \"%\"\n    },\n    on: {\n      \"click\": _vm.clickSL,\n      \"keydown\": _vm.slKeyPress,\n      \"mousedown\": function mousedown($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      },\n      \"touchstart\": function touchstart($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      }\n    }\n  })])]);\n};\n\nvar __vue_staticRenderFns__$1 = [];\n/* style */\n\nvar __vue_inject_styles__$1 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$1 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$1 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$1 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar ColorpickerHSLRepresentationSquare = __vue_normalize__({\n  render: __vue_render__$1,\n  staticRenderFns: __vue_staticRenderFns__$1\n}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, undefined, undefined);\n\nvar script$2 = {\n  name: 'BColorpickerAlphaSlider',\n  components: _defineProperty({}, Tooltip.name, Tooltip),\n  props: {\n    value: {\n      type: Number,\n      validator: function validator(value) {\n        return value >= 0 && value < 256;\n      }\n    },\n    color: [String, Object]\n  },\n  data: function data() {\n    var color = Color.parse(this.color);\n    color.alpha = 0;\n    return {\n      startColor: color.toString('hex'),\n      endColor: color.toString('hexa'),\n      percent: Math.round((1 - this.value / 255) * 100),\n      captureMouse: false,\n      clientOffset: {\n        cx: -1,\n        cy: -1,\n        width: 0,\n        height: 0\n      }\n    };\n  },\n  computed: {\n    style: function style() {\n      return {\n        backgroundImage: \"linear-gradient(90deg, \".concat(this.startColor, \" 0%, \").concat(this.endColor, \" 100%),\\n                    linear-gradient(45deg, #c7c7c7 25%, transparent 25%, transparent 75%, #c7c7c7 75%, #c7c7c7),\\n                    linear-gradient(45deg, #c7c7c7 25%, transparent 25%, transparent 75%, #c7c7c7 75%, #c7c7c7)\"),\n        backgroundSize: '100% 100%, 1em 1em, 1em 1em',\n        backgroundPosition: '0 0, .5em .5em, 0 0'\n      };\n    }\n  },\n  watch: {\n    value: function value(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.percent = Math.round((1 - newValue / 255) * 100);\n      }\n    },\n    color: function color(newColor) {\n      var color = Color.parse(newColor);\n      color.alpha = 0;\n      this.startColor = color.toString('hex');\n      this.endColor = color.toString('hexa');\n    },\n    captureMouse: function captureMouse(newValue, oldValue) {\n      if (oldValue === false && newValue !== false) {\n        var rect = this.$el.getBoundingClientRect(); // Caching offset\n\n        this.clientOffset.cx = rect.x + rect.width / 2;\n        this.clientOffset.cy = rect.y + rect.height / 2;\n        this.clientOffset.width = rect.width;\n        this.clientOffset.height = rect.height;\n      }\n    }\n  },\n  methods: {\n    increaseAlpha: function increaseAlpha() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.percent = Math.max(0, Math.min(100, this.percent + value));\n    },\n    decreaseAlpha: function decreaseAlpha() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.01;\n      this.increaseAlpha(-value);\n    },\n    alphaKeyPress: function alphaKeyPress(event) {\n      var handled = false;\n\n      switch (event.key) {\n        case 'ArrowRight':\n        case 'ArrowUp':\n          this.increaseAlpha();\n          handled = true;\n          break;\n\n        case 'ArrowLeft':\n        case 'ArrowDown':\n          this.decreaseAlpha();\n          handled = true;\n          break;\n\n        case 'Home':\n          this.decreaseAlpha(this.percent);\n          handled = true;\n          break;\n\n        case 'End':\n          this.increaseAlpha(100 - this.percent);\n          handled = true;\n          break;\n\n        case 'PageUp':\n          this.increaseAlpha(10 - this.percent % 10);\n          handled = true;\n          break;\n\n        case 'PageDown':\n          this.decreaseAlpha(this.percent % 10);\n          handled = true;\n          break;\n      }\n\n      if (handled) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.emitAlpha();\n      }\n    },\n    clickAlpha: function clickAlpha(event) {\n      this.startMouseCapture(event);\n      this.trackMouse(event);\n      this.stopMouseCapture(event);\n      this.$refs.alphaCursor.focus();\n    },\n    startMouseCapture: function startMouseCapture(event) {\n      event.stopPropagation();\n      this.captureMouse = true;\n    },\n    trackMouse: function trackMouse(event) {\n      if (this.captureMouse === false) {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n      var _ref = [0, 0],\n          mouseX = _ref[0];\n\n      if (typeof event.touches !== 'undefined' && event.touches.length) {\n        var _ref2 = [event.touches[0].clientX];\n        mouseX = _ref2[0];\n      } else {\n        var _ref3 = [event.clientX];\n        mouseX = _ref3[0];\n      }\n\n      var ratio = 0.5 + (this.clientOffset.cx - mouseX) / this.clientOffset.width;\n      this.percent = Math.round(100 - Math.max(0, Math.min(1, ratio)) * 100);\n      this.emitAlpha();\n    },\n    stopMouseCapture: function stopMouseCapture(event) {\n      if (this.captureMouse !== false) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.$refs.alphaCursor.focus();\n      }\n\n      this.captureMouse = false;\n    },\n    emitAlpha: function emitAlpha() {\n      this.$emit('input', (1 - this.percent / 100) * 255);\n    }\n  },\n  mounted: function mounted() {\n    window.addEventListener('mousemove', this.trackMouse);\n    window.addEventListener('touchmove', this.trackMouse, {\n      passive: false\n    });\n    window.addEventListener('mouseup', this.stopMouseCapture);\n    window.addEventListener('touchend', this.stopMouseCapture);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('mousemove', this.trackMouse);\n    window.removeEventListener('touchmove', this.trackMouse);\n    window.removeEventListener('mouseup', this.stopMouseCapture);\n    window.removeEventListener('touchend', this.stopMouseCapture);\n  }\n};\n/* script */\n\nvar __vue_script__$2 = script$2;\n/* template */\n\nvar __vue_render__$2 = function __vue_render__$2() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"b-colorpicker-alpha-slider\",\n    style: _vm.style,\n    on: {\n      \"click\": _vm.clickAlpha,\n      \"keydown\": _vm.alphaKeyPress,\n      \"mousedown\": _vm.startMouseCapture,\n      \"touchstart\": function touchstart($event) {\n        $event.preventDefault();\n        return _vm.startMouseCapture($event);\n      }\n    }\n  }, [_c('div', {\n    ref: \"alphaCursor\",\n    staticClass: \"alpha-range-thumb\",\n    style: {\n      left: _vm.percent + \"%\"\n    },\n    attrs: {\n      \"role\": \"slider\",\n      \"tabindex\": \"0\",\n      \"aria-label\": \"Tranparency\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuenow\": _vm.percent,\n      \"aria-valuemax\": \"100\"\n    }\n  }, [_c('b-tooltip', {\n    attrs: {\n      \"label\": _vm.percent + \"%\",\n      \"always\": _vm.captureMouse\n    }\n  })], 1)]);\n};\n\nvar __vue_staticRenderFns__$2 = [];\n/* style */\n\nvar __vue_inject_styles__$2 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$2 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$2 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$2 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar ColorpickerAlphaSlider = __vue_normalize__({\n  render: __vue_render__$2,\n  staticRenderFns: __vue_staticRenderFns__$2\n}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, undefined, undefined);\n\nvar _components;\n\nvar defaultColorFormatter = function defaultColorFormatter(color, vm) {\n  if (color.alpha < 1) {\n    return color.toString('hexa');\n  } else {\n    return color.toString('hex');\n  }\n};\n\nvar defaultColorParser = function defaultColorParser(color, vm) {\n  return Color.parse(color);\n};\n\nvar script$3 = {\n  name: 'BColorpicker',\n  components: (_components = {}, _defineProperty(_components, ColorpickerHSLRepresentationTriangle.name, ColorpickerHSLRepresentationTriangle), _defineProperty(_components, ColorpickerHSLRepresentationSquare.name, ColorpickerHSLRepresentationSquare), _defineProperty(_components, ColorpickerAlphaSlider.name, ColorpickerAlphaSlider), _defineProperty(_components, Input.name, Input), _defineProperty(_components, Field.name, Field), _defineProperty(_components, Select.name, Select), _defineProperty(_components, Icon.name, Icon), _defineProperty(_components, Dropdown.name, Dropdown), _defineProperty(_components, DropdownItem.name, DropdownItem), _components),\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  provide: function provide() {\n    return {\n      $colorpicker: this\n    };\n  },\n  props: {\n    value: {\n      type: [String, Object],\n      validator: function validator(value) {\n        return typeof value === 'string' || _typeof(value) === 'object' && typeof value.red === 'number' && typeof value.green === 'number' && typeof value.blue === 'number';\n      }\n    },\n    representation: {\n      type: String,\n      \"default\": 'triangle',\n      value: function value(_value) {\n        return ['triangle', 'square'].some(function (r) {\n          return r === _value;\n        });\n      }\n    },\n    inline: Boolean,\n    disabled: Boolean,\n    horizontalColorPicker: {\n      type: Boolean,\n      \"default\": false\n    },\n    colorFormatter: {\n      type: Function,\n      \"default\": function _default(color, vm) {\n        if (typeof config.defaultColorFormatter === 'function') {\n          return config.defaultColorFormatter(color);\n        } else {\n          return defaultColorFormatter(color);\n        }\n      }\n    },\n    colorParser: {\n      type: Function,\n      \"default\": function _default(color, vm) {\n        if (typeof config.defaultColorParser === 'function') {\n          return config.defaultColorParser(color);\n        } else {\n          return defaultColorParser(color);\n        }\n      }\n    },\n    alpha: {\n      type: Boolean,\n      \"default\": false\n    },\n    expanded: Boolean,\n    position: String,\n    mobileModal: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultDatepickerMobileModal;\n      }\n    },\n    focusable: {\n      type: Boolean,\n      \"default\": true\n    },\n    trapFocus: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultTrapFocus;\n      }\n    },\n    appendToBody: Boolean\n  },\n  data: function data() {\n    var color = this.colorParser(this.value);\n    return {\n      colorSelected: color\n    };\n  },\n  computed: {\n    background: function background() {\n      if (this.alpha) {\n        return \"linear-gradient(\\n                    45deg,\\n                    \".concat(this.colorSelected.toString('hex'), \" 50%,\\n                    \").concat(this.colorSelected.toString('hexa'), \" 50%\\n                )\");\n      } else {\n        var hex = this.colorSelected.toString('hex');\n        return \"linear-gradient(\\n                    45deg,\\n                    \".concat(hex, \" 50%,\\n                    \").concat(hex, \" 50%\\n                )\");\n      }\n    },\n    triggerStyle: function triggerStyle() {\n      var _this$colorSelected = this.colorSelected,\n          red = _this$colorSelected.red,\n          green = _this$colorSelected.green,\n          blue = _this$colorSelected.blue;\n      var light = red * 0.299 + green * 0.587 + blue * 0.114 > 186;\n      return {\n        backgroundColor: '#ffffff',\n        backgroundImage: \"\\n                    \".concat(this.background, \",\\n                    linear-gradient(45deg, #c7c7c7 25%, transparent 25%, transparent 75%, #c7c7c7 75%, #c7c7c7),\\n                    linear-gradient(45deg, #c7c7c7 25%, transparent 25%, transparent 75%, #c7c7c7 75%, #c7c7c7)\\n                \"),\n        backgroundSize: '100% 100%, 16px 16px, 16px 16px',\n        backgroundPosition: '0 0, 8px 8px, 0 0',\n        color: light ? '#000000' : '#FFFFFF',\n        textShadow: \"0 0 2px \".concat(light ? '#FFFFFFAA' : '#000000AA')\n      };\n    },\n    isMobile: function isMobile$1() {\n      return this.mobileNative && isMobile.any();\n    },\n    ariaRole: function ariaRole() {\n      if (!this.inline) {\n        return 'dialog';\n      }\n    }\n  },\n  watch: {\n    value: function value(_value2) {\n      this.colorSelected = new Color(_value2);\n    }\n  },\n  methods: {\n    updateColor: function updateColor(value) {\n      value.alpha = this.colorSelected.alpha;\n      this.colorSelected = value;\n      this.$emit('input', value);\n    },\n    updateAlpha: function updateAlpha(alpha) {\n      this.colorSelected.alpha = alpha;\n      this.$emit('input', this.colorSelected);\n    },\n\n    /*\r\n     * Format color into string\r\n     */\n    formatValue: function formatValue(value) {\n      return value ? this.colorFormatter(value, this) : null;\n    },\n\n    /*\r\n     * Toggle datepicker\r\n     */\n    togglePicker: function togglePicker(active) {\n      if (this.$refs.dropdown) {\n        var isActive = typeof active === 'boolean' ? active : !this.$refs.dropdown.isActive;\n\n        if (isActive) {\n          this.$refs.dropdown.isActive = isActive;\n        } else if (this.closeOnClick) {\n          this.$refs.dropdown.isActive = isActive;\n        }\n      }\n    },\n\n    /*\r\n     * Call default onFocus method and show datepicker\r\n     */\n    handleOnFocus: function handleOnFocus(event) {\n      this.onFocus(event);\n\n      if (this.openOnFocus) {\n        this.togglePicker(true);\n      }\n    },\n\n    /*\r\n     * Toggle dropdown\r\n     */\n    toggle: function toggle() {\n      if (this.mobileNative && this.isMobile) {\n        var input = this.$refs.input.$refs.input;\n        input.focus();\n        input.click();\n        return;\n      }\n\n      this.$refs.dropdown.toggle();\n    },\n\n    /*\r\n     * Avoid dropdown toggle when is already visible\r\n     */\n    onInputClick: function onInputClick(event) {\n      if (this.$refs.dropdown.isActive) {\n        event.stopPropagation();\n      }\n    },\n\n    /**\r\n     * Keypress event that is bound to the document.\r\n     */\n    keyPress: function keyPress(_ref) {\n      var key = _ref.key;\n\n      if (this.$refs.dropdown && this.$refs.dropdown.isActive && (key === 'Escape' || key === 'Esc')) {\n        this.togglePicker(false);\n      }\n    },\n\n    /**\r\n     * Emit 'blur' event on dropdown is not active (closed)\r\n     */\n    onActiveChange: function onActiveChange(value) {\n      if (!value) {\n        this.onBlur();\n      }\n      /*\r\n       * Emit 'active-change' when on dropdown active state change\r\n       */\n\n\n      this.$emit('active-change', value);\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$3 = script$3;\n/* template */\n\nvar __vue_render__$3 = function __vue_render__$3() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"colorpicker control\",\n    \"class\": [_vm.size, {\n      'is-expanded': _vm.expanded\n    }]\n  }, [!_vm.isMobile || _vm.inline ? _c('b-dropdown', {\n    ref: \"dropdown\",\n    attrs: {\n      \"position\": _vm.position,\n      \"expanded\": _vm.expanded,\n      \"disabled\": _vm.disabled,\n      \"inline\": _vm.inline,\n      \"mobile-modal\": _vm.mobileModal,\n      \"trap-focus\": _vm.trapFocus,\n      \"aria-role\": _vm.ariaRole,\n      \"append-to-body\": _vm.appendToBody,\n      \"append-to-body-copy-parent\": \"\"\n    },\n    on: {\n      \"active-change\": _vm.onActiveChange\n    },\n    scopedSlots: _vm._u([!_vm.inline ? {\n      key: \"trigger\",\n      fn: function fn() {\n        return [_vm._t(\"trigger\", [_c('b-button', {\n          style: _vm.triggerStyle,\n          attrs: {\n            \"expanded\": _vm.expanded,\n            \"disabled\": _vm.disabled\n          }\n        }, [_c('span', {\n          staticClass: \"color-name\"\n        }, [_vm._v(_vm._s(_vm.colorFormatter(_vm.colorSelected)))])])])];\n      },\n      proxy: true\n    } : null], null, true)\n  }, [_c('b-dropdown-item', {\n    \"class\": {\n      'dropdown-horizonal-colorpicker': _vm.horizontalColorPicker\n    },\n    attrs: {\n      \"disabled\": _vm.disabled,\n      \"focusable\": _vm.focusable,\n      \"custom\": \"\"\n    }\n  }, [_c('div', [_c('header', {\n    staticClass: \"colorpicker-header\"\n  }, [_vm.$slots.header !== undefined && _vm.$slots.header.length ? [_vm._t(\"header\")] : _vm._e()], 2), _c('div', {\n    staticClass: \"colorpicker-content\"\n  }, [_vm.representation === 'square' ? _c('b-colorpicker-h-s-l-representation-square', {\n    attrs: {\n      \"value\": _vm.colorSelected\n    },\n    on: {\n      \"input\": _vm.updateColor\n    }\n  }) : _c('b-colorpicker-h-s-l-representation-triangle', {\n    attrs: {\n      \"value\": _vm.colorSelected\n    },\n    on: {\n      \"input\": _vm.updateColor\n    }\n  })], 1)]), _c('footer', {\n    staticClass: \"colorpicker-footer\"\n  }, [_vm.alpha ? _c('b-colorpicker-alpha-slider', {\n    attrs: {\n      \"value\": _vm.colorSelected.alpha,\n      \"color\": _vm.colorSelected\n    },\n    on: {\n      \"input\": _vm.updateAlpha\n    }\n  }) : _vm._e(), _vm._t(\"footer\", [_c('b-field', {\n    staticClass: \"colorpicker-fields\",\n    attrs: {\n      \"grouped\": \"\"\n    }\n  }, [_c('b-field', {\n    attrs: {\n      \"horizontal\": \"\",\n      \"label\": \"R\"\n    }\n  }, [_c('b-input', {\n    attrs: {\n      \"type\": \"number\",\n      \"size\": \"is-small\",\n      \"aria-label\": \"Red\"\n    },\n    model: {\n      value: _vm.colorSelected.red,\n      callback: function callback($$v) {\n        _vm.$set(_vm.colorSelected, \"red\", _vm._n($$v));\n      },\n      expression: \"colorSelected.red\"\n    }\n  })], 1), _c('b-field', {\n    attrs: {\n      \"horizontal\": \"\",\n      \"label\": \"G\"\n    }\n  }, [_c('b-input', {\n    attrs: {\n      \"type\": \"number\",\n      \"size\": \"is-small\",\n      \"aria-label\": \"Green\"\n    },\n    model: {\n      value: _vm.colorSelected.green,\n      callback: function callback($$v) {\n        _vm.$set(_vm.colorSelected, \"green\", _vm._n($$v));\n      },\n      expression: \"colorSelected.green\"\n    }\n  })], 1), _c('b-field', {\n    attrs: {\n      \"horizontal\": \"\",\n      \"label\": \"B\"\n    }\n  }, [_c('b-input', {\n    attrs: {\n      \"type\": \"number\",\n      \"size\": \"is-small\",\n      \"aria-label\": \"Blue\"\n    },\n    model: {\n      value: _vm.colorSelected.blue,\n      callback: function callback($$v) {\n        _vm.$set(_vm.colorSelected, \"blue\", _vm._n($$v));\n      },\n      expression: \"colorSelected.blue\"\n    }\n  })], 1)], 1)], {\n    \"color\": _vm.colorSelected\n  })], 2)])], 1) : _vm._e()], 1);\n};\n\nvar __vue_staticRenderFns__$3 = [];\n/* style */\n\nvar __vue_inject_styles__$3 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$3 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$3 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$3 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Colorpicker = __vue_normalize__({\n  render: __vue_render__$3,\n  staticRenderFns: __vue_staticRenderFns__$3\n}, __vue_inject_styles__$3, __vue_script__$3, __vue_scope_id__$3, __vue_is_functional_template__$3, __vue_module_identifier__$3, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Colorpicker);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Colorpicker as BColorpicker };","map":null,"metadata":{},"sourceType":"module"}