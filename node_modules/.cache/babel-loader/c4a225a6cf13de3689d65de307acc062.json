{"ast":null,"code":"import './chunk-1fafdf15.js';\nimport './helpers.js';\nimport './chunk-652f2dad.js';\nimport { F as FormElementMixin } from './chunk-516e4877.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js';\nimport { F as File } from './chunk-b9bdb0e4.js'; //\n\nvar script = {\n  name: 'BUpload',\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: {\n      type: [Object, Function, File, Array]\n    },\n    multiple: Boolean,\n    disabled: Boolean,\n    accept: String,\n    dragDrop: Boolean,\n    type: {\n      type: String,\n      \"default\": 'is-primary'\n    },\n    \"native\": {\n      type: Boolean,\n      \"default\": false\n    },\n    expanded: {\n      type: Boolean,\n      \"default\": false\n    },\n    rounded: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      newValue: this.value,\n      dragDropFocus: false,\n      _elementRef: 'input'\n    };\n  },\n  watch: {\n    /**\r\n     *   When v-model is changed:\r\n     *   1. Set internal value.\r\n     *   2. Reset interna input file value\r\n     *   3. If it's invalid, validate again.\r\n     */\n    value: function value(_value) {\n      this.newValue = _value;\n\n      if (!_value || Array.isArray(_value) && _value.length === 0) {\n        this.$refs.input.value = null;\n      }\n\n      !this.isValid && !this.dragDrop && this.checkHtml5Validity();\n    }\n  },\n  methods: {\n    /**\r\n    * Listen change event on input type 'file',\r\n    * emit 'input' event and validate\r\n    */\n    onFileChange: function onFileChange(event) {\n      if (this.disabled || this.loading) return;\n      if (this.dragDrop) this.updateDragDropFocus(false);\n      var value = event.target.files || event.dataTransfer.files;\n\n      if (value.length === 0) {\n        if (!this.newValue) return;\n        if (this[\"native\"]) this.newValue = null;\n      } else if (!this.multiple) {\n        // only one element in case drag drop mode and isn't multiple\n        if (this.dragDrop && value.length !== 1) return;else {\n          var file = value[0];\n          if (this.checkType(file)) this.newValue = file;else if (this.newValue) this.newValue = null;else return;\n        }\n      } else {\n        // always new values if native or undefined local\n        var newValues = false;\n\n        if (this[\"native\"] || !this.newValue) {\n          this.newValue = [];\n          newValues = true;\n        }\n\n        for (var i = 0; i < value.length; i++) {\n          var _file = value[i];\n\n          if (this.checkType(_file)) {\n            this.newValue.push(_file);\n            newValues = true;\n          }\n        }\n\n        if (!newValues) return;\n      }\n\n      this.$emit('input', this.newValue);\n      !this.dragDrop && this.checkHtml5Validity();\n    },\n\n    /**\r\n    * Listen drag-drop to update internal variable\r\n    */\n    updateDragDropFocus: function updateDragDropFocus(focus) {\n      if (!this.disabled && !this.loading) {\n        this.dragDropFocus = focus;\n      }\n    },\n\n    /**\r\n    * Check mime type of file\r\n    */\n    checkType: function checkType(file) {\n      if (!this.accept) return true;\n      var types = this.accept.split(',');\n      if (types.length === 0) return true;\n      var valid = false;\n\n      for (var i = 0; i < types.length && !valid; i++) {\n        var type = types[i].trim();\n\n        if (type) {\n          if (type.substring(0, 1) === '.') {\n            // check extension\n            var extIndex = file.name.lastIndexOf('.');\n            var extension = extIndex >= 0 ? file.name.substring(extIndex) : '';\n\n            if (extension.toLowerCase() === type.toLowerCase()) {\n              valid = true;\n            }\n          } else {\n            // check mime type\n            if (file.type.match(type)) {\n              valid = true;\n            }\n          }\n        }\n      }\n\n      if (!valid) this.$emit('invalid');\n      return valid;\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('label', {\n    staticClass: \"upload control\",\n    \"class\": {\n      'is-expanded': _vm.expanded,\n      'is-rounded': _vm.rounded\n    }\n  }, [!_vm.dragDrop ? [_vm._t(\"default\")] : _c('div', {\n    staticClass: \"upload-draggable\",\n    \"class\": [_vm.type, {\n      'is-loading': _vm.loading,\n      'is-disabled': _vm.disabled,\n      'is-hovered': _vm.dragDropFocus,\n      'is-expanded': _vm.expanded\n    }],\n    on: {\n      \"dragover\": function dragover($event) {\n        $event.preventDefault();\n        return _vm.updateDragDropFocus(true);\n      },\n      \"dragleave\": function dragleave($event) {\n        $event.preventDefault();\n        return _vm.updateDragDropFocus(false);\n      },\n      \"dragenter\": function dragenter($event) {\n        $event.preventDefault();\n        return _vm.updateDragDropFocus(true);\n      },\n      \"drop\": function drop($event) {\n        $event.preventDefault();\n        return _vm.onFileChange($event);\n      }\n    }\n  }, [_vm._t(\"default\")], 2), _c('input', _vm._b({\n    ref: \"input\",\n    attrs: {\n      \"type\": \"file\",\n      \"multiple\": _vm.multiple,\n      \"accept\": _vm.accept,\n      \"disabled\": _vm.disabled\n    },\n    on: {\n      \"change\": _vm.onFileChange\n    }\n  }, 'input', _vm.$attrs, false))], 2);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Upload = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Upload);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Upload as BUpload };","map":null,"metadata":{},"sourceType":"module"}