{"ast":null,"code":"import { _ as _defineProperty } from './chunk-455cdeae.js';\nimport './helpers.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport { I as Icon } from './chunk-7e17a637.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js'; //\n//\n//\n//\n//\n//\n\nvar script = {\n  name: 'BMenu',\n  props: {\n    accordion: {\n      type: Boolean,\n      \"default\": true\n    },\n    activable: {\n      type: Boolean,\n      \"default\": true\n    }\n  },\n  data: function data() {\n    return {\n      _isMenu: true // Used by MenuItem\n\n    };\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"menu\"\n  }, [_vm._t(\"default\")], 2);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Menu = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar script$1 = {\n  name: 'BMenuList',\n  functional: true,\n  props: {\n    label: String,\n    icon: String,\n    iconPack: String,\n    ariaRole: {\n      type: String,\n      \"default\": ''\n    },\n    size: {\n      type: String,\n      \"default\": 'is-small'\n    }\n  },\n  render: function render(createElement, context) {\n    var vlabel = null;\n    var slots = context.slots();\n\n    if (context.props.label || slots.label) {\n      vlabel = createElement('p', {\n        attrs: {\n          'class': 'menu-label'\n        }\n      }, context.props.label ? context.props.icon ? [createElement('b-icon', {\n        props: {\n          'icon': context.props.icon,\n          'pack': context.props.iconPack,\n          'size': context.props.size\n        }\n      }), createElement('span', {}, context.props.label)] : context.props.label : slots.label);\n    }\n\n    var vnode = createElement('ul', {\n      attrs: {\n        'class': 'menu-list',\n        'role': context.props.ariaRole === 'menu' ? context.props.ariaRole : null\n      }\n    }, slots[\"default\"]);\n    return vlabel ? [vlabel, vnode] : vnode;\n  }\n};\n/* script */\n\nvar __vue_script__$1 = script$1;\n/* template */\n\n/* style */\n\nvar __vue_inject_styles__$1 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$1 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$1 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$1 = undefined;\n/* style inject */\n\n/* style inject SSR */\n\nvar MenuList = __vue_normalize__({}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, undefined, undefined);\n\nvar script$2 = {\n  name: 'BMenuItem',\n  components: _defineProperty({}, Icon.name, Icon),\n  inheritAttrs: false,\n  // deprecated, to replace with default 'value' in the next breaking change\n  model: {\n    prop: 'active',\n    event: 'update:active'\n  },\n  props: {\n    label: String,\n    active: Boolean,\n    expanded: Boolean,\n    disabled: Boolean,\n    iconPack: String,\n    icon: String,\n    animation: {\n      type: String,\n      \"default\": 'slide'\n    },\n    tag: {\n      type: String,\n      \"default\": 'a',\n      validator: function validator(value) {\n        return config.defaultLinkTags.indexOf(value) >= 0;\n      }\n    },\n    ariaRole: {\n      type: String,\n      \"default\": ''\n    },\n    size: {\n      type: String,\n      \"default\": 'is-small'\n    }\n  },\n  data: function data() {\n    return {\n      newActive: this.active,\n      newExpanded: this.expanded\n    };\n  },\n  computed: {\n    ariaRoleMenu: function ariaRoleMenu() {\n      return this.ariaRole === 'menuitem' ? this.ariaRole : null;\n    }\n  },\n  watch: {\n    active: function active(value) {\n      this.newActive = value;\n    },\n    expanded: function expanded(value) {\n      this.newExpanded = value;\n    }\n  },\n  methods: {\n    onClick: function onClick(event) {\n      if (this.disabled) return;\n      var menu = this.getMenu();\n      this.reset(this.$parent, menu);\n      this.newExpanded = this.$props.expanded || !this.newExpanded;\n      this.$emit('update:expanded', this.newExpanded);\n\n      if (menu && menu.activable) {\n        this.newActive = true;\n        this.$emit('update:active', this.newActive);\n      }\n    },\n    reset: function reset(parent, menu) {\n      var _this = this;\n\n      var items = parent.$children.filter(function (c) {\n        return c.name === _this.name;\n      });\n      items.forEach(function (item) {\n        if (item !== _this) {\n          _this.reset(item, menu);\n\n          if (!parent.$data._isMenu || parent.$data._isMenu && parent.accordion) {\n            item.newExpanded = false;\n            item.$emit('update:expanded', item.newActive);\n          }\n\n          if (menu && menu.activable) {\n            item.newActive = false;\n            item.$emit('update:active', item.newActive);\n          }\n        }\n      });\n    },\n    getMenu: function getMenu() {\n      var parent = this.$parent;\n\n      while (parent && !parent.$data._isMenu) {\n        parent = parent.$parent;\n      }\n\n      return parent;\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$2 = script$2;\n/* template */\n\nvar __vue_render__$1 = function __vue_render__$1() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('li', {\n    attrs: {\n      \"role\": _vm.ariaRoleMenu\n    }\n  }, [_c(_vm.tag, _vm._g(_vm._b({\n    tag: \"component\",\n    \"class\": {\n      'is-active': _vm.newActive,\n      'is-expanded': _vm.newExpanded,\n      'is-disabled': _vm.disabled,\n      'icon-text': _vm.icon\n    },\n    on: {\n      \"click\": function click($event) {\n        return _vm.onClick($event);\n      }\n    }\n  }, 'component', _vm.$attrs, false), _vm.$listeners), [_vm.icon ? _c('b-icon', {\n    attrs: {\n      \"icon\": _vm.icon,\n      \"pack\": _vm.iconPack,\n      \"size\": _vm.size\n    }\n  }) : _vm._e(), _vm.label ? _c('span', [_vm._v(\" \" + _vm._s(_vm.label) + \" \")]) : _vm._t(\"label\", null, {\n    \"expanded\": _vm.newExpanded,\n    \"active\": _vm.newActive\n  })], 2), _vm.$slots[\"default\"] ? [_c('transition', {\n    attrs: {\n      \"name\": _vm.animation\n    }\n  }, [_c('ul', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.newExpanded,\n      expression: \"newExpanded\"\n    }]\n  }, [_vm._t(\"default\")], 2)])] : _vm._e()], 2);\n};\n\nvar __vue_staticRenderFns__$1 = [];\n/* style */\n\nvar __vue_inject_styles__$2 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$2 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$2 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$2 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar MenuItem = __vue_normalize__({\n  render: __vue_render__$1,\n  staticRenderFns: __vue_staticRenderFns__$1\n}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Menu);\n    registerComponent(Vue, MenuList);\n    registerComponent(Vue, MenuItem);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Menu as BMenu, MenuItem as BMenuItem, MenuList as BMenuList };","map":null,"metadata":{},"sourceType":"module"}