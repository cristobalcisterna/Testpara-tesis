{"ast":null,"code":"import { _ as _defineProperty, a as _objectSpread2 } from './chunk-455cdeae.js';\nimport { mod, bound, sign } from './helpers.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport { I as Icon } from './chunk-7e17a637.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js';\nimport { P as ProviderParentMixin, S as Sorted, I as InjectedChildMixin, a as Sorted$1 } from './chunk-60a03517.js';\nimport { I as Image } from './chunk-493ff0a9.js';\nvar script = {\n  name: 'BCarousel',\n  components: _defineProperty({}, Icon.name, Icon),\n  mixins: [ProviderParentMixin('carousel', Sorted)],\n  props: {\n    value: {\n      type: Number,\n      \"default\": 0\n    },\n    animated: {\n      type: String,\n      \"default\": 'slide'\n    },\n    interval: Number,\n    hasDrag: {\n      type: Boolean,\n      \"default\": true\n    },\n    autoplay: {\n      type: Boolean,\n      \"default\": true\n    },\n    pauseHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    pauseInfo: {\n      type: Boolean,\n      \"default\": true\n    },\n    pauseInfoType: {\n      type: String,\n      \"default\": 'is-white'\n    },\n    pauseText: {\n      type: String,\n      \"default\": 'Pause'\n    },\n    arrow: {\n      type: Boolean,\n      \"default\": true\n    },\n    arrowHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    repeat: {\n      type: Boolean,\n      \"default\": true\n    },\n    iconPack: String,\n    iconSize: String,\n    iconPrev: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultIconPrev;\n      }\n    },\n    iconNext: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultIconNext;\n      }\n    },\n    indicator: {\n      type: Boolean,\n      \"default\": true\n    },\n    indicatorBackground: Boolean,\n    indicatorCustom: Boolean,\n    indicatorCustomSize: {\n      type: String,\n      \"default\": 'is-small'\n    },\n    indicatorInside: {\n      type: Boolean,\n      \"default\": true\n    },\n    indicatorMode: {\n      type: String,\n      \"default\": 'click'\n    },\n    indicatorPosition: {\n      type: String,\n      \"default\": 'is-bottom'\n    },\n    indicatorStyle: {\n      type: String,\n      \"default\": 'is-dots'\n    },\n    overlay: Boolean,\n    progress: Boolean,\n    progressType: {\n      type: String,\n      \"default\": 'is-primary'\n    },\n    withCarouselList: Boolean\n  },\n  data: function data() {\n    return {\n      transition: 'next',\n      activeChild: this.value || 0,\n      isPause: false,\n      dragX: false,\n      timer: null\n    };\n  },\n  computed: {\n    indicatorClasses: function indicatorClasses() {\n      return [{\n        'has-background': this.indicatorBackground,\n        'has-custom': this.indicatorCustom,\n        'is-inside': this.indicatorInside\n      }, this.indicatorCustom && this.indicatorCustomSize, this.indicatorInside && this.indicatorPosition];\n    },\n    // checking arrows\n    hasPrev: function hasPrev() {\n      return this.repeat || this.activeChild !== 0;\n    },\n    hasNext: function hasNext() {\n      return this.repeat || this.activeChild < this.childItems.length - 1;\n    }\n  },\n  watch: {\n    /**\r\n     * When v-model is changed set the new active item.\r\n     */\n    value: function value(_value) {\n      this.changeActive(_value);\n    },\n\n    /**\r\n     * When carousel-items are updated, set active one.\r\n     */\n    sortedItems: function sortedItems(items) {\n      if (this.activeChild >= items.length && this.activeChild > 0) {\n        this.changeActive(this.activeChild - 1);\n      }\n    },\n\n    /**\r\n     *  When autoplay is changed, start or pause timer accordingly\r\n     */\n    autoplay: function autoplay(status) {\n      status ? this.startTimer() : this.pauseTimer();\n    },\n\n    /**\r\n     *  Since the timer can get paused at the end, if repeat is changed we need to restart it\r\n     */\n    repeat: function repeat(status) {\n      if (status) {\n        this.startTimer();\n      }\n    }\n  },\n  methods: {\n    startTimer: function startTimer() {\n      var _this = this;\n\n      if (!this.autoplay || this.timer) return;\n      this.isPause = false;\n      this.timer = setInterval(function () {\n        if (!_this.repeat && _this.activeChild >= _this.childItems.length - 1) {\n          _this.pauseTimer();\n        } else {\n          _this.next();\n        }\n      }, this.interval || config.defaultCarouselInterval);\n    },\n    pauseTimer: function pauseTimer() {\n      this.isPause = true;\n\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    },\n    restartTimer: function restartTimer() {\n      this.pauseTimer();\n      this.startTimer();\n    },\n    checkPause: function checkPause() {\n      if (this.pauseHover && this.autoplay) {\n        this.pauseTimer();\n      }\n    },\n\n    /**\r\n     * Change the active item and emit change event.\r\n     * action only for animated slide, there true = next, false = prev\r\n     */\n    changeActive: function changeActive(newIndex) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (this.activeChild === newIndex || isNaN(newIndex)) return;\n      direction = direction || newIndex - this.activeChild;\n      newIndex = this.repeat ? mod(newIndex, this.childItems.length) : bound(newIndex, 0, this.childItems.length - 1);\n      this.transition = direction > 0 ? 'prev' : 'next'; // Transition names are reversed from the actual direction for correct effect\n\n      this.activeChild = newIndex;\n\n      if (newIndex !== this.value) {\n        this.$emit('input', newIndex);\n      }\n\n      this.restartTimer();\n      this.$emit('change', newIndex); // BC\n    },\n    // Indicator trigger when change active item.\n    modeChange: function modeChange(trigger, value) {\n      if (this.indicatorMode === trigger) {\n        return this.changeActive(value);\n      }\n    },\n    prev: function prev() {\n      this.changeActive(this.activeChild - 1, -1);\n    },\n    next: function next() {\n      this.changeActive(this.activeChild + 1, 1);\n    },\n    // handle drag event\n    dragStart: function dragStart(event) {\n      if (!this.hasDrag || !event.target.draggable) return;\n      this.dragX = event.touches ? event.changedTouches[0].pageX : event.pageX;\n\n      if (event.touches) {\n        this.pauseTimer();\n      } else {\n        event.preventDefault();\n      }\n    },\n    dragEnd: function dragEnd(event) {\n      if (this.dragX === false) return;\n      var detected = event.touches ? event.changedTouches[0].pageX : event.pageX;\n      var diffX = detected - this.dragX;\n\n      if (Math.abs(diffX) > 30) {\n        if (diffX < 0) {\n          this.next();\n        } else {\n          this.prev();\n        }\n      } else {\n        event.target.click();\n        this.sortedItems[this.activeChild].$emit('click');\n        this.$emit('click');\n      }\n\n      if (event.touches) {\n        this.startTimer();\n      }\n\n      this.dragX = false;\n    }\n  },\n  mounted: function mounted() {\n    this.startTimer();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.pauseTimer();\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"carousel\",\n    \"class\": {\n      'is-overlay': _vm.overlay\n    },\n    on: {\n      \"mouseenter\": _vm.checkPause,\n      \"mouseleave\": _vm.startTimer\n    }\n  }, [_vm.progress ? _c('progress', {\n    staticClass: \"progress\",\n    \"class\": _vm.progressType,\n    attrs: {\n      \"max\": _vm.childItems.length - 1\n    },\n    domProps: {\n      \"value\": _vm.activeChild\n    }\n  }, [_vm._v(\" \" + _vm._s(_vm.childItems.length - 1) + \" \")]) : _vm._e(), _c('div', {\n    staticClass: \"carousel-items\",\n    on: {\n      \"mousedown\": _vm.dragStart,\n      \"mouseup\": _vm.dragEnd,\n      \"touchstart\": function touchstart($event) {\n        $event.stopPropagation();\n        return _vm.dragStart($event);\n      },\n      \"touchend\": function touchend($event) {\n        $event.stopPropagation();\n        return _vm.dragEnd($event);\n      }\n    }\n  }, [_vm._t(\"default\"), _vm.arrow ? _c('div', {\n    staticClass: \"carousel-arrow\",\n    \"class\": {\n      'is-hovered': _vm.arrowHover\n    }\n  }, [_c('b-icon', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.hasPrev,\n      expression: \"hasPrev\"\n    }],\n    staticClass: \"has-icons-left\",\n    attrs: {\n      \"pack\": _vm.iconPack,\n      \"icon\": _vm.iconPrev,\n      \"size\": _vm.iconSize,\n      \"both\": \"\"\n    },\n    nativeOn: {\n      \"click\": function click($event) {\n        return _vm.prev($event);\n      }\n    }\n  }), _c('b-icon', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.hasNext,\n      expression: \"hasNext\"\n    }],\n    staticClass: \"has-icons-right\",\n    attrs: {\n      \"pack\": _vm.iconPack,\n      \"icon\": _vm.iconNext,\n      \"size\": _vm.iconSize,\n      \"both\": \"\"\n    },\n    nativeOn: {\n      \"click\": function click($event) {\n        return _vm.next($event);\n      }\n    }\n  })], 1) : _vm._e()], 2), _vm.autoplay && _vm.pauseHover && _vm.pauseInfo && _vm.isPause ? _c('div', {\n    staticClass: \"carousel-pause\"\n  }, [_c('span', {\n    staticClass: \"tag\",\n    \"class\": _vm.pauseInfoType\n  }, [_vm._v(\" \" + _vm._s(_vm.pauseText) + \" \")])]) : _vm._e(), _vm.withCarouselList && !_vm.indicator ? [_vm._t(\"list\", null, {\n    \"active\": _vm.activeChild,\n    \"switch\": _vm.changeActive\n  })] : _vm._e(), _vm.indicator ? _c('div', {\n    staticClass: \"carousel-indicator\",\n    \"class\": _vm.indicatorClasses\n  }, _vm._l(_vm.sortedItems, function (item, index) {\n    return _c('a', {\n      key: item._uid,\n      staticClass: \"indicator-item\",\n      \"class\": {\n        'is-active': item.isActive\n      },\n      on: {\n        \"mouseover\": function mouseover($event) {\n          return _vm.modeChange('hover', index);\n        },\n        \"click\": function click($event) {\n          return _vm.modeChange('click', index);\n        }\n      }\n    }, [_vm._t(\"indicators\", [_c('span', {\n      staticClass: \"indicator-style\",\n      \"class\": _vm.indicatorStyle\n    })], {\n      \"i\": index\n    })], 2);\n  }), 0) : _vm._e(), _vm.overlay ? [_vm._t(\"overlay\")] : _vm._e()], 2);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Carousel = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined); //\n\n\nvar script$1 = {\n  name: 'BCarouselItem',\n  mixins: [InjectedChildMixin('carousel', Sorted$1)],\n  data: function data() {\n    return {\n      transitionName: null\n    };\n  },\n  computed: {\n    transition: function transition() {\n      if (this.parent.animated === 'fade') {\n        return 'fade';\n      } else if (this.parent.transition) {\n        return 'slide-' + this.parent.transition;\n      }\n    },\n    isActive: function isActive() {\n      return this.parent.activeChild === this.index;\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$1 = script$1;\n/* template */\n\nvar __vue_render__$1 = function __vue_render__$1() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('transition', {\n    attrs: {\n      \"name\": _vm.transition\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.isActive,\n      expression: \"isActive\"\n    }],\n    staticClass: \"carousel-item\"\n  }, [_vm._t(\"default\")], 2)]);\n};\n\nvar __vue_staticRenderFns__$1 = [];\n/* style */\n\nvar __vue_inject_styles__$1 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$1 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$1 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$1 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar CarouselItem = __vue_normalize__({\n  render: __vue_render__$1,\n  staticRenderFns: __vue_staticRenderFns__$1\n}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, undefined, undefined);\n\nvar _components;\n\nvar script$2 = {\n  name: 'BCarouselList',\n  components: (_components = {}, _defineProperty(_components, Icon.name, Icon), _defineProperty(_components, Image.name, Image), _components),\n  props: {\n    data: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    value: {\n      type: Number,\n      \"default\": 0\n    },\n    scrollValue: {\n      type: Number,\n      \"default\": 0\n    },\n    hasDrag: {\n      type: Boolean,\n      \"default\": true\n    },\n    hasGrayscale: Boolean,\n    hasOpacity: Boolean,\n    repeat: Boolean,\n    itemsToShow: {\n      type: Number,\n      \"default\": 4\n    },\n    itemsToList: {\n      type: Number,\n      \"default\": 1\n    },\n    asIndicator: Boolean,\n    arrow: {\n      type: Boolean,\n      \"default\": true\n    },\n    arrowHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    iconPack: String,\n    iconSize: String,\n    iconPrev: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultIconPrev;\n      }\n    },\n    iconNext: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultIconNext;\n      }\n    },\n    breakpoints: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      activeItem: this.value,\n      scrollIndex: this.asIndicator ? this.scrollValue : this.value,\n      delta: 0,\n      dragX: false,\n      hold: 0,\n      windowWidth: 0,\n      touch: false,\n      observer: null,\n      refresh_: 0\n    };\n  },\n  computed: {\n    dragging: function dragging() {\n      return this.dragX !== false;\n    },\n    listClass: function listClass() {\n      return [{\n        'has-grayscale': this.settings.hasGrayscale,\n        'has-opacity': this.settings.hasOpacity,\n        'is-dragging': this.dragging\n      }];\n    },\n    itemStyle: function itemStyle() {\n      return \"width: \".concat(this.itemWidth, \"px;\");\n    },\n    translation: function translation() {\n      return -bound(this.delta + this.scrollIndex * this.itemWidth, 0, (this.data.length - this.settings.itemsToShow) * this.itemWidth);\n    },\n    total: function total() {\n      return this.data.length - this.settings.itemsToShow;\n    },\n    hasPrev: function hasPrev() {\n      return this.settings.repeat || this.scrollIndex > 0;\n    },\n    hasNext: function hasNext() {\n      return this.settings.repeat || this.scrollIndex < this.total;\n    },\n    breakpointKeys: function breakpointKeys() {\n      return Object.keys(this.breakpoints).sort(function (a, b) {\n        return b - a;\n      });\n    },\n    settings: function settings() {\n      var _this = this;\n\n      var breakpoint = this.breakpointKeys.filter(function (breakpoint) {\n        if (_this.windowWidth >= breakpoint) {\n          return true;\n        }\n      })[0];\n\n      if (breakpoint) {\n        return _objectSpread2({}, this.$props, {}, this.breakpoints[breakpoint]);\n      }\n\n      return this.$props;\n    },\n    itemWidth: function itemWidth() {\n      if (this.windowWidth) {\n        // Ensure component is mounted\n\n        /* eslint-disable-next-line */\n        this.refresh_; // We force the computed property to refresh if this prop is changed\n\n        var rect = this.$el.getBoundingClientRect();\n        return rect.width / this.settings.itemsToShow;\n      }\n\n      return 0;\n    }\n  },\n  watch: {\n    /**\r\n     * When v-model is changed set the new active item.\r\n     */\n    value: function value(_value) {\n      this.switchTo(this.asIndicator ? _value - (this.itemsToShow - 3) / 2 : _value);\n\n      if (this.activeItem !== _value) {\n        this.activeItem = bound(_value, 0, this.data.length - 1);\n      }\n    },\n    scrollValue: function scrollValue(value) {\n      this.switchTo(value);\n    }\n  },\n  methods: {\n    resized: function resized() {\n      this.windowWidth = window.innerWidth;\n    },\n    switchTo: function switchTo(newIndex) {\n      if (newIndex === this.scrollIndex || isNaN(newIndex)) {\n        return;\n      }\n\n      if (this.settings.repeat) {\n        newIndex = mod(newIndex, this.total + 1);\n      }\n\n      newIndex = bound(newIndex, 0, this.total);\n      this.scrollIndex = newIndex;\n\n      if (!this.asIndicator && this.value !== newIndex) {\n        this.$emit('input', newIndex);\n      } else if (this.scrollIndex !== newIndex) {\n        this.$emit('updated:scroll', newIndex);\n      }\n    },\n    next: function next() {\n      this.switchTo(this.scrollIndex + this.settings.itemsToList);\n    },\n    prev: function prev() {\n      this.switchTo(this.scrollIndex - this.settings.itemsToList);\n    },\n    checkAsIndicator: function checkAsIndicator(value, event) {\n      if (!this.asIndicator) return;\n      var dragEndX = event.changedTouches ? event.changedTouches[0].clientX : event.clientX;\n      if (this.hold - Date.now() > 2000 || Math.abs(this.dragX - dragEndX) > 10) return;\n      this.dragX = false;\n      this.hold = 0;\n      event.preventDefault(); // Make the item appear in the middle\n\n      this.activeItem = value;\n      this.$emit('switch', value);\n    },\n    // handle drag event\n    dragStart: function dragStart(event) {\n      if (this.dragging || !this.settings.hasDrag || event.button !== 0 && event.type !== 'touchstart') return;\n      this.hold = Date.now();\n      this.touch = !!event.touches;\n      this.dragX = this.touch ? event.touches[0].clientX : event.clientX;\n      window.addEventListener(this.touch ? 'touchmove' : 'mousemove', this.dragMove);\n      window.addEventListener(this.touch ? 'touchend' : 'mouseup', this.dragEnd);\n    },\n    dragMove: function dragMove(event) {\n      if (!this.dragging) return;\n      var dragEndX = event.touches ? (event.changedTouches[0] || event.touches[0]).clientX : event.clientX;\n      this.delta = this.dragX - dragEndX;\n\n      if (!event.touches) {\n        event.preventDefault();\n      }\n    },\n    dragEnd: function dragEnd() {\n      if (!this.dragging && !this.hold) return;\n\n      if (this.hold) {\n        var signCheck = sign(this.delta);\n        var results = Math.round(Math.abs(this.delta / this.itemWidth) + 0.15); // Hack\n\n        this.switchTo(this.scrollIndex + signCheck * results);\n      }\n\n      this.delta = 0;\n      this.dragX = false;\n      window.removeEventListener(this.touch ? 'touchmove' : 'mousemove', this.dragMove);\n      window.removeEventListener(this.touch ? 'touchend' : 'mouseup', this.dragEnd);\n    },\n    refresh: function refresh() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.refresh_++;\n      });\n    }\n  },\n  mounted: function mounted() {\n    if (typeof window !== 'undefined') {\n      if (window.ResizeObserver) {\n        this.observer = new ResizeObserver(this.refresh);\n        this.observer.observe(this.$el);\n      }\n\n      window.addEventListener('resize', this.resized);\n      document.addEventListener('animationend', this.refresh);\n      document.addEventListener('transitionend', this.refresh);\n      document.addEventListener('transitionstart', this.refresh);\n      this.resized();\n    }\n\n    if (this.$attrs.config) {\n      throw new Error('The config prop was removed, you need to use v-bind instead');\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      if (window.ResizeObserver) {\n        this.observer.disconnect();\n      }\n\n      window.removeEventListener('resize', this.resized);\n      document.removeEventListener('animationend', this.refresh);\n      document.removeEventListener('transitionend', this.refresh);\n      document.removeEventListener('transitionstart', this.refresh);\n      this.dragEnd();\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$2 = script$2;\n/* template */\n\nvar __vue_render__$2 = function __vue_render__$2() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"carousel-list\",\n    \"class\": {\n      'has-shadow': _vm.scrollIndex > 0\n    },\n    on: {\n      \"mousedown\": function mousedown($event) {\n        $event.preventDefault();\n        return _vm.dragStart($event);\n      },\n      \"touchstart\": _vm.dragStart\n    }\n  }, [_c('div', {\n    staticClass: \"carousel-slides\",\n    \"class\": _vm.listClass,\n    style: 'transform:translateX(' + _vm.translation + 'px)'\n  }, _vm._l(_vm.data, function (list, index) {\n    return _c('div', {\n      key: index,\n      staticClass: \"carousel-slide\",\n      \"class\": {\n        'is-active': _vm.asIndicator ? _vm.activeItem === index : _vm.scrollIndex === index\n      },\n      style: _vm.itemStyle,\n      on: {\n        \"mouseup\": function mouseup($event) {\n          return _vm.checkAsIndicator(index, $event);\n        },\n        \"touchend\": function touchend($event) {\n          return _vm.checkAsIndicator(index, $event);\n        }\n      }\n    }, [_vm._t(\"item\", [_c('b-image', _vm._b({\n      attrs: {\n        \"src\": list.image\n      }\n    }, 'b-image', list, false))], {\n      \"index\": index,\n      \"active\": _vm.activeItem,\n      \"scroll\": _vm.scrollIndex,\n      \"list\": list\n    }, list)], 2);\n  }), 0), _vm.arrow ? _c('div', {\n    staticClass: \"carousel-arrow\",\n    \"class\": {\n      'is-hovered': _vm.settings.arrowHover\n    }\n  }, [_c('b-icon', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.hasPrev,\n      expression: \"hasPrev\"\n    }],\n    staticClass: \"has-icons-left\",\n    attrs: {\n      \"pack\": _vm.settings.iconPack,\n      \"icon\": _vm.settings.iconPrev,\n      \"size\": _vm.settings.iconSize,\n      \"both\": \"\"\n    },\n    nativeOn: {\n      \"click\": function click($event) {\n        $event.preventDefault();\n        return _vm.prev($event);\n      }\n    }\n  }), _c('b-icon', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.hasNext,\n      expression: \"hasNext\"\n    }],\n    staticClass: \"has-icons-right\",\n    attrs: {\n      \"pack\": _vm.settings.iconPack,\n      \"icon\": _vm.settings.iconNext,\n      \"size\": _vm.settings.iconSize,\n      \"both\": \"\"\n    },\n    nativeOn: {\n      \"click\": function click($event) {\n        $event.preventDefault();\n        return _vm.next($event);\n      }\n    }\n  })], 1) : _vm._e()]);\n};\n\nvar __vue_staticRenderFns__$2 = [];\n/* style */\n\nvar __vue_inject_styles__$2 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$2 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$2 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$2 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar CarouselList = __vue_normalize__({\n  render: __vue_render__$2,\n  staticRenderFns: __vue_staticRenderFns__$2\n}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Carousel);\n    registerComponent(Vue, CarouselItem);\n    registerComponent(Vue, CarouselList);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Carousel as BCarousel, CarouselItem as BCarouselItem, CarouselList as BCarouselList };","map":null,"metadata":{},"sourceType":"module"}