{"ast":null,"code":"import { _ as _defineProperty } from './chunk-455cdeae.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport { F as FormElementMixin } from './chunk-17b33cd2.js';\nimport { I as Icon } from './chunk-7e17a637.js';\nimport { _ as __vue_normalize__ } from './chunk-cca88db8.js';\nvar script = {\n  name: 'BInput',\n  components: _defineProperty({}, Icon.name, Icon),\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  props: {\n    value: [Number, String],\n    type: {\n      type: String,\n      \"default\": 'text'\n    },\n    lazy: {\n      type: Boolean,\n      \"default\": false\n    },\n    passwordReveal: Boolean,\n    iconClickable: Boolean,\n    hasCounter: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultInputHasCounter;\n      }\n    },\n    customClass: {\n      type: String,\n      \"default\": ''\n    },\n    iconRight: String,\n    iconRightClickable: Boolean,\n    iconRightType: String\n  },\n  data: function data() {\n    return {\n      newValue: this.value,\n      newType: this.type,\n      newAutocomplete: this.autocomplete || config.defaultInputAutocomplete,\n      isPasswordVisible: false,\n      _elementRef: this.type === 'textarea' ? 'textarea' : 'input'\n    };\n  },\n  computed: {\n    computedValue: {\n      get: function get() {\n        return this.newValue;\n      },\n      set: function set(value) {\n        this.newValue = value;\n        this.$emit('input', value);\n      }\n    },\n    rootClasses: function rootClasses() {\n      return [this.iconPosition, this.size, {\n        'is-expanded': this.expanded,\n        'is-loading': this.loading,\n        'is-clearfix': !this.hasMessage\n      }];\n    },\n    inputClasses: function inputClasses() {\n      return [this.statusType, this.size, {\n        'is-rounded': this.rounded\n      }];\n    },\n    hasIconRight: function hasIconRight() {\n      return this.passwordReveal || this.loading || this.statusIcon && this.statusTypeIcon || this.iconRight;\n    },\n    rightIcon: function rightIcon() {\n      if (this.passwordReveal) {\n        return this.passwordVisibleIcon;\n      } else if (this.iconRight) {\n        return this.iconRight;\n      }\n\n      return this.statusTypeIcon;\n    },\n    rightIconType: function rightIconType() {\n      if (this.passwordReveal) {\n        return 'is-primary';\n      } else if (this.iconRight) {\n        return this.iconRightType || null;\n      }\n\n      return this.statusType;\n    },\n\n    /**\r\n    * Position of the icon or if it's both sides.\r\n    */\n    iconPosition: function iconPosition() {\n      var iconClasses = '';\n\n      if (this.icon) {\n        iconClasses += 'has-icons-left ';\n      }\n\n      if (this.hasIconRight) {\n        iconClasses += 'has-icons-right';\n      }\n\n      return iconClasses;\n    },\n\n    /**\r\n    * Icon name (MDI) based on the type.\r\n    */\n    statusTypeIcon: function statusTypeIcon() {\n      switch (this.statusType) {\n        case 'is-success':\n          return 'check';\n\n        case 'is-danger':\n          return 'alert-circle';\n\n        case 'is-info':\n          return 'information';\n\n        case 'is-warning':\n          return 'alert';\n      }\n    },\n\n    /**\r\n    * Check if have any message prop from parent if it's a Field.\r\n    */\n    hasMessage: function hasMessage() {\n      return !!this.statusMessage;\n    },\n\n    /**\r\n    * Current password-reveal icon name.\r\n    */\n    passwordVisibleIcon: function passwordVisibleIcon() {\n      return !this.isPasswordVisible ? 'eye' : 'eye-off';\n    },\n\n    /**\r\n    * Get value length\r\n    */\n    valueLength: function valueLength() {\n      if (typeof this.computedValue === 'string') {\n        return this.computedValue.length;\n      } else if (typeof this.computedValue === 'number') {\n        return this.computedValue.toString().length;\n      }\n\n      return 0;\n    }\n  },\n  watch: {\n    /**\r\n    * When v-model is changed:\r\n    *   1. Set internal value.\r\n    */\n    value: function value(_value) {\n      this.newValue = _value;\n    }\n  },\n  methods: {\n    /**\r\n    * Toggle the visibility of a password-reveal input\r\n    * by changing the type and focus the input right away.\r\n    */\n    togglePasswordVisibility: function togglePasswordVisibility() {\n      var _this = this;\n\n      this.isPasswordVisible = !this.isPasswordVisible;\n      this.newType = this.isPasswordVisible ? 'text' : 'password';\n      this.$nextTick(function () {\n        _this.focus();\n      });\n    },\n    iconClick: function iconClick(emit, event) {\n      var _this2 = this;\n\n      this.$emit(emit, event);\n      this.$nextTick(function () {\n        _this2.focus();\n      });\n    },\n    rightIconClick: function rightIconClick(event) {\n      if (this.passwordReveal) {\n        this.togglePasswordVisibility();\n      } else if (this.iconRightClickable) {\n        this.iconClick('icon-right-click', event);\n      }\n    },\n    onInput: function onInput(event) {\n      if (!this.lazy) {\n        var value = event.target.value;\n        this.updateValue(value);\n      }\n    },\n    onChange: function onChange(event) {\n      if (this.lazy) {\n        var value = event.target.value;\n        this.updateValue(value);\n      }\n    },\n    updateValue: function updateValue(value) {\n      this.computedValue = value;\n      !this.isValid && this.checkHtml5Validity();\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"control\",\n    \"class\": _vm.rootClasses\n  }, [_vm.type !== 'textarea' ? _c('input', _vm._b({\n    ref: \"input\",\n    staticClass: \"input\",\n    \"class\": [_vm.inputClasses, _vm.customClass],\n    attrs: {\n      \"type\": _vm.newType,\n      \"autocomplete\": _vm.newAutocomplete,\n      \"maxlength\": _vm.maxlength\n    },\n    domProps: {\n      \"value\": _vm.computedValue\n    },\n    on: {\n      \"input\": _vm.onInput,\n      \"change\": _vm.onChange,\n      \"blur\": _vm.onBlur,\n      \"focus\": _vm.onFocus\n    }\n  }, 'input', _vm.$attrs, false)) : _c('textarea', _vm._b({\n    ref: \"textarea\",\n    staticClass: \"textarea\",\n    \"class\": [_vm.inputClasses, _vm.customClass],\n    attrs: {\n      \"maxlength\": _vm.maxlength\n    },\n    domProps: {\n      \"value\": _vm.computedValue\n    },\n    on: {\n      \"input\": _vm.onInput,\n      \"change\": _vm.onChange,\n      \"blur\": _vm.onBlur,\n      \"focus\": _vm.onFocus\n    }\n  }, 'textarea', _vm.$attrs, false)), _vm.icon ? _c('b-icon', {\n    staticClass: \"is-left\",\n    \"class\": {\n      'is-clickable': _vm.iconClickable\n    },\n    attrs: {\n      \"icon\": _vm.icon,\n      \"pack\": _vm.iconPack,\n      \"size\": _vm.iconSize\n    },\n    nativeOn: {\n      \"click\": function click($event) {\n        return _vm.iconClick('icon-click', $event);\n      }\n    }\n  }) : _vm._e(), !_vm.loading && _vm.hasIconRight ? _c('b-icon', {\n    staticClass: \"is-right\",\n    \"class\": {\n      'is-clickable': _vm.passwordReveal || _vm.iconRightClickable\n    },\n    attrs: {\n      \"icon\": _vm.rightIcon,\n      \"pack\": _vm.iconPack,\n      \"size\": _vm.iconSize,\n      \"type\": _vm.rightIconType,\n      \"both\": \"\"\n    },\n    nativeOn: {\n      \"click\": function click($event) {\n        return _vm.rightIconClick($event);\n      }\n    }\n  }) : _vm._e(), _vm.maxlength && _vm.hasCounter && _vm.type !== 'number' ? _c('small', {\n    staticClass: \"help counter\",\n    \"class\": {\n      'is-invisible': !_vm.isFocused\n    }\n  }, [_vm._v(\" \" + _vm._s(_vm.valueLength) + \" / \" + _vm._s(_vm.maxlength) + \" \")]) : _vm._e()], 1);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Input = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nexport { Input as I };","map":null,"metadata":{},"sourceType":"module"}