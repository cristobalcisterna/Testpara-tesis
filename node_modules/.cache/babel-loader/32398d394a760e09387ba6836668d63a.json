{"ast":null,"code":"import { isVueComponent } from './helpers.js';\nimport { c as config } from './chunk-652f2dad.js';\nvar FormElementMixin = {\n  props: {\n    size: String,\n    expanded: Boolean,\n    loading: Boolean,\n    rounded: Boolean,\n    icon: String,\n    iconPack: String,\n    // Native options to use in HTML5 validation\n    autocomplete: String,\n    maxlength: [Number, String],\n    useHtml5Validation: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultUseHtml5Validation;\n      }\n    },\n    validationMessage: String,\n    locale: {\n      type: [String, Array],\n      \"default\": function _default() {\n        return config.defaultLocale;\n      }\n    },\n    statusIcon: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultStatusIcon;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      isValid: true,\n      isFocused: false,\n      newIconPack: this.iconPack || config.defaultIconPack\n    };\n  },\n  computed: {\n    /**\r\n     * Find parent Field, max 3 levels deep.\r\n     */\n    parentField: function parentField() {\n      var parent = this.$parent;\n\n      for (var i = 0; i < 3; i++) {\n        if (parent && !parent.$data._isField) {\n          parent = parent.$parent;\n        }\n      }\n\n      return parent;\n    },\n\n    /**\r\n     * Get the type prop from parent if it's a Field.\r\n     */\n    statusType: function statusType() {\n      var _ref = this.parentField || {},\n          newType = _ref.newType;\n\n      if (!newType) return;\n\n      if (typeof newType === 'string') {\n        return newType;\n      } else {\n        for (var key in newType) {\n          if (newType[key]) {\n            return key;\n          }\n        }\n      }\n    },\n\n    /**\r\n     * Get the message prop from parent if it's a Field.\r\n     */\n    statusMessage: function statusMessage() {\n      if (!this.parentField) return;\n      return this.parentField.newMessage || this.parentField.$slots.message;\n    },\n\n    /**\r\n     * Fix icon size for inputs, large was too big\r\n     */\n    iconSize: function iconSize() {\n      switch (this.size) {\n        case 'is-small':\n          return this.size;\n\n        case 'is-medium':\n          return;\n\n        case 'is-large':\n          return this.newIconPack === 'mdi' ? 'is-medium' : '';\n      }\n    }\n  },\n  methods: {\n    /**\r\n     * Focus method that work dynamically depending on the component.\r\n     */\n    focus: function focus() {\n      var el = this.getElement();\n      if (el === undefined) return;\n      this.$nextTick(function () {\n        if (el) el.focus();\n      });\n    },\n    onBlur: function onBlur($event) {\n      this.isFocused = false;\n      this.$emit('blur', $event);\n      this.checkHtml5Validity();\n    },\n    onFocus: function onFocus($event) {\n      this.isFocused = true;\n      this.$emit('focus', $event);\n      this.checkHtml5Validity();\n    },\n    getElement: function getElement() {\n      var el = this.$refs[this.$data._elementRef];\n\n      while (isVueComponent(el)) {\n        el = el.$refs[el.$data._elementRef];\n      }\n\n      return el;\n    },\n    setInvalid: function setInvalid() {\n      var type = 'is-danger';\n      var message = this.validationMessage || this.getElement().validationMessage;\n      this.setValidity(type, message);\n    },\n    setValidity: function setValidity(type, message) {\n      var _this = this;\n\n      this.$nextTick(function () {\n        if (_this.parentField) {\n          // Set type only if not defined\n          if (!_this.parentField.type) {\n            _this.parentField.newType = type;\n          } // Set message only if not defined\n\n\n          if (!_this.parentField.message) {\n            _this.parentField.newMessage = message;\n          }\n        }\n      });\n    },\n\n    /**\r\n     * Check HTML5 validation, set isValid property.\r\n     * If validation fail, send 'is-danger' type,\r\n     * and error message to parent if it's a Field.\r\n     */\n    checkHtml5Validity: function checkHtml5Validity() {\n      if (!this.useHtml5Validation) return;\n      var el = this.getElement();\n      if (el === undefined) return;\n\n      if (!el.checkValidity()) {\n        this.setInvalid();\n        this.isValid = false;\n      } else {\n        this.setValidity(null, null);\n        this.isValid = true;\n      }\n\n      return this.isValid;\n    }\n  }\n};\nexport { FormElementMixin as F };","map":null,"metadata":{},"sourceType":"module"}