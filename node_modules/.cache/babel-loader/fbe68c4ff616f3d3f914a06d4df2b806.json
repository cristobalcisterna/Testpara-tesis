{"ast":null,"code":"import { _ as _defineProperty } from './chunk-455cdeae.js';\nimport { removeElement, merge } from './helpers.js';\nimport { c as config, V as VueInstance } from './chunk-e92e3389.js';\nimport { I as Icon } from './chunk-7e17a637.js';\nimport { _ as __vue_normalize__, r as registerComponent, a as registerComponentProgrammatic, u as use } from './chunk-cca88db8.js';\nimport { B as Button } from './chunk-b5576437.js';\nimport { t as trapFocus } from './chunk-42f463e6.js';\nimport { M as Modal } from './chunk-33e1434e.js';\n\nvar _components;\n\nvar script = {\n  name: 'BDialog',\n  components: (_components = {}, _defineProperty(_components, Icon.name, Icon), _defineProperty(_components, Button.name, Button), _components),\n  directives: {\n    trapFocus: trapFocus\n  },\n  \"extends\": Modal,\n  props: {\n    title: String,\n    message: [String, Array],\n    icon: String,\n    iconPack: String,\n    hasIcon: Boolean,\n    type: {\n      type: String,\n      \"default\": 'is-primary'\n    },\n    size: String,\n    confirmText: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultDialogConfirmText ? config.defaultDialogConfirmText : 'OK';\n      }\n    },\n    cancelText: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultDialogCancelText ? config.defaultDialogCancelText : 'Cancel';\n      }\n    },\n    hasInput: Boolean,\n    // Used internally to know if it's prompt\n    inputAttrs: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    onConfirm: {\n      type: Function,\n      \"default\": function _default() {}\n    },\n    closeOnConfirm: {\n      type: Boolean,\n      \"default\": true\n    },\n    container: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultContainerElement;\n      }\n    },\n    focusOn: {\n      type: String,\n      \"default\": 'confirm'\n    },\n    trapFocus: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultTrapFocus;\n      }\n    },\n    ariaRole: {\n      type: String,\n      validator: function validator(value) {\n        return ['dialog', 'alertdialog'].indexOf(value) >= 0;\n      }\n    },\n    ariaModal: Boolean\n  },\n  data: function data() {\n    var prompt = this.hasInput ? this.inputAttrs.value || '' : '';\n    return {\n      prompt: prompt,\n      isActive: false,\n      validationMessage: '',\n      isCompositing: false\n    };\n  },\n  computed: {\n    dialogClass: function dialogClass() {\n      return [this.size, {\n        'has-custom-container': this.container !== null\n      }];\n    },\n\n    /**\r\n    * Icon name (MDI) based on the type.\r\n    */\n    iconByType: function iconByType() {\n      switch (this.type) {\n        case 'is-info':\n          return 'information';\n\n        case 'is-success':\n          return 'check-circle';\n\n        case 'is-warning':\n          return 'alert';\n\n        case 'is-danger':\n          return 'alert-circle';\n\n        default:\n          return null;\n      }\n    },\n    showCancel: function showCancel() {\n      return this.cancelOptions.indexOf('button') >= 0;\n    }\n  },\n  methods: {\n    /**\r\n    * If it's a prompt Dialog, validate the input.\r\n    * Call the onConfirm prop (function) and close the Dialog.\r\n    */\n    confirm: function confirm() {\n      var _this = this;\n\n      if (this.$refs.input !== undefined) {\n        if (this.isCompositing) return;\n\n        if (!this.$refs.input.checkValidity()) {\n          this.validationMessage = this.$refs.input.validationMessage;\n          this.$nextTick(function () {\n            return _this.$refs.input.select();\n          });\n          return;\n        }\n      }\n\n      this.$emit('confirm', this.prompt);\n      this.onConfirm(this.prompt, this);\n      if (this.closeOnConfirm) this.close();\n    },\n\n    /**\r\n    * Close the Dialog.\r\n    */\n    close: function close() {\n      var _this2 = this;\n\n      this.isActive = false; // Timeout for the animation complete before destroying\n\n      setTimeout(function () {\n        _this2.$destroy();\n\n        removeElement(_this2.$el);\n      }, 150);\n    }\n  },\n  beforeMount: function beforeMount() {\n    var _this3 = this; // Insert the Dialog component in the element container\n\n\n    if (typeof window !== 'undefined') {\n      this.$nextTick(function () {\n        var container = document.querySelector(_this3.container) || document.body;\n        container.appendChild(_this3.$el);\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    this.isActive = true;\n\n    if (typeof this.inputAttrs.required === 'undefined') {\n      this.$set(this.inputAttrs, 'required', true);\n    }\n\n    this.$nextTick(function () {\n      // Handle which element receives focus\n      if (_this4.hasInput) {\n        _this4.$refs.input.focus();\n      } else if (_this4.focusOn === 'cancel' && _this4.showCancel) {\n        _this4.$refs.cancelButton.$el.focus();\n      } else {\n        _this4.$refs.confirmButton.$el.focus();\n      }\n    });\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('transition', {\n    attrs: {\n      \"name\": _vm.animation\n    }\n  }, [_vm.isActive ? _c('div', {\n    directives: [{\n      name: \"trap-focus\",\n      rawName: \"v-trap-focus\",\n      value: _vm.trapFocus,\n      expression: \"trapFocus\"\n    }],\n    staticClass: \"dialog modal is-active\",\n    \"class\": _vm.dialogClass,\n    attrs: {\n      \"role\": _vm.ariaRole,\n      \"aria-modal\": _vm.ariaModal\n    }\n  }, [_c('div', {\n    staticClass: \"modal-background\",\n    on: {\n      \"click\": function click($event) {\n        return _vm.cancel('outside');\n      }\n    }\n  }), _c('div', {\n    staticClass: \"modal-card animation-content\"\n  }, [_vm.title ? _c('header', {\n    staticClass: \"modal-card-head\"\n  }, [_c('p', {\n    staticClass: \"modal-card-title\"\n  }, [_vm._v(_vm._s(_vm.title))])]) : _vm._e(), _c('section', {\n    staticClass: \"modal-card-body\",\n    \"class\": {\n      'is-titleless': !_vm.title,\n      'is-flex': _vm.hasIcon\n    }\n  }, [_c('div', {\n    staticClass: \"media\"\n  }, [_vm.hasIcon && (_vm.icon || _vm.iconByType) ? _c('div', {\n    staticClass: \"media-left\"\n  }, [_c('b-icon', {\n    attrs: {\n      \"icon\": _vm.icon ? _vm.icon : _vm.iconByType,\n      \"pack\": _vm.iconPack,\n      \"type\": _vm.type,\n      \"both\": !_vm.icon,\n      \"size\": \"is-large\"\n    }\n  })], 1) : _vm._e(), _c('div', {\n    staticClass: \"media-content\"\n  }, [_c('p', [_vm.$slots[\"default\"] ? [_vm._t(\"default\")] : [_c('div', {\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.message)\n    }\n  })]], 2), _vm.hasInput ? _c('div', {\n    staticClass: \"field\"\n  }, [_c('div', {\n    staticClass: \"control\"\n  }, [_vm.inputAttrs.type === 'checkbox' ? _c('input', _vm._b({\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.prompt,\n      expression: \"prompt\"\n    }],\n    ref: \"input\",\n    staticClass: \"input\",\n    \"class\": {\n      'is-danger': _vm.validationMessage\n    },\n    attrs: {\n      \"type\": \"checkbox\"\n    },\n    domProps: {\n      \"checked\": Array.isArray(_vm.prompt) ? _vm._i(_vm.prompt, null) > -1 : _vm.prompt\n    },\n    on: {\n      \"compositionstart\": function compositionstart($event) {\n        _vm.isCompositing = true;\n      },\n      \"compositionend\": function compositionend($event) {\n        _vm.isCompositing = false;\n      },\n      \"keydown\": function keydown($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) {\n          return null;\n        }\n\n        return _vm.confirm($event);\n      },\n      \"change\": function change($event) {\n        var $$a = _vm.prompt,\n            $$el = $event.target,\n            $$c = $$el.checked ? true : false;\n\n        if (Array.isArray($$a)) {\n          var $$v = null,\n              $$i = _vm._i($$a, $$v);\n\n          if ($$el.checked) {\n            $$i < 0 && (_vm.prompt = $$a.concat([$$v]));\n          } else {\n            $$i > -1 && (_vm.prompt = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));\n          }\n        } else {\n          _vm.prompt = $$c;\n        }\n      }\n    }\n  }, 'input', _vm.inputAttrs, false)) : _vm.inputAttrs.type === 'radio' ? _c('input', _vm._b({\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.prompt,\n      expression: \"prompt\"\n    }],\n    ref: \"input\",\n    staticClass: \"input\",\n    \"class\": {\n      'is-danger': _vm.validationMessage\n    },\n    attrs: {\n      \"type\": \"radio\"\n    },\n    domProps: {\n      \"checked\": _vm._q(_vm.prompt, null)\n    },\n    on: {\n      \"compositionstart\": function compositionstart($event) {\n        _vm.isCompositing = true;\n      },\n      \"compositionend\": function compositionend($event) {\n        _vm.isCompositing = false;\n      },\n      \"keydown\": function keydown($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) {\n          return null;\n        }\n\n        return _vm.confirm($event);\n      },\n      \"change\": function change($event) {\n        _vm.prompt = null;\n      }\n    }\n  }, 'input', _vm.inputAttrs, false)) : _c('input', _vm._b({\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.prompt,\n      expression: \"prompt\"\n    }],\n    ref: \"input\",\n    staticClass: \"input\",\n    \"class\": {\n      'is-danger': _vm.validationMessage\n    },\n    attrs: {\n      \"type\": _vm.inputAttrs.type\n    },\n    domProps: {\n      \"value\": _vm.prompt\n    },\n    on: {\n      \"compositionstart\": function compositionstart($event) {\n        _vm.isCompositing = true;\n      },\n      \"compositionend\": function compositionend($event) {\n        _vm.isCompositing = false;\n      },\n      \"keydown\": function keydown($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) {\n          return null;\n        }\n\n        return _vm.confirm($event);\n      },\n      \"input\": function input($event) {\n        if ($event.target.composing) {\n          return;\n        }\n\n        _vm.prompt = $event.target.value;\n      }\n    }\n  }, 'input', _vm.inputAttrs, false))]), _c('p', {\n    staticClass: \"help is-danger\"\n  }, [_vm._v(_vm._s(_vm.validationMessage))])]) : _vm._e()])])]), _c('footer', {\n    staticClass: \"modal-card-foot\"\n  }, [_vm.showCancel ? _c('b-button', {\n    ref: \"cancelButton\",\n    on: {\n      \"click\": function click($event) {\n        return _vm.cancel('button');\n      }\n    }\n  }, [_vm._v(_vm._s(_vm.cancelText))]) : _vm._e(), _c('b-button', {\n    ref: \"confirmButton\",\n    attrs: {\n      \"type\": _vm.type\n    },\n    on: {\n      \"click\": _vm.confirm\n    }\n  }, [_vm._v(_vm._s(_vm.confirmText))])], 1)])]) : _vm._e()]);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Dialog = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar localVueInstance;\n\nfunction open(propsData) {\n  var slot;\n\n  if (Array.isArray(propsData.message)) {\n    slot = propsData.message;\n    delete propsData.message;\n  }\n\n  var vm = typeof window !== 'undefined' && window.Vue ? window.Vue : localVueInstance || VueInstance;\n  var DialogComponent = vm.extend(Dialog);\n  var component = new DialogComponent({\n    el: document.createElement('div'),\n    propsData: propsData\n  });\n\n  if (slot) {\n    component.$slots[\"default\"] = slot;\n    component.$forceUpdate();\n  }\n\n  if (!config.defaultProgrammaticPromise) {\n    return component;\n  } else {\n    return new Promise(function (resolve) {\n      component.$on('confirm', function (event) {\n        return resolve({\n          result: event || true,\n          dialog: component\n        });\n      });\n      component.$on('cancel', function () {\n        return resolve({\n          result: false,\n          dialog: component\n        });\n      });\n    });\n  }\n}\n\nvar DialogProgrammatic = {\n  alert: function alert(params) {\n    if (typeof params === 'string') {\n      params = {\n        message: params\n      };\n    }\n\n    var defaultParam = {\n      canCancel: false\n    };\n    var propsData = merge(defaultParam, params);\n    return open(propsData);\n  },\n  confirm: function confirm(params) {\n    var defaultParam = {};\n    var propsData = merge(defaultParam, params);\n    return open(propsData);\n  },\n  prompt: function prompt(params) {\n    var defaultParam = {\n      hasInput: true\n    };\n    var propsData = merge(defaultParam, params);\n    return open(propsData);\n  }\n};\nvar Plugin = {\n  install: function install(Vue) {\n    localVueInstance = Vue;\n    registerComponent(Vue, Dialog);\n    registerComponentProgrammatic(Vue, 'dialog', DialogProgrammatic);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Dialog as BDialog, DialogProgrammatic };","map":null,"metadata":{},"sourceType":"module"}