{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport axios from \"axios\";\nimport IndexGoods from \"./index_good.vue\";\nimport EditGood from \"./edit_good.vue\";\nimport NewConditionGood from \"../condition_good/new_condition_good.vue\";\nimport moment from \"moment\";\nexport default {\n  name: \"show_good\",\n  components: {\n    \"index-good\": IndexGoods,\n    NewConditionGood: NewConditionGood,\n    EditGood: EditGood\n  },\n  props: [\"goodId\", \"id\", 'queryType', 'modalHeader'],\n  data: function data() {\n    return {\n      good: null,\n      null_activegood: 0,\n      des_activegood: 1,\n      selected: null,\n      auxdatebuy: [],\n      auxdatedesign: [],\n      canCancel: [\"escape\"],\n      isModalnewstatus: false,\n      props: [\"id\"]\n    };\n  },\n  methods: {\n    getgoods: function getgoods() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(\"/goods/\" + _this.goodId + \".json\");\n\n              case 2:\n                response = _context.sent;\n                _this.good = response.data; //this.auxdate=  JSON.stringify(moment(this.good[\"date_release\"], [\"YYYY-MM-DD\",\"DD-MM-YYYY\"]));\n\n                _this.auxdatebuy = _this.formatdate(_this.good.date_release);\n                _this.auxdatedesign = _this.formatdate(_this.good.date_purchase);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    Clickeditgood: function Clickeditgood(item) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                response = window.location.href = \"/goods/\" + item + \"/edit\";\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    createConditionGood: function createConditionGood(item) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this2.selected = item;\n                _this2.isModalnewstatus = true;\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    closeModalCreateStatus: function closeModalCreateStatus() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this3.isModalnewstatus = false;\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    formatdate: function formatdate(date) {\n      if (date != null && date != \"\" && date != undefined) {\n        var arreglo = date.split(\"-\");\n        return arreglo[2] + \"-\" + arreglo[1] + \"-\" + arreglo[0];\n      } else {\n        return \"\";\n      }\n    }\n  },\n  created: function created() {\n    this.getgoods();\n    console.log(this.cargoActivo);\n  }\n};","map":{"version":3,"mappings":"+CAkRA,oJ;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;EACAA,iBADA;EAEAC;IACA,cACAC,UAFA;IAGAC,kCAHA;IAIAC;EAJA,CAFA;EASAC,mDATA;EAWAC,IAXA,kBAWA;IACA;MACAC,UADA;MAEAC,kBAFA;MAGAC,iBAHA;MAIAC,cAJA;MAKAC,cALA;MAMAC,iBANA;MAOAC,qBAPA;MAQAC,uBARA;MASAT;IATA;EAWA,CAvBA;EAwBAU;IACAC,QADA,sBACA;MAAA;;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACAC,6CADA;;cAAA;gBACAC,QADA;gBAEA,2BAFA,CAGA;;gBACA;gBACA;;cALA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAQA,CATA;IAWAC,aAXA,yBAWAC,IAXA,EAWA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACAF,QADA,GACAG,iDADA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA,CAbA;IAgBAC,mBAhBA,+BAgBAF,IAhBA,EAgBA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;gBACA;gBAEA;;cAHA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAIA,CApBA;IAsBAG,sBAtBA,oCAsBA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;gBACA;;cADA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA,CAxBA;IA0BAC,UA1BA,sBA0BAC,IA1BA,EA0BA;MACA;QACA;QACA;MACA,CAHA,MAIA;QACA;MACA;IACA;EAlCA,CAxBA;EA6DAC,OA7DA,qBA6DA;IACA;IACAC;EACA;AAhEA","names":["name","components","IndexGoods","NewConditionGood","EditGood","props","data","good","null_activegood","des_activegood","selected","auxdatebuy","auxdatedesign","canCancel","isModalnewstatus","methods","getgoods","axios","response","Clickeditgood","item","window","createConditionGood","closeModalCreateStatus","formatdate","date","created","console"],"sourceRoot":"app/javascript/components/good","sources":["show_my_good.vue"],"sourcesContent":["<template>\n    <section>\n  \n      <div\n        class=\"box\" style=\"margin-top: 60px; margin-left: 300px; margin-right: 300px\"\n      >\n  \n  \n      \n  \n  \n          <b-modal :active=\"isModalnewstatus\" aria-modal has-modal-card :destroy-on-hide=\"true\" aria-role=\"dialog\"\n                 width=\"100%\" :can-cancel=\"canCancel\">\n            <template>\n              <new-condition-good :good-id=\"goodId\" :id=\"selected\" :modal-header=\"'Reportar Bien'\" query-type=\"create\"\n                @close=\"closeModalCreateStatus\"></new-condition-good>\n            </template>\n          </b-modal>\n  \n  \n  \n  \n  \n  \n          <div v-if=\"good\" class=\"columns is-centered\">\n            <div class=\"column is-centered\">\n  \n                    <div class=\"columns\">\n          <div class=\"column\">\n            <h1>Detalle del Bien</h1>\n          </div>\n         \n\n                 <div\n            class=\"has-text-right\"\n            style=\"margin-top: 60px; margin-left: 3px; margin-right: 3px\"\n            :hidden=\"good.activegood == 0  || good.activegood == 2\"\n          >\n            <b-button\n              label=\"Dar de baja Bien\"\n              type=\"is-info\"\n              icon-left=\"pen-to-square\"\n              :disabled=\"good.activegood == 0\"\n              @click=\"createConditionGood(goodId)\"\n            />\n          </div>\n  \n\n  \n        </div>\n              <div class=\"columns\">\n                <div class=\"column\">\n                  <b-field label=\"Nombre:\">\n                    <b-input\n                      v-model=\"good.namegood\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n  \n                <div class=\"column\">\n                  <b-field label=\"Marca:\">\n                    <b-input\n                      v-model=\"good.trademark\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n              </div>\n      \n              <div class=\"columns\">\n                <div class=\"column\">\n                  <b-field label=\"Numero identificación Usach:\">\n                    <b-input\n                      v-model=\"good.identification_number_usach\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n                <div class=\"column\">\n                  <b-field label=\"Numero de serie: \">\n                    <b-input\n                      v-model=\"good.serie_number\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n              </div>\n  \n              <div class=\"columns\">\n                <div class=\"column\">\n                  <b-field label=\"Numero interno:\">\n                    <b-input\n                      v-model=\"good.internal_number\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n                <div class=\"column\">\n                  <b-field label=\"Numero identificación:\">\n                    <b-input\n                      v-model=\"good.identification_number_good\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n              </div>\n  \n                          <div class=\"columns\">\n                <div class=\"column\">\n                  <b-field label=\"Monto Bruto: \">\n                    <b-input\n                      v-model=\"good.amount\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n  \n                <div class=\"column\">\n                  <b-field label=\"Fecha de compra:\"> \n                    <b-input\n                      v-model=\"auxdatebuy\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n              </div>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n                          <div class=\"columns\">\n                <div class=\"column\">\n                  <b-field label=\"Fuente de Financiamiento: \">\n                   <b-input\n                  \n                      v-model=\"good.financial_source.name_financial_source\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n  \n                              <div class=\"column\">\n                  <b-field label=\"Tipo de inversión: \">\n                   <b-input\n                      v-model=\"good.investment_type.name_investment_type\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n              </div>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n              <div class=\"columns\" v-show='!(good.activegood == 2)'>\n                <div class=\"column\">\n                  <b-field label=\"Fecha de asignación: \"> \n                    <b-input\n                      v-model=\"auxdatedesign\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n  \n                <div class=\"column\">\n                  <b-field label=\"Persona encargada: \">\n                    <b-input\n                      v-model=\"good.duty_manager.name_duty_manager\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n              </div>\n  \n              <div class=\"columns\" v-show='!(good.activegood == 2)'>\n                <div class=\"column\">\n                  <b-field label=\"Unidad: \">\n                    <b-input\n                      v-model=\"good.duty_manager.name_unit\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n  \n                <div class=\"column\">\n                  <b-field label=\"Edificio: \">\n                    <b-input\n                      v-model=\"good.office.name_building\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n              </div>\n              <div class=\"columns\" v-show='!(good.activegood == 2)'>\n                <div class=\"column\">\n                  <b-field label=\"Dependencia: \">\n                    <b-input\n                      v-model=\"good.office.name_office\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n  \n                <div class=\"column\">\n                  <b-field label=\"Ubicación: \">\n                    <b-input\n                      v-model=\"good.location_good\"\n                      type=\"text\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n              </div>\n              <div class=\"columns\">\n                <div class=\"column\">\n                  <b-field label=\"Descripción:\">\n                    <b-input\n                      v-model=\"good.good_description\"\n                      type=\"textarea\"\n                      readonly\n                    ></b-input>\n                  </b-field>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div v-else>\n            <p>Loading</p>\n          </div>\n      </div>\n      <a href=\"/goods\"   style= \"font-weight: normal;\n    font-size: 20px;\n    font-family: Arial;\n    margin: 10px;\n    margin-left: 30px;\">Volver</a>\n    </section>\n  </template>\n  \n   \n  <script>\n  import axios from \"axios\";\n  import IndexGoods from \"./index_good.vue\";\n  import EditGood from \"./edit_good.vue\";\n  import NewConditionGood from \"../condition_good/new_condition_good.vue\"; \n  import moment from \"moment\";\n  \n  export default {\n    name:\"show_good\",\n    components: {\n      \"index-good\": \n      IndexGoods,\n      NewConditionGood,\n      EditGood,\n\n    },\n    props: [\"goodId\", \"id\",'queryType', 'modalHeader',],\n    \n    data() {\n      return {\n        good: null,\n        null_activegood: 0,\n         des_activegood: 1,\n        selected: null,\n        auxdatebuy: [],\n        auxdatedesign: [], \n        canCancel: [\"escape\"],\n        isModalnewstatus: false,\n        props: [\"id\"],\n      };\n    },\n    methods: {\n      async getgoods() {\n        const response = await axios.get(\"/goods/\" + this.goodId + \".json\");\n        this.good = response.data;\n        //this.auxdate=  JSON.stringify(moment(this.good[\"date_release\"], [\"YYYY-MM-DD\",\"DD-MM-YYYY\"]));\n        this.auxdatebuy= this.formatdate(this.good.date_release)\n        this.auxdatedesign= this.formatdate(this.good.date_purchase)\n  \n  \n      },\n\n      async Clickeditgood(item) {\n        const response = (window.location.href = \"/goods/\" + item + \"/edit\");\n      },\n\n  \n      async createConditionGood(item) {\n        this.selected = item;\n        \n        this.isModalnewstatus = true;\n      },\n  \n      async closeModalCreateStatus() {\n        this.isModalnewstatus = false;\n      },\n  \n      formatdate(date){\n        if(date!=null && date!=\"\" && date!=undefined){\n          var arreglo = date.split(\"-\")\n          return arreglo[2]+\"-\"+arreglo[1]+\"-\"+arreglo[0]\n        }\n        else{ \n          return \"\"\n          }\n        },\n  \n    },\n    created() {\n      this.getgoods();\n      console.log(this.cargoActivo);\n    },\n  };\n  </script>\n  \n  \n  \n  \n  "]},"metadata":{},"sourceType":"module"}