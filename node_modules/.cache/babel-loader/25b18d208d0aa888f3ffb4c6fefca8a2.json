{"ast":null,"code":"import { _ as _defineProperty } from './chunk-1fafdf15.js';\nimport { bound } from './helpers.js';\nimport { I as Icon } from './chunk-7fd02ffe.js';\nimport { P as ProviderParentMixin, S as Sorted, I as InjectedChildMixin, a as Sorted$1 } from './chunk-1297c2c9.js';\nimport { S as SlotComponent } from './chunk-e36a4f2c.js';\n\nvar TabbedMixin = function TabbedMixin(cmp) {\n  var _components;\n\n  return {\n    mixins: [ProviderParentMixin(cmp, Sorted)],\n    components: (_components = {}, _defineProperty(_components, Icon.name, Icon), _defineProperty(_components, SlotComponent.name, SlotComponent), _components),\n    props: {\n      value: {\n        type: [String, Number],\n        \"default\": undefined\n      },\n      size: String,\n      animated: {\n        type: Boolean,\n        \"default\": true\n      },\n      animation: String,\n      animateInitially: Boolean,\n      vertical: {\n        type: Boolean,\n        \"default\": false\n      },\n      position: String,\n      destroyOnHide: {\n        type: Boolean,\n        \"default\": false\n      }\n    },\n    data: function data() {\n      return {\n        activeId: this.value,\n        // Internal state\n        defaultSlots: [],\n        contentHeight: 0,\n        isTransitioning: false\n      };\n    },\n    mounted: function mounted() {\n      if (typeof this.value === 'number') {\n        // Backward compatibility: converts the index value to an id\n        var value = bound(this.value, 0, this.items.length - 1);\n        this.activeId = this.items[value].value;\n      } else {\n        this.activeId = this.value;\n      }\n    },\n    computed: {\n      activeItem: function activeItem() {\n        var _this = this;\n\n        return this.activeId === undefined ? this.items[0] : this.activeId === null ? null : this.childItems.find(function (i) {\n          return i.value === _this.activeId;\n        });\n      },\n      items: function items() {\n        return this.sortedItems;\n      }\n    },\n    watch: {\n      /**\r\n       * When v-model is changed set the new active tab.\r\n       */\n      value: function value(_value) {\n        if (typeof _value === 'number') {\n          // Backward compatibility: converts the index value to an id\n          _value = bound(_value, 0, this.items.length - 1);\n          this.activeId = this.items[_value].value;\n        } else {\n          this.activeId = _value;\n        }\n      },\n\n      /**\r\n       * Sync internal state with external state\r\n       */\n      activeId: function activeId(val, oldValue) {\n        var oldTab = oldValue !== undefined && oldValue !== null ? this.childItems.find(function (i) {\n          return i.value === oldValue;\n        }) : null;\n\n        if (oldTab && this.activeItem) {\n          oldTab.deactivate(this.activeItem.index);\n          this.activeItem.activate(oldTab.index);\n        }\n\n        val = this.activeItem ? typeof this.value === 'number' ? this.items.indexOf(this.activeItem) : this.activeItem.value : undefined;\n\n        if (val !== this.value) {\n          this.$emit('input', val);\n        }\n      }\n    },\n    methods: {\n      /**\r\n      * Child click listener, emit input event and change active child.\r\n      */\n      childClick: function childClick(child) {\n        this.activeId = child.value;\n      },\n      getNextItemIdx: function getNextItemIdx(fromIdx) {\n        var skipDisabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var nextItemIdx = null;\n        var idx = fromIdx + 1;\n\n        for (; idx < this.items.length; idx++) {\n          var item = this.items[idx];\n\n          if (item.visible && (!skipDisabled || skipDisabled && !item.disabled)) {\n            nextItemIdx = idx;\n            break;\n          }\n        }\n\n        return nextItemIdx;\n      },\n      getPrevItemIdx: function getPrevItemIdx(fromIdx) {\n        var skipDisabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var prevItemIdx = null;\n\n        for (var idx = fromIdx - 1; idx >= 0; idx--) {\n          var item = this.items[idx];\n\n          if (item.visible && (!skipDisabled || skipDisabled && !item.disabled)) {\n            prevItemIdx = idx;\n            break;\n          }\n        }\n\n        return prevItemIdx;\n      }\n    }\n  };\n};\n\nvar TabbedChildMixin = function TabbedChildMixin(parentCmp) {\n  return {\n    mixins: [InjectedChildMixin(parentCmp, Sorted$1)],\n    props: {\n      label: String,\n      icon: String,\n      iconPack: String,\n      visible: {\n        type: Boolean,\n        \"default\": true\n      },\n      value: {\n        type: String,\n        \"default\": function _default() {\n          return this._uid.toString();\n        }\n      },\n      headerClass: {\n        type: [String, Array, Object],\n        \"default\": null\n      }\n    },\n    data: function data() {\n      return {\n        transitionName: null,\n        elementClass: 'item',\n        elementRole: null\n      };\n    },\n    computed: {\n      isActive: function isActive() {\n        return this.parent.activeItem === this;\n      }\n    },\n    methods: {\n      /**\r\n       * Activate element, alter animation name based on the index.\r\n       */\n      activate: function activate(oldIndex) {\n        this.transitionName = this.index < oldIndex ? this.parent.vertical ? 'slide-down' : 'slide-next' : this.parent.vertical ? 'slide-up' : 'slide-prev';\n      },\n\n      /**\r\n       * Deactivate element, alter animation name based on the index.\r\n       */\n      deactivate: function deactivate(newIndex) {\n        this.transitionName = newIndex < this.index ? this.parent.vertical ? 'slide-down' : 'slide-next' : this.parent.vertical ? 'slide-up' : 'slide-prev';\n      }\n    },\n    render: function render(createElement) {\n      var _this = this; // if destroy apply v-if\n\n\n      if (this.parent.destroyOnHide) {\n        if (!this.isActive || !this.visible) {\n          return;\n        }\n      }\n\n      var vnode = createElement('div', {\n        directives: [{\n          name: 'show',\n          value: this.isActive && this.visible\n        }],\n        attrs: {\n          'class': this.elementClass,\n          'role': this.elementRole,\n          'id': \"\".concat(this.value, \"-content\"),\n          'aria-labelledby': this.elementRole ? \"\".concat(this.value, \"-label\") : null,\n          'tabindex': this.isActive ? 0 : -1\n        }\n      }, this.$slots[\"default\"]); // check animated prop\n\n      if (this.parent.animated) {\n        return createElement('transition', {\n          props: {\n            'name': this.parent.animation || this.transitionName,\n            'appear': this.parent.animateInitially === true || undefined\n          },\n          on: {\n            'before-enter': function beforeEnter() {\n              _this.parent.isTransitioning = true;\n            },\n            'after-enter': function afterEnter() {\n              _this.parent.isTransitioning = false;\n            }\n          }\n        }, [vnode]);\n      }\n\n      return vnode;\n    }\n  };\n};\n\nexport { TabbedMixin as T, TabbedChildMixin as a };","map":null,"metadata":{},"sourceType":"module"}