{"ast":null,"code":"import { c as _toArray } from './chunk-1fafdf15.js';\nimport { merge } from './helpers.js';\nimport { c as config } from './chunk-652f2dad.js';\nimport { _ as __vue_normalize__ } from './chunk-cca88db8.js';\nvar mdiIcons = {\n  sizes: {\n    'default': 'mdi-24px',\n    'is-small': null,\n    'is-medium': 'mdi-36px',\n    'is-large': 'mdi-48px'\n  },\n  iconPrefix: 'mdi-'\n};\n\nvar faIcons = function faIcons() {\n  var faIconPrefix = config && config.defaultIconComponent ? '' : 'fa-';\n  return {\n    sizes: {\n      'default': null,\n      'is-small': null,\n      'is-medium': faIconPrefix + 'lg',\n      'is-large': faIconPrefix + '2x'\n    },\n    iconPrefix: faIconPrefix,\n    internalIcons: {\n      'information': 'info-circle',\n      'alert': 'exclamation-triangle',\n      'alert-circle': 'exclamation-circle',\n      'chevron-right': 'angle-right',\n      'chevron-left': 'angle-left',\n      'chevron-down': 'angle-down',\n      'eye-off': 'eye-slash',\n      'menu-down': 'caret-down',\n      'menu-up': 'caret-up',\n      'close-circle': 'times-circle'\n    }\n  };\n};\n\nvar getIcons = function getIcons() {\n  var icons = {\n    mdi: mdiIcons,\n    fa: faIcons(),\n    fas: faIcons(),\n    far: faIcons(),\n    fad: faIcons(),\n    fab: faIcons(),\n    fal: faIcons()\n  };\n\n  if (config && config.customIconPacks) {\n    icons = merge(icons, config.customIconPacks, true);\n  }\n\n  return icons;\n};\n\nvar script = {\n  name: 'BIcon',\n  props: {\n    type: [String, Object],\n    component: String,\n    pack: String,\n    icon: String,\n    size: String,\n    customSize: String,\n    customClass: String,\n    both: Boolean // This is used internally to show both MDI and FA icon\n\n  },\n  computed: {\n    iconConfig: function iconConfig() {\n      var allIcons = getIcons();\n      return allIcons[this.newPack];\n    },\n    iconPrefix: function iconPrefix() {\n      if (this.iconConfig && this.iconConfig.iconPrefix) {\n        return this.iconConfig.iconPrefix;\n      }\n\n      return '';\n    },\n\n    /**\r\n    * Internal icon name based on the pack.\r\n    * If pack is 'fa', gets the equivalent FA icon name of the MDI,\r\n    * internal icons are always MDI.\r\n    */\n    newIcon: function newIcon() {\n      return \"\".concat(this.iconPrefix).concat(this.getEquivalentIconOf(this.icon));\n    },\n    newPack: function newPack() {\n      return this.pack || config.defaultIconPack;\n    },\n    newType: function newType() {\n      if (!this.type) return;\n      var splitType = [];\n\n      if (typeof this.type === 'string') {\n        splitType = this.type.split('-');\n      } else {\n        for (var key in this.type) {\n          if (this.type[key]) {\n            splitType = key.split('-');\n            break;\n          }\n        }\n      }\n\n      if (splitType.length <= 1) return;\n\n      var _splitType = splitType,\n          _splitType2 = _toArray(_splitType),\n          type = _splitType2.slice(1);\n\n      return \"has-text-\".concat(type.join('-'));\n    },\n    newCustomSize: function newCustomSize() {\n      return this.customSize || this.customSizeByPack;\n    },\n    customSizeByPack: function customSizeByPack() {\n      if (this.iconConfig && this.iconConfig.sizes) {\n        if (this.size && this.iconConfig.sizes[this.size] !== undefined) {\n          return this.iconConfig.sizes[this.size];\n        } else if (this.iconConfig.sizes[\"default\"]) {\n          return this.iconConfig.sizes[\"default\"];\n        }\n      }\n\n      return null;\n    },\n    useIconComponent: function useIconComponent() {\n      return this.component || config.defaultIconComponent;\n    }\n  },\n  methods: {\n    /**\r\n    * Equivalent icon name of the MDI.\r\n    */\n    getEquivalentIconOf: function getEquivalentIconOf(value) {\n      // Only transform the class if the both prop is set to true\n      if (!this.both) {\n        return value;\n      }\n\n      if (this.iconConfig && this.iconConfig.internalIcons && this.iconConfig.internalIcons[value]) {\n        return this.iconConfig.internalIcons[value];\n      }\n\n      return value;\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('span', {\n    staticClass: \"icon\",\n    \"class\": [_vm.newType, _vm.size]\n  }, [!_vm.useIconComponent ? _c('i', {\n    \"class\": [_vm.newPack, _vm.newIcon, _vm.newCustomSize, _vm.customClass]\n  }) : _c(_vm.useIconComponent, {\n    tag: \"component\",\n    \"class\": [_vm.customClass],\n    attrs: {\n      \"icon\": [_vm.newPack, _vm.newIcon],\n      \"size\": _vm.newCustomSize\n    }\n  })], 1);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Icon = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nexport { Icon as I };","map":null,"metadata":{},"sourceType":"module"}