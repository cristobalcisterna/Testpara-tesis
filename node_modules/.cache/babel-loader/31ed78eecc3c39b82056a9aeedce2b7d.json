{"ast":null,"code":"import { b as _typeof } from './chunk-455cdeae.js';\nimport { createAbsoluteElement, removeElement } from './helpers.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport { _ as __vue_normalize__ } from './chunk-cca88db8.js';\nvar script = {\n  name: 'BTooltip',\n  props: {\n    active: {\n      type: Boolean,\n      \"default\": true\n    },\n    type: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultTooltipType;\n      }\n    },\n    label: String,\n    delay: {\n      type: Number,\n      \"default\": function _default() {\n        return config.defaultTooltipDelay;\n      }\n    },\n    closeDelay: {\n      type: Number,\n      \"default\": function _default() {\n        return config.defaultTooltipCloseDelay;\n      }\n    },\n    position: {\n      type: String,\n      \"default\": 'is-top',\n      validator: function validator(value) {\n        return ['is-top', 'is-bottom', 'is-left', 'is-right'].indexOf(value) > -1;\n      }\n    },\n    triggers: {\n      type: Array,\n      \"default\": function _default() {\n        return ['hover'];\n      }\n    },\n    always: Boolean,\n    square: Boolean,\n    dashed: Boolean,\n    multilined: Boolean,\n    size: {\n      type: String,\n      \"default\": 'is-medium'\n    },\n    appendToBody: Boolean,\n    animated: {\n      type: Boolean,\n      \"default\": true\n    },\n    animation: {\n      type: String,\n      \"default\": 'fade'\n    },\n    contentClass: String,\n    autoClose: {\n      type: [Array, Boolean],\n      \"default\": true\n    }\n  },\n  data: function data() {\n    return {\n      isActive: false,\n      triggerStyle: {},\n      timer: null,\n      _bodyEl: undefined // Used to append to body\n\n    };\n  },\n  computed: {\n    rootClasses: function rootClasses() {\n      return ['b-tooltip', this.type, this.position, this.size, {\n        'is-square': this.square,\n        'is-always': this.always,\n        'is-multiline': this.multilined,\n        'is-dashed': this.dashed\n      }];\n    },\n    newAnimation: function newAnimation() {\n      return this.animated ? this.animation : undefined;\n    }\n  },\n  watch: {\n    isActive: function isActive() {\n      this.$emit(this.isActive ? 'open' : 'close');\n\n      if (this.appendToBody) {\n        this.updateAppendToBody();\n      }\n    }\n  },\n  methods: {\n    updateAppendToBody: function updateAppendToBody() {\n      var tooltip = this.$refs.tooltip;\n      var trigger = this.$refs.trigger;\n\n      if (tooltip && trigger) {\n        // update wrapper tooltip\n        var tooltipEl = this.$data._bodyEl.children[0];\n        tooltipEl.classList.forEach(function (item) {\n          return tooltipEl.classList.remove(item);\n        });\n\n        if (this.$vnode && this.$vnode.data && this.$vnode.data.staticClass) {\n          tooltipEl.classList.add(this.$vnode.data.staticClass);\n        }\n\n        this.rootClasses.forEach(function (item) {\n          if (_typeof(item) === 'object') {\n            for (var key in item) {\n              if (item[key]) {\n                tooltipEl.classList.add(key);\n              }\n            }\n          } else {\n            tooltipEl.classList.add(item);\n          }\n        });\n        var rect = trigger.getBoundingClientRect();\n        var top = rect.top + window.scrollY;\n        var left = rect.left + window.scrollX;\n        var quaterHeight = trigger.clientHeight / 2 / 2;\n\n        switch (this.position) {\n          case 'is-top':\n            tooltipEl.style.width = \"\".concat(trigger.clientWidth, \"px\");\n            tooltipEl.style.height = \"0px\";\n            top -= trigger.clientHeight - quaterHeight;\n            break;\n\n          case 'is-bottom':\n            tooltipEl.style.width = \"\".concat(trigger.clientWidth, \"px\");\n            tooltipEl.style.height = \"0px\";\n            top += quaterHeight;\n            break;\n\n          case 'is-left':\n            tooltipEl.style.width = \"0px\";\n            tooltipEl.style.height = \"\".concat(trigger.clientHeight, \"px\");\n            break;\n\n          case 'is-right':\n            tooltipEl.style.width = \"0px\";\n            tooltipEl.style.height = \"\".concat(trigger.clientHeight, \"px\");\n            left += trigger.clientWidth;\n            break;\n        }\n\n        var wrapper = this.$data._bodyEl;\n        wrapper.style.position = 'absolute';\n        wrapper.style.top = \"\".concat(top, \"px\");\n        wrapper.style.left = \"\".concat(left, \"px\");\n        wrapper.style.width = \"0px\";\n        wrapper.style.zIndex = this.isActive || this.always ? '99' : '-1';\n        this.triggerStyle = {\n          zIndex: this.isActive || this.always ? '100' : undefined\n        };\n      }\n    },\n    onClick: function onClick() {\n      var _this = this;\n\n      if (this.triggers.indexOf('click') < 0) return; // if not active, toggle after clickOutside event\n      // this fixes toggling programmatic\n\n      this.$nextTick(function () {\n        setTimeout(function () {\n          return _this.open();\n        });\n      });\n    },\n    onHover: function onHover() {\n      if (this.triggers.indexOf('hover') < 0) return;\n      this.open();\n    },\n    onContextMenu: function onContextMenu(e) {\n      if (this.triggers.indexOf('contextmenu') < 0) return;\n      e.preventDefault();\n      this.open();\n    },\n    onFocus: function onFocus() {\n      if (this.triggers.indexOf('focus') < 0) return;\n      this.open();\n    },\n    open: function open() {\n      var _this2 = this;\n\n      if (this.delay) {\n        this.timer = setTimeout(function () {\n          _this2.isActive = true;\n          _this2.timer = null;\n        }, this.delay);\n      } else {\n        this.isActive = true;\n      }\n    },\n    close: function close() {\n      var _this3 = this;\n\n      if (typeof this.autoClose === 'boolean') {\n        if (this.autoClose && this.timer) clearTimeout(this.timer);\n\n        if (this.closeDelay) {\n          this.timer = setTimeout(function () {\n            _this3.isActive = !_this3.autoClose;\n            _this3.timer = null;\n          }, this.closeDelay);\n        } else {\n          this.isActive = !this.autoClose;\n        }\n      }\n    },\n\n    /**\r\n    * Close tooltip if clicked outside.\r\n    */\n    clickedOutside: function clickedOutside(event) {\n      if (this.isActive) {\n        if (Array.isArray(this.autoClose)) {\n          if (this.autoClose.includes('outside')) {\n            if (!this.isInWhiteList(event.target)) {\n              this.isActive = false;\n              return;\n            }\n          }\n\n          if (this.autoClose.includes('inside')) {\n            if (this.isInWhiteList(event.target)) this.isActive = false;\n          }\n        }\n      }\n    },\n\n    /**\r\n     * Keypress event that is bound to the document\r\n     */\n    keyPress: function keyPress(_ref) {\n      var key = _ref.key;\n\n      if (this.isActive && (key === 'Escape' || key === 'Esc')) {\n        if (Array.isArray(this.autoClose)) {\n          if (this.autoClose.indexOf('escape') >= 0) this.isActive = false;\n        }\n      }\n    },\n\n    /**\r\n    * White-listed items to not close when clicked.\r\n    */\n    isInWhiteList: function isInWhiteList(el) {\n      if (el === this.$refs.content) return true; // All chidren from content\n\n      if (this.$refs.content !== undefined) {\n        var children = this.$refs.content.querySelectorAll('*');\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var child = _step.value;\n\n            if (el === child) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n  },\n  mounted: function mounted() {\n    if (this.appendToBody && typeof window !== 'undefined') {\n      this.$data._bodyEl = createAbsoluteElement(this.$refs.content);\n      this.updateAppendToBody();\n    }\n  },\n  created: function created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('click', this.clickedOutside);\n      document.addEventListener('keyup', this.keyPress);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('click', this.clickedOutside);\n      document.removeEventListener('keyup', this.keyPress);\n    }\n\n    if (this.appendToBody) {\n      removeElement(this.$data._bodyEl);\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    ref: \"tooltip\",\n    \"class\": _vm.rootClasses\n  }, [_c('transition', {\n    attrs: {\n      \"name\": _vm.newAnimation\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.active && (_vm.isActive || _vm.always),\n      expression: \"active && (isActive || always)\"\n    }],\n    ref: \"content\",\n    \"class\": ['tooltip-content', _vm.contentClass]\n  }, [_vm.label ? [_vm._v(_vm._s(_vm.label))] : _vm.$slots.content ? [_vm._t(\"content\")] : _vm._e()], 2)]), _c('div', {\n    ref: \"trigger\",\n    staticClass: \"tooltip-trigger\",\n    style: _vm.triggerStyle,\n    on: {\n      \"click\": _vm.onClick,\n      \"contextmenu\": _vm.onContextMenu,\n      \"mouseenter\": _vm.onHover,\n      \"!focus\": function focus($event) {\n        return _vm.onFocus($event);\n      },\n      \"!blur\": function blur($event) {\n        return _vm.close($event);\n      },\n      \"mouseleave\": _vm.close\n    }\n  }, [_vm._t(\"default\")], 2)], 1);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Tooltip = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nexport { Tooltip as T };","map":null,"metadata":{},"sourceType":"module"}