{"ast":null,"code":"import { removeElement } from './helpers.js';\nimport { c as config } from './chunk-652f2dad.js';\nimport { _ as __vue_normalize__ } from './chunk-cca88db8.js';\nimport { t as trapFocus } from './chunk-42f463e6.js'; //\n\nvar script = {\n  name: 'BModal',\n  directives: {\n    trapFocus: trapFocus\n  },\n  // deprecated, to replace with default 'value' in the next breaking change\n  model: {\n    prop: 'active',\n    event: 'update:active'\n  },\n  props: {\n    active: Boolean,\n    component: [Object, Function, String],\n    content: [String, Array],\n    programmatic: Boolean,\n    props: Object,\n    events: Object,\n    width: {\n      type: [String, Number],\n      \"default\": 960\n    },\n    hasModalCard: Boolean,\n    animation: {\n      type: String,\n      \"default\": 'zoom-out'\n    },\n    canCancel: {\n      type: [Array, Boolean],\n      \"default\": function _default() {\n        return config.defaultModalCanCancel;\n      }\n    },\n    onCancel: {\n      type: Function,\n      \"default\": function _default() {}\n    },\n    scroll: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultModalScroll ? config.defaultModalScroll : 'clip';\n      },\n      validator: function validator(value) {\n        return ['clip', 'keep'].indexOf(value) >= 0;\n      }\n    },\n    fullScreen: Boolean,\n    trapFocus: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultTrapFocus;\n      }\n    },\n    autoFocus: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultAutoFocus;\n      }\n    },\n    customClass: String,\n    ariaRole: {\n      type: String,\n      validator: function validator(value) {\n        return ['dialog', 'alertdialog'].indexOf(value) >= 0;\n      }\n    },\n    ariaModal: Boolean,\n    ariaLabel: {\n      type: String,\n      validator: function validator(value) {\n        return Boolean(value);\n      }\n    },\n    destroyOnHide: {\n      type: Boolean,\n      \"default\": true\n    }\n  },\n  data: function data() {\n    return {\n      isActive: this.active || false,\n      savedScrollTop: null,\n      newWidth: typeof this.width === 'number' ? this.width + 'px' : this.width,\n      animating: !this.active,\n      destroyed: !this.active\n    };\n  },\n  computed: {\n    cancelOptions: function cancelOptions() {\n      return typeof this.canCancel === 'boolean' ? this.canCancel ? config.defaultModalCanCancel : [] : this.canCancel;\n    },\n    showX: function showX() {\n      return this.cancelOptions.indexOf('x') >= 0;\n    },\n    customStyle: function customStyle() {\n      if (!this.fullScreen) {\n        return {\n          maxWidth: this.newWidth\n        };\n      }\n\n      return null;\n    }\n  },\n  watch: {\n    active: function active(value) {\n      this.isActive = value;\n    },\n    isActive: function isActive(value) {\n      var _this = this;\n\n      if (value) this.destroyed = false;\n      this.handleScroll();\n      this.$nextTick(function () {\n        if (value && _this.$el && _this.$el.focus && _this.autoFocus) {\n          _this.$el.focus();\n        }\n      });\n    }\n  },\n  methods: {\n    handleScroll: function handleScroll() {\n      if (typeof window === 'undefined') return;\n\n      if (this.scroll === 'clip') {\n        if (this.isActive) {\n          document.documentElement.classList.add('is-clipped');\n        } else {\n          document.documentElement.classList.remove('is-clipped');\n        }\n\n        return;\n      }\n\n      this.savedScrollTop = !this.savedScrollTop ? document.documentElement.scrollTop : this.savedScrollTop;\n\n      if (this.isActive) {\n        document.body.classList.add('is-noscroll');\n      } else {\n        document.body.classList.remove('is-noscroll');\n      }\n\n      if (this.isActive) {\n        document.body.style.top = \"-\".concat(this.savedScrollTop, \"px\");\n        return;\n      }\n\n      document.documentElement.scrollTop = this.savedScrollTop;\n      document.body.style.top = null;\n      this.savedScrollTop = null;\n    },\n\n    /**\r\n    * Close the Modal if canCancel and call the onCancel prop (function).\r\n    */\n    cancel: function cancel(method) {\n      if (this.cancelOptions.indexOf(method) < 0) return;\n      this.$emit('cancel', arguments);\n      this.onCancel.apply(null, arguments);\n      this.close();\n    },\n\n    /**\r\n    * Call the onCancel prop (function).\r\n    * Emit events, and destroy modal if it's programmatic.\r\n    */\n    close: function close() {\n      var _this2 = this;\n\n      this.$emit('close');\n      this.$emit('update:active', false); // Timeout for the animation complete before destroying\n\n      if (this.programmatic) {\n        this.isActive = false;\n        setTimeout(function () {\n          _this2.$destroy();\n\n          removeElement(_this2.$el);\n        }, 150);\n      }\n    },\n\n    /**\r\n    * Keypress event that is bound to the document.\r\n    */\n    keyPress: function keyPress(_ref) {\n      var key = _ref.key;\n      if (this.isActive && (key === 'Escape' || key === 'Esc')) this.cancel('escape');\n    },\n\n    /**\r\n    * Transition after-enter hook\r\n    */\n    afterEnter: function afterEnter() {\n      this.animating = false;\n      this.$emit('after-enter');\n    },\n\n    /**\r\n    * Transition before-leave hook\r\n    */\n    beforeLeave: function beforeLeave() {\n      this.animating = true;\n    },\n\n    /**\r\n    * Transition after-leave hook\r\n    */\n    afterLeave: function afterLeave() {\n      if (this.destroyOnHide) {\n        this.destroyed = true;\n      }\n\n      this.$emit('after-leave');\n    }\n  },\n  created: function created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('keyup', this.keyPress);\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Insert the Modal component in body tag\n    // only if it's programmatic\n    this.programmatic && document.body.appendChild(this.$el);\n  },\n  mounted: function mounted() {\n    if (this.programmatic) this.isActive = true;else if (this.isActive) this.handleScroll();\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('keyup', this.keyPress); // reset scroll\n\n      document.documentElement.classList.remove('is-clipped');\n      var savedScrollTop = !this.savedScrollTop ? document.documentElement.scrollTop : this.savedScrollTop;\n      document.body.classList.remove('is-noscroll');\n      document.documentElement.scrollTop = savedScrollTop;\n      document.body.style.top = null;\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('transition', {\n    attrs: {\n      \"name\": _vm.animation\n    },\n    on: {\n      \"after-enter\": _vm.afterEnter,\n      \"before-leave\": _vm.beforeLeave,\n      \"after-leave\": _vm.afterLeave\n    }\n  }, [!_vm.destroyed ? _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: _vm.isActive,\n      expression: \"isActive\"\n    }, {\n      name: \"trap-focus\",\n      rawName: \"v-trap-focus\",\n      value: _vm.trapFocus,\n      expression: \"trapFocus\"\n    }],\n    staticClass: \"modal is-active\",\n    \"class\": [{\n      'is-full-screen': _vm.fullScreen\n    }, _vm.customClass],\n    attrs: {\n      \"tabindex\": \"-1\",\n      \"role\": _vm.ariaRole,\n      \"aria-label\": _vm.ariaLabel,\n      \"aria-modal\": _vm.ariaModal\n    }\n  }, [_c('div', {\n    staticClass: \"modal-background\",\n    on: {\n      \"click\": function click($event) {\n        return _vm.cancel('outside');\n      }\n    }\n  }), _c('div', {\n    staticClass: \"animation-content\",\n    \"class\": {\n      'modal-content': !_vm.hasModalCard\n    },\n    style: _vm.customStyle\n  }, [_vm.component ? _c(_vm.component, _vm._g(_vm._b({\n    tag: \"component\",\n    attrs: {\n      \"can-cancel\": _vm.canCancel\n    },\n    on: {\n      \"close\": _vm.close\n    }\n  }, 'component', _vm.props, false), _vm.events)) : _vm.content ? [_c('div', {\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.content)\n    }\n  })] : _vm._t(\"default\", null, {\n    \"canCancel\": _vm.canCancel,\n    \"close\": _vm.close\n  }), _vm.showX ? _c('button', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: !_vm.animating,\n      expression: \"!animating\"\n    }],\n    staticClass: \"modal-close is-large\",\n    attrs: {\n      \"type\": \"button\"\n    },\n    on: {\n      \"click\": function click($event) {\n        return _vm.cancel('x');\n      }\n    }\n  }) : _vm._e()], 2)]) : _vm._e()]);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Modal = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nexport { Modal as M };","map":null,"metadata":{},"sourceType":"module"}