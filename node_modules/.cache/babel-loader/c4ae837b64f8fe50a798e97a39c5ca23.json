{"ast":null,"code":"import { assert, isArray, normalizeFileName } from './utils';\nimport { downloadFile } from './processors';\nimport { _prepareData, _createJSONData, createCSVData, createXLSData, createXMLData, _createFieldsMapper } from './converters';\nimport { exportTypes } from './types';\n\nfunction exportFromJSON(_a) {\n  var data = _a.data,\n      _b = _a.fileName,\n      fileName = _b === void 0 ? 'download' : _b,\n      extension = _a.extension,\n      _c = _a.fileNameFormatter,\n      fileNameFormatter = _c === void 0 ? function (name) {\n    return name.replace(/\\s+/, '_');\n  } : _c,\n      fields = _a.fields,\n      _d = _a.exportType,\n      exportType = _d === void 0 ? 'txt' : _d,\n      _e = _a.replacer,\n      replacer = _e === void 0 ? null : _e,\n      _f = _a.space,\n      space = _f === void 0 ? 4 : _f,\n      _g = _a.processor,\n      processor = _g === void 0 ? downloadFile : _g,\n      _h = _a.withBOM,\n      withBOM = _h === void 0 ? false : _h,\n      _j = _a.beforeTableEncode,\n      beforeTableEncode = _j === void 0 ? function (i) {\n    return i;\n  } : _j;\n  var MESSAGE_IS_ARRAY_FAIL = 'Invalid export data. Please provide an array of objects';\n  var MESSAGE_UNKNOWN_EXPORT_TYPE = \"Can't export unknown data type \".concat(exportType, \".\");\n  var MESSAGE_FIELD_INVALID = \"Can't export string data to \".concat(exportType, \".\");\n\n  if (typeof data === 'string') {\n    switch (exportType) {\n      case 'txt':\n      case 'css':\n      case 'html':\n        {\n          return processor(data, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : exportType, fileNameFormatter));\n        }\n\n      default:\n        throw new Error(MESSAGE_FIELD_INVALID);\n    }\n  }\n\n  var fieldsMapper = _createFieldsMapper(fields);\n\n  var safeData = fieldsMapper(_prepareData(data));\n\n  var JSONData = _createJSONData(safeData, replacer, space);\n\n  switch (exportType) {\n    case 'txt':\n    case 'css':\n    case 'html':\n      {\n        return processor(JSONData, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : exportType, fileNameFormatter));\n      }\n\n    case 'json':\n      {\n        return processor(JSONData, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'json', fileNameFormatter));\n      }\n\n    case 'csv':\n      {\n        assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n        var BOM = \"\\uFEFF\";\n        var CSVData = createCSVData(safeData, beforeTableEncode);\n        var content = withBOM ? BOM + CSVData : CSVData;\n        return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'csv', fileNameFormatter));\n      }\n\n    case 'xls':\n      {\n        assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n        var content = createXLSData(safeData, beforeTableEncode);\n        return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'xls', fileNameFormatter));\n      }\n\n    case 'xml':\n      {\n        var content = createXMLData(safeData);\n        return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'xml', fileNameFormatter));\n      }\n\n    default:\n      throw new Error(MESSAGE_UNKNOWN_EXPORT_TYPE);\n  }\n}\n\nexportFromJSON.types = exportTypes;\nexportFromJSON.processors = {\n  downloadFile: downloadFile\n};\nexport default exportFromJSON;","map":null,"metadata":{},"sourceType":"module"}