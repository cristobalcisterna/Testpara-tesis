{"ast":null,"code":"import { _ as _defineProperty, d as _toConsumableArray } from './chunk-455cdeae.js';\nimport { isDefined, getMonthNames, getWeekdayNames, isMobile, matchWithGroups } from './helpers.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport { F as FormElementMixin } from './chunk-17b33cd2.js';\nimport { I as Icon } from './chunk-7e17a637.js';\nimport { _ as __vue_normalize__ } from './chunk-cca88db8.js';\nimport { I as Input } from './chunk-83c8b459.js';\nimport { D as Dropdown, a as DropdownItem } from './chunk-ade5b253.js';\nimport { F as Field } from './chunk-d46e7ff0.js';\nimport { S as Select } from './chunk-4e788733.js'; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar script = {\n  name: 'BDatepickerTableRow',\n  inject: {\n    $datepicker: {\n      name: '$datepicker',\n      \"default\": false\n    }\n  },\n  props: {\n    selectedDate: {\n      type: [Date, Array]\n    },\n    hoveredDateRange: Array,\n    day: {\n      type: Number\n    },\n    week: {\n      type: Array,\n      required: true\n    },\n    month: {\n      type: Number,\n      required: true\n    },\n    minDate: Date,\n    maxDate: Date,\n    disabled: Boolean,\n    unselectableDates: [Array, Function],\n    unselectableDaysOfWeek: Array,\n    selectableDates: [Array, Function],\n    events: Array,\n    indicators: String,\n    dateCreator: Function,\n    nearbyMonthDays: Boolean,\n    nearbySelectableMonthDays: Boolean,\n    showWeekNumber: Boolean,\n    weekNumberClickable: Boolean,\n    range: Boolean,\n    multiple: Boolean,\n    rulesForFirstWeek: Number,\n    firstDayOfWeek: Number\n  },\n  watch: {\n    day: function day(_day) {\n      var _this = this;\n\n      var refName = \"day-\".concat(this.month, \"-\").concat(_day);\n      this.$nextTick(function () {\n        if (_this.$refs[refName] && _this.$refs[refName].length > 0) {\n          if (_this.$refs[refName][0]) {\n            _this.$refs[refName][0].focus();\n          }\n        }\n      }); // $nextTick needed when month is changed\n    }\n  },\n  methods: {\n    firstWeekOffset: function firstWeekOffset(year, dow, doy) {\n      // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n      var fwd = 7 + dow - doy; // first-week day local weekday -- which local weekday is fwd\n\n      var firstJanuary = new Date(year, 0, fwd);\n      var fwdlw = (7 + firstJanuary.getDay() - dow) % 7;\n      return -fwdlw + fwd - 1;\n    },\n    daysInYear: function daysInYear(year) {\n      return this.isLeapYear(year) ? 366 : 365;\n    },\n    isLeapYear: function isLeapYear(year) {\n      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n    },\n    getSetDayOfYear: function getSetDayOfYear(input) {\n      return Math.round((input - new Date(input.getFullYear(), 0, 1)) / 864e5) + 1;\n    },\n    weeksInYear: function weeksInYear(year, dow, doy) {\n      var weekOffset = this.firstWeekOffset(year, dow, doy);\n      var weekOffsetNext = this.firstWeekOffset(year + 1, dow, doy);\n      return (this.daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    },\n    getWeekNumber: function getWeekNumber(mom) {\n      var dow = this.firstDayOfWeek; // first day of week\n      // Rules for the first week : 1 for the 1st January, 4 for the 4th January\n\n      var doy = this.rulesForFirstWeek;\n      var weekOffset = this.firstWeekOffset(mom.getFullYear(), dow, doy);\n      var week = Math.floor((this.getSetDayOfYear(mom) - weekOffset - 1) / 7) + 1;\n      var resWeek;\n      var resYear;\n\n      if (week < 1) {\n        resYear = mom.getFullYear() - 1;\n        resWeek = week + this.weeksInYear(resYear, dow, doy);\n      } else if (week > this.weeksInYear(mom.getFullYear(), dow, doy)) {\n        resWeek = week - this.weeksInYear(mom.getFullYear(), dow, doy);\n        resYear = mom.getFullYear() + 1;\n      } else {\n        resYear = mom.getFullYear();\n        resWeek = week;\n      }\n\n      return {\n        week: resWeek,\n        year: resYear\n      };\n    },\n    clickWeekNumber: function clickWeekNumber(weekData) {\n      if (this.weekNumberClickable) {\n        this.$datepicker.$emit('week-number-click', weekData.week, weekData.year);\n      }\n    },\n\n    /*\r\n     * Check that selected day is within earliest/latest params and\r\n     * is within this month\r\n     */\n    selectableDate: function selectableDate(day) {\n      var validity = [];\n\n      if (this.minDate) {\n        validity.push(day >= this.minDate);\n      }\n\n      if (this.maxDate) {\n        validity.push(day <= this.maxDate);\n      }\n\n      if (this.nearbyMonthDays && !this.nearbySelectableMonthDays) {\n        validity.push(day.getMonth() === this.month);\n      }\n\n      if (this.selectableDates) {\n        if (typeof this.selectableDates === 'function') {\n          if (this.selectableDates(day)) {\n            return true;\n          } else {\n            validity.push(false);\n          }\n        } else {\n          for (var i = 0; i < this.selectableDates.length; i++) {\n            var enabledDate = this.selectableDates[i];\n\n            if (day.getDate() === enabledDate.getDate() && day.getFullYear() === enabledDate.getFullYear() && day.getMonth() === enabledDate.getMonth()) {\n              return true;\n            } else {\n              validity.push(false);\n            }\n          }\n        }\n      }\n\n      if (this.unselectableDates) {\n        if (typeof this.unselectableDates === 'function') {\n          validity.push(!this.unselectableDates(day));\n        } else {\n          for (var _i = 0; _i < this.unselectableDates.length; _i++) {\n            var disabledDate = this.unselectableDates[_i];\n            validity.push(day.getDate() !== disabledDate.getDate() || day.getFullYear() !== disabledDate.getFullYear() || day.getMonth() !== disabledDate.getMonth());\n          }\n        }\n      }\n\n      if (this.unselectableDaysOfWeek) {\n        for (var _i2 = 0; _i2 < this.unselectableDaysOfWeek.length; _i2++) {\n          var dayOfWeek = this.unselectableDaysOfWeek[_i2];\n          validity.push(day.getDay() !== dayOfWeek);\n        }\n      }\n\n      return validity.indexOf(false) < 0;\n    },\n\n    /*\r\n    * Emit select event with chosen date as payload\r\n    */\n    emitChosenDate: function emitChosenDate(day) {\n      if (this.disabled) return;\n\n      if (this.selectableDate(day)) {\n        this.$emit('select', day);\n      }\n    },\n    eventsDateMatch: function eventsDateMatch(day) {\n      if (!this.events || !this.events.length) return false;\n      var dayEvents = [];\n\n      for (var i = 0; i < this.events.length; i++) {\n        if (this.events[i].date.getDay() === day.getDay()) {\n          dayEvents.push(this.events[i]);\n        }\n      }\n\n      if (!dayEvents.length) {\n        return false;\n      }\n\n      return dayEvents;\n    },\n\n    /*\r\n    * Build classObject for cell using validations\r\n    */\n    classObject: function classObject(day) {\n      function dateMatch(dateOne, dateTwo, multiple) {\n        // if either date is null or undefined, return false\n        // if using multiple flag, return false\n        if (!dateOne || !dateTwo || multiple) {\n          return false;\n        }\n\n        if (Array.isArray(dateTwo)) {\n          return dateTwo.some(function (date) {\n            return dateOne.getDate() === date.getDate() && dateOne.getFullYear() === date.getFullYear() && dateOne.getMonth() === date.getMonth();\n          });\n        }\n\n        return dateOne.getDate() === dateTwo.getDate() && dateOne.getFullYear() === dateTwo.getFullYear() && dateOne.getMonth() === dateTwo.getMonth();\n      }\n\n      function dateWithin(dateOne, dates, multiple) {\n        if (!Array.isArray(dates) || multiple) {\n          return false;\n        }\n\n        return dateOne > dates[0] && dateOne < dates[1];\n      }\n\n      return _defineProperty({\n        'is-selected': dateMatch(day, this.selectedDate) || dateWithin(day, this.selectedDate, this.multiple),\n        'is-first-selected': dateMatch(day, Array.isArray(this.selectedDate) && this.selectedDate[0], this.multiple),\n        'is-within-selected': dateWithin(day, this.selectedDate, this.multiple),\n        'is-last-selected': dateMatch(day, Array.isArray(this.selectedDate) && this.selectedDate[1], this.multiple),\n        'is-within-hovered-range': this.hoveredDateRange && this.hoveredDateRange.length === 2 && (dateMatch(day, this.hoveredDateRange) || dateWithin(day, this.hoveredDateRange)),\n        'is-first-hovered': dateMatch(day, Array.isArray(this.hoveredDateRange) && this.hoveredDateRange[0]),\n        'is-within-hovered': dateWithin(day, this.hoveredDateRange),\n        'is-last-hovered': dateMatch(day, Array.isArray(this.hoveredDateRange) && this.hoveredDateRange[1]),\n        'is-today': dateMatch(day, this.dateCreator()),\n        'is-selectable': this.selectableDate(day) && !this.disabled,\n        'is-unselectable': !this.selectableDate(day) || this.disabled,\n        'is-invisible': !this.nearbyMonthDays && day.getMonth() !== this.month,\n        'is-nearby': this.nearbySelectableMonthDays && day.getMonth() !== this.month,\n        'has-event': this.eventsDateMatch(day)\n      }, this.indicators, this.eventsDateMatch(day));\n    },\n    setRangeHoverEndDate: function setRangeHoverEndDate(day) {\n      if (this.range) {\n        this.$emit('rangeHoverEndDate', day);\n      }\n    },\n    manageKeydown: function manageKeydown(event, weekDay) {\n      // https://developer.mozilla.org/fr/docs/Web/API/KeyboardEvent/key/Key_Values#Navigation_keys\n      var key = event.key;\n      var preventDefault = true;\n\n      switch (key) {\n        case 'Tab':\n          {\n            preventDefault = false;\n            break;\n          }\n\n        case ' ':\n        case 'Space':\n        case 'Spacebar':\n        case 'Enter':\n          {\n            this.emitChosenDate(weekDay);\n            break;\n          }\n\n        case 'ArrowLeft':\n        case 'Left':\n          {\n            this.changeFocus(weekDay, -1);\n            break;\n          }\n\n        case 'ArrowRight':\n        case 'Right':\n          {\n            this.changeFocus(weekDay, 1);\n            break;\n          }\n\n        case 'ArrowUp':\n        case 'Up':\n          {\n            this.changeFocus(weekDay, -7);\n            break;\n          }\n\n        case 'ArrowDown':\n        case 'Down':\n          {\n            this.changeFocus(weekDay, 7);\n            break;\n          }\n      }\n\n      if (preventDefault) {\n        event.preventDefault();\n      }\n    },\n    changeFocus: function changeFocus(day, inc) {\n      var nextDay = new Date(day.getTime());\n      nextDay.setDate(day.getDate() + inc);\n\n      while ((!this.minDate || nextDay > this.minDate) && (!this.maxDate || nextDay < this.maxDate) && !this.selectableDate(nextDay)) {\n        nextDay.setDate(day.getDate() + Math.sign(inc));\n      }\n\n      this.setRangeHoverEndDate(nextDay);\n      this.$emit('change-focus', nextDay);\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"datepicker-row\"\n  }, [_vm.showWeekNumber ? _c('a', {\n    staticClass: \"datepicker-cell is-week-number\",\n    \"class\": {\n      'is-clickable': _vm.weekNumberClickable\n    },\n    on: {\n      \"click\": function click($event) {\n        $event.preventDefault();\n\n        _vm.clickWeekNumber(_vm.getWeekNumber(_vm.week[6]));\n      }\n    }\n  }, [_c('span', [_vm._v(_vm._s(_vm.getWeekNumber(_vm.week[6]).week))])]) : _vm._e(), _vm._l(_vm.week, function (weekDay, index) {\n    return [_vm.selectableDate(weekDay) && !_vm.disabled ? _c('a', {\n      key: index,\n      ref: \"day-\" + weekDay.getMonth() + \"-\" + weekDay.getDate(),\n      refInFor: true,\n      staticClass: \"datepicker-cell\",\n      \"class\": _vm.classObject(weekDay),\n      attrs: {\n        \"role\": \"button\",\n        \"href\": \"#\",\n        \"disabled\": _vm.disabled,\n        \"tabindex\": _vm.day === weekDay.getDate() && _vm.month === weekDay.getMonth() ? null : -1\n      },\n      on: {\n        \"click\": function click($event) {\n          $event.preventDefault();\n          return _vm.emitChosenDate(weekDay);\n        },\n        \"mouseenter\": function mouseenter($event) {\n          return _vm.setRangeHoverEndDate(weekDay);\n        },\n        \"keydown\": function keydown($event) {\n          return _vm.manageKeydown($event, weekDay);\n        }\n      }\n    }, [_c('span', [_vm._v(_vm._s(weekDay.getDate()))]), _vm.eventsDateMatch(weekDay) ? _c('div', {\n      staticClass: \"events\"\n    }, _vm._l(_vm.eventsDateMatch(weekDay), function (event, index) {\n      return _c('div', {\n        key: index,\n        staticClass: \"event\",\n        \"class\": event.type\n      });\n    }), 0) : _vm._e()]) : _c('div', {\n      key: index,\n      staticClass: \"datepicker-cell\",\n      \"class\": _vm.classObject(weekDay)\n    }, [_c('span', [_vm._v(_vm._s(weekDay.getDate()))]), _vm.eventsDateMatch(weekDay) ? _c('div', {\n      staticClass: \"events\"\n    }, _vm._l(_vm.eventsDateMatch(weekDay), function (event, index) {\n      return _c('div', {\n        key: index,\n        staticClass: \"event\",\n        \"class\": event.type\n      });\n    }), 0) : _vm._e()])];\n  })], 2);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar DatepickerTableRow = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar script$1 = {\n  name: 'BDatepickerTable',\n  components: _defineProperty({}, DatepickerTableRow.name, DatepickerTableRow),\n  props: {\n    value: {\n      type: [Date, Array]\n    },\n    dayNames: Array,\n    monthNames: Array,\n    firstDayOfWeek: Number,\n    events: Array,\n    indicators: String,\n    minDate: Date,\n    maxDate: Date,\n    focused: Object,\n    disabled: Boolean,\n    dateCreator: Function,\n    unselectableDates: [Array, Function],\n    unselectableDaysOfWeek: Array,\n    selectableDates: [Array, Function],\n    nearbyMonthDays: Boolean,\n    nearbySelectableMonthDays: Boolean,\n    showWeekNumber: Boolean,\n    weekNumberClickable: Boolean,\n    rulesForFirstWeek: Number,\n    range: Boolean,\n    multiple: Boolean\n  },\n  data: function data() {\n    return {\n      selectedBeginDate: undefined,\n      selectedEndDate: undefined,\n      hoveredEndDate: undefined\n    };\n  },\n  computed: {\n    multipleSelectedDates: {\n      get: function get() {\n        return this.multiple && this.value ? this.value : [];\n      },\n      set: function set(value) {\n        this.$emit('input', value);\n      }\n    },\n    visibleDayNames: function visibleDayNames() {\n      var visibleDayNames = [];\n      var index = this.firstDayOfWeek;\n\n      while (visibleDayNames.length < this.dayNames.length) {\n        var currentDayName = this.dayNames[index % this.dayNames.length];\n        visibleDayNames.push(currentDayName);\n        index++;\n      }\n\n      if (this.showWeekNumber) visibleDayNames.unshift('');\n      return visibleDayNames;\n    },\n    hasEvents: function hasEvents() {\n      return this.events && this.events.length;\n    },\n\n    /*\r\n    * Return array of all events in the specified month\r\n    */\n    eventsInThisMonth: function eventsInThisMonth() {\n      if (!this.events) return [];\n      var monthEvents = [];\n\n      for (var i = 0; i < this.events.length; i++) {\n        var event = this.events[i];\n\n        if (!event.hasOwnProperty('date')) {\n          event = {\n            date: event\n          };\n        }\n\n        if (!event.hasOwnProperty('type')) {\n          event.type = 'is-primary';\n        }\n\n        if (event.date.getMonth() === this.focused.month && event.date.getFullYear() === this.focused.year) {\n          monthEvents.push(event);\n        }\n      }\n\n      return monthEvents;\n    },\n\n    /*\r\n    * Return array of all weeks in the specified month\r\n    */\n    weeksInThisMonth: function weeksInThisMonth() {\n      this.validateFocusedDay();\n      var month = this.focused.month;\n      var year = this.focused.year;\n      var weeksInThisMonth = [];\n      var startingDay = 1;\n\n      while (weeksInThisMonth.length < 6) {\n        var newWeek = this.weekBuilder(startingDay, month, year);\n        weeksInThisMonth.push(newWeek);\n        startingDay += 7;\n      }\n\n      return weeksInThisMonth;\n    },\n    hoveredDateRange: function hoveredDateRange() {\n      if (!this.range) {\n        return [];\n      }\n\n      if (!isNaN(this.selectedEndDate)) {\n        return [];\n      }\n\n      if (this.hoveredEndDate < this.selectedBeginDate) {\n        return [this.hoveredEndDate, this.selectedBeginDate].filter(isDefined);\n      }\n\n      return [this.selectedBeginDate, this.hoveredEndDate].filter(isDefined);\n    }\n  },\n  methods: {\n    /*\r\n    * Emit input event with selected date as payload for v-model in parent\r\n    */\n    updateSelectedDate: function updateSelectedDate(date) {\n      if (!this.range && !this.multiple) {\n        this.$emit('input', date);\n      } else if (this.range) {\n        this.handleSelectRangeDate(date);\n      } else if (this.multiple) {\n        this.handleSelectMultipleDates(date);\n      }\n    },\n\n    /*\r\n    * If both begin and end dates are set, reset the end date and set the begin date.\r\n    * If only begin date is selected, emit an array of the begin date and the new date.\r\n    * If not set, only set the begin date.\r\n    */\n    handleSelectRangeDate: function handleSelectRangeDate(date) {\n      if (this.selectedBeginDate && this.selectedEndDate) {\n        this.selectedBeginDate = date;\n        this.selectedEndDate = undefined;\n        this.$emit('range-start', date);\n      } else if (this.selectedBeginDate && !this.selectedEndDate) {\n        if (this.selectedBeginDate > date) {\n          this.selectedEndDate = this.selectedBeginDate;\n          this.selectedBeginDate = date;\n        } else {\n          this.selectedEndDate = date;\n        }\n\n        this.$emit('range-end', date);\n        this.$emit('input', [this.selectedBeginDate, this.selectedEndDate]);\n      } else {\n        this.selectedBeginDate = date;\n        this.$emit('range-start', date);\n      }\n    },\n\n    /*\r\n    * If selected date already exists list of selected dates, remove it from the list\r\n    * Otherwise, add date to list of selected dates\r\n    */\n    handleSelectMultipleDates: function handleSelectMultipleDates(date) {\n      var multipleSelect = this.multipleSelectedDates.filter(function (selectedDate) {\n        return selectedDate.getDate() === date.getDate() && selectedDate.getFullYear() === date.getFullYear() && selectedDate.getMonth() === date.getMonth();\n      });\n\n      if (multipleSelect.length) {\n        this.multipleSelectedDates = this.multipleSelectedDates.filter(function (selectedDate) {\n          return selectedDate.getDate() !== date.getDate() || selectedDate.getFullYear() !== date.getFullYear() || selectedDate.getMonth() !== date.getMonth();\n        });\n      } else {\n        this.multipleSelectedDates = [].concat(_toConsumableArray(this.multipleSelectedDates), [date]);\n      }\n    },\n\n    /*\r\n     * Return array of all days in the week that the startingDate is within\r\n     */\n    weekBuilder: function weekBuilder(startingDate, month, year) {\n      var thisMonth = new Date(year, month);\n      var thisWeek = [];\n      var dayOfWeek = new Date(year, month, startingDate).getDay();\n      var end = dayOfWeek >= this.firstDayOfWeek ? dayOfWeek - this.firstDayOfWeek : 7 - this.firstDayOfWeek + dayOfWeek;\n      var daysAgo = 1;\n\n      for (var i = 0; i < end; i++) {\n        thisWeek.unshift(new Date(thisMonth.getFullYear(), thisMonth.getMonth(), startingDate - daysAgo));\n        daysAgo++;\n      }\n\n      thisWeek.push(new Date(year, month, startingDate));\n      var daysForward = 1;\n\n      while (thisWeek.length < 7) {\n        thisWeek.push(new Date(year, month, startingDate + daysForward));\n        daysForward++;\n      }\n\n      return thisWeek;\n    },\n    validateFocusedDay: function validateFocusedDay() {\n      var focusedDate = new Date(this.focused.year, this.focused.month, this.focused.day);\n      if (this.selectableDate(focusedDate)) return;\n      var day = 0; // Number of days in the current month\n\n      var monthDays = new Date(this.focused.year, this.focused.month + 1, 0).getDate();\n      var firstFocusable = null;\n\n      while (!firstFocusable && ++day < monthDays) {\n        var date = new Date(this.focused.year, this.focused.month, day);\n\n        if (this.selectableDate(date)) {\n          firstFocusable = focusedDate;\n          var focused = {\n            day: date.getDate(),\n            month: date.getMonth(),\n            year: date.getFullYear()\n          };\n          this.$emit('update:focused', focused);\n        }\n      }\n    },\n\n    /*\r\n     * Check that selected day is within earliest/latest params and\r\n     * is within this month\r\n     */\n    selectableDate: function selectableDate(day) {\n      var validity = [];\n\n      if (this.minDate) {\n        validity.push(day >= this.minDate);\n      }\n\n      if (this.maxDate) {\n        validity.push(day <= this.maxDate);\n      }\n\n      if (this.nearbyMonthDays && !this.nearbySelectableMonthDays) {\n        validity.push(day.getMonth() === this.focused.month);\n      }\n\n      if (this.selectableDates) {\n        if (typeof this.selectableDates === 'function') {\n          if (this.selectableDates(day)) {\n            return true;\n          } else {\n            validity.push(false);\n          }\n        } else {\n          for (var i = 0; i < this.selectableDates.length; i++) {\n            var enabledDate = this.selectableDates[i];\n\n            if (day.getDate() === enabledDate.getDate() && day.getFullYear() === enabledDate.getFullYear() && day.getMonth() === enabledDate.getMonth()) {\n              return true;\n            } else {\n              validity.push(false);\n            }\n          }\n        }\n      }\n\n      if (this.unselectableDates) {\n        if (typeof this.unselectableDates === 'function') {\n          validity.push(!this.unselectableDates(day));\n        } else {\n          for (var _i = 0; _i < this.unselectableDates.length; _i++) {\n            var disabledDate = this.unselectableDates[_i];\n            validity.push(day.getDate() !== disabledDate.getDate() || day.getFullYear() !== disabledDate.getFullYear() || day.getMonth() !== disabledDate.getMonth());\n          }\n        }\n      }\n\n      if (this.unselectableDaysOfWeek) {\n        for (var _i2 = 0; _i2 < this.unselectableDaysOfWeek.length; _i2++) {\n          var dayOfWeek = this.unselectableDaysOfWeek[_i2];\n          validity.push(day.getDay() !== dayOfWeek);\n        }\n      }\n\n      return validity.indexOf(false) < 0;\n    },\n    eventsInThisWeek: function eventsInThisWeek(week) {\n      return this.eventsInThisMonth.filter(function (event) {\n        var stripped = new Date(Date.parse(event.date));\n        stripped.setHours(0, 0, 0, 0);\n        var timed = stripped.getTime();\n        return week.some(function (weekDate) {\n          return weekDate.getTime() === timed;\n        });\n      });\n    },\n    setRangeHoverEndDate: function setRangeHoverEndDate(day) {\n      this.hoveredEndDate = day;\n    },\n    changeFocus: function changeFocus(day) {\n      var focused = {\n        day: day.getDate(),\n        month: day.getMonth(),\n        year: day.getFullYear()\n      };\n      this.$emit('update:focused', focused);\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$1 = script$1;\n/* template */\n\nvar __vue_render__$1 = function __vue_render__$1() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('section', {\n    staticClass: \"datepicker-table\"\n  }, [_c('header', {\n    staticClass: \"datepicker-header\"\n  }, _vm._l(_vm.visibleDayNames, function (day, index) {\n    return _c('div', {\n      key: index,\n      staticClass: \"datepicker-cell\"\n    }, [_c('span', [_vm._v(_vm._s(day))])]);\n  }), 0), _c('div', {\n    staticClass: \"datepicker-body\",\n    \"class\": {\n      'has-events': _vm.hasEvents\n    }\n  }, _vm._l(_vm.weeksInThisMonth, function (week, index) {\n    return _c('b-datepicker-table-row', {\n      key: index,\n      attrs: {\n        \"selected-date\": _vm.value,\n        \"day\": _vm.focused.day,\n        \"week\": week,\n        \"month\": _vm.focused.month,\n        \"min-date\": _vm.minDate,\n        \"max-date\": _vm.maxDate,\n        \"disabled\": _vm.disabled,\n        \"unselectable-dates\": _vm.unselectableDates,\n        \"unselectable-days-of-week\": _vm.unselectableDaysOfWeek,\n        \"selectable-dates\": _vm.selectableDates,\n        \"events\": _vm.eventsInThisWeek(week),\n        \"indicators\": _vm.indicators,\n        \"date-creator\": _vm.dateCreator,\n        \"nearby-month-days\": _vm.nearbyMonthDays,\n        \"nearby-selectable-month-days\": _vm.nearbySelectableMonthDays,\n        \"show-week-number\": _vm.showWeekNumber,\n        \"week-number-clickable\": _vm.weekNumberClickable,\n        \"first-day-of-week\": _vm.firstDayOfWeek,\n        \"rules-for-first-week\": _vm.rulesForFirstWeek,\n        \"range\": _vm.range,\n        \"hovered-date-range\": _vm.hoveredDateRange,\n        \"multiple\": _vm.multiple\n      },\n      on: {\n        \"select\": _vm.updateSelectedDate,\n        \"rangeHoverEndDate\": _vm.setRangeHoverEndDate,\n        \"change-focus\": _vm.changeFocus\n      }\n    });\n  }), 1)]);\n};\n\nvar __vue_staticRenderFns__$1 = [];\n/* style */\n\nvar __vue_inject_styles__$1 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$1 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$1 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$1 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar DatepickerTable = __vue_normalize__({\n  render: __vue_render__$1,\n  staticRenderFns: __vue_staticRenderFns__$1\n}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, undefined, undefined); //\n\n\nvar script$2 = {\n  name: 'BDatepickerMonth',\n  props: {\n    value: {\n      type: [Date, Array]\n    },\n    monthNames: Array,\n    events: Array,\n    indicators: String,\n    minDate: Date,\n    maxDate: Date,\n    focused: Object,\n    disabled: Boolean,\n    dateCreator: Function,\n    unselectableDates: [Array, Function],\n    unselectableDaysOfWeek: Array,\n    selectableDates: [Array, Function],\n    range: Boolean,\n    multiple: Boolean\n  },\n  data: function data() {\n    return {\n      selectedBeginDate: undefined,\n      selectedEndDate: undefined,\n      hoveredEndDate: undefined,\n      multipleSelectedDates: this.multiple && this.value ? this.value : []\n    };\n  },\n  computed: {\n    hasEvents: function hasEvents() {\n      return this.events && this.events.length;\n    },\n\n    /*\r\n    * Return array of all events in the specified month\r\n    */\n    eventsInThisYear: function eventsInThisYear() {\n      if (!this.events) return [];\n      var yearEvents = [];\n\n      for (var i = 0; i < this.events.length; i++) {\n        var event = this.events[i];\n\n        if (!event.hasOwnProperty('date')) {\n          event = {\n            date: event\n          };\n        }\n\n        if (!event.hasOwnProperty('type')) {\n          event.type = 'is-primary';\n        }\n\n        if (event.date.getFullYear() === this.focused.year) {\n          yearEvents.push(event);\n        }\n      }\n\n      return yearEvents;\n    },\n    monthDates: function monthDates() {\n      var year = this.focused.year;\n      var months = [];\n\n      for (var i = 0; i < 12; i++) {\n        var d = new Date(year, i, 1);\n        d.setHours(0, 0, 0, 0);\n        months.push(d);\n      }\n\n      return months;\n    },\n    focusedMonth: function focusedMonth() {\n      return this.focused.month;\n    },\n    hoveredDateRange: function hoveredDateRange() {\n      if (!this.range) {\n        return [];\n      }\n\n      if (!isNaN(this.selectedEndDate)) {\n        return [];\n      }\n\n      if (this.hoveredEndDate < this.selectedBeginDate) {\n        return [this.hoveredEndDate, this.selectedBeginDate].filter(isDefined);\n      }\n\n      return [this.selectedBeginDate, this.hoveredEndDate].filter(isDefined);\n    }\n  },\n  watch: {\n    focusedMonth: function focusedMonth(month) {\n      var _this = this;\n\n      var refName = \"month-\".concat(month);\n\n      if (this.$refs[refName] && this.$refs[refName].length > 0) {\n        this.$nextTick(function () {\n          if (_this.$refs[refName][0]) {\n            _this.$refs[refName][0].focus();\n          }\n        }); // $nextTick needed when year is changed\n      }\n    }\n  },\n  methods: {\n    selectMultipleDates: function selectMultipleDates(date) {\n      var multipleSelect = this.multipleSelectedDates.filter(function (selectedDate) {\n        return selectedDate.getDate() === date.getDate() && selectedDate.getFullYear() === date.getFullYear() && selectedDate.getMonth() === date.getMonth();\n      });\n\n      if (multipleSelect.length) {\n        this.multipleSelectedDates = this.multipleSelectedDates.filter(function (selectedDate) {\n          return selectedDate.getDate() !== date.getDate() || selectedDate.getFullYear() !== date.getFullYear() || selectedDate.getMonth() !== date.getMonth();\n        });\n      } else {\n        this.multipleSelectedDates.push(date);\n      }\n\n      this.$emit('input', this.multipleSelectedDates);\n    },\n    selectableDate: function selectableDate(day) {\n      var validity = [];\n\n      if (this.minDate) {\n        validity.push(day >= this.minDate);\n      }\n\n      if (this.maxDate) {\n        validity.push(day <= this.maxDate);\n      }\n\n      validity.push(day.getFullYear() === this.focused.year);\n\n      if (this.selectableDates) {\n        if (typeof this.selectableDates === 'function') {\n          if (this.selectableDates(day)) {\n            return true;\n          } else {\n            validity.push(false);\n          }\n        } else {\n          for (var i = 0; i < this.selectableDates.length; i++) {\n            var enabledDate = this.selectableDates[i];\n\n            if (day.getFullYear() === enabledDate.getFullYear() && day.getMonth() === enabledDate.getMonth()) {\n              return true;\n            } else {\n              validity.push(false);\n            }\n          }\n        }\n      }\n\n      if (this.unselectableDates) {\n        if (typeof this.unselectableDates === 'function') {\n          validity.push(!this.unselectableDates(day));\n        } else {\n          for (var _i = 0; _i < this.unselectableDates.length; _i++) {\n            var disabledDate = this.unselectableDates[_i];\n            validity.push(day.getFullYear() !== disabledDate.getFullYear() || day.getMonth() !== disabledDate.getMonth());\n          }\n        }\n      }\n\n      if (this.unselectableDaysOfWeek) {\n        for (var _i2 = 0; _i2 < this.unselectableDaysOfWeek.length; _i2++) {\n          var dayOfWeek = this.unselectableDaysOfWeek[_i2];\n          validity.push(day.getDay() !== dayOfWeek);\n        }\n      }\n\n      return validity.indexOf(false) < 0;\n    },\n    eventsDateMatch: function eventsDateMatch(day) {\n      if (!this.eventsInThisYear.length) return false;\n      var monthEvents = [];\n\n      for (var i = 0; i < this.eventsInThisYear.length; i++) {\n        if (this.eventsInThisYear[i].date.getMonth() === day.getMonth()) {\n          monthEvents.push(this.events[i]);\n        }\n      }\n\n      if (!monthEvents.length) {\n        return false;\n      }\n\n      return monthEvents;\n    },\n\n    /*\r\n    * Build classObject for cell using validations\r\n    */\n    classObject: function classObject(day) {\n      function dateMatch(dateOne, dateTwo, multiple) {\n        // if either date is null or undefined, return false\n        if (!dateOne || !dateTwo || multiple) {\n          return false;\n        }\n\n        if (Array.isArray(dateTwo)) {\n          return dateTwo.some(function (date) {\n            return dateOne.getFullYear() === date.getFullYear() && dateOne.getMonth() === date.getMonth();\n          });\n        }\n\n        return dateOne.getFullYear() === dateTwo.getFullYear() && dateOne.getMonth() === dateTwo.getMonth();\n      }\n\n      function dateWithin(dateOne, dates, multiple) {\n        if (!Array.isArray(dates) || multiple) {\n          return false;\n        }\n\n        return dateOne > dates[0] && dateOne < dates[1];\n      }\n\n      function dateMultipleSelected(dateOne, dates, multiple) {\n        if (!Array.isArray(dates) || !multiple) {\n          return false;\n        }\n\n        return dates.some(function (date) {\n          return dateOne.getDate() === date.getDate() && dateOne.getFullYear() === date.getFullYear() && dateOne.getMonth() === date.getMonth();\n        });\n      }\n\n      return {\n        'is-selected': dateMatch(day, this.value, this.multiple) || dateWithin(day, this.value, this.multiple) || dateMultipleSelected(day, this.multipleSelectedDates, this.multiple),\n        'is-first-selected': dateMatch(day, Array.isArray(this.value) && this.value[0], this.multiple),\n        'is-within-selected': dateWithin(day, this.value, this.multiple),\n        'is-last-selected': dateMatch(day, Array.isArray(this.value) && this.value[1], this.multiple),\n        'is-within-hovered-range': this.hoveredDateRange && this.hoveredDateRange.length === 2 && (dateMatch(day, this.hoveredDateRange) || dateWithin(day, this.hoveredDateRange)),\n        'is-first-hovered': dateMatch(day, Array.isArray(this.hoveredDateRange) && this.hoveredDateRange[0]),\n        'is-within-hovered': dateWithin(day, this.hoveredDateRange),\n        'is-last-hovered': dateMatch(day, Array.isArray(this.hoveredDateRange) && this.hoveredDateRange[1]),\n        'is-today': dateMatch(day, this.dateCreator()),\n        'is-selectable': this.selectableDate(day) && !this.disabled,\n        'is-unselectable': !this.selectableDate(day) || this.disabled\n      };\n    },\n    manageKeydown: function manageKeydown(_ref, date) {\n      var key = _ref.key; // https://developer.mozilla.org/fr/docs/Web/API/KeyboardEvent/key/Key_Values#Navigation_keys\n\n      switch (key) {\n        case ' ':\n        case 'Space':\n        case 'Spacebar':\n        case 'Enter':\n          {\n            this.updateSelectedDate(date);\n            break;\n          }\n\n        case 'ArrowLeft':\n        case 'Left':\n          {\n            this.changeFocus(date, -1);\n            break;\n          }\n\n        case 'ArrowRight':\n        case 'Right':\n          {\n            this.changeFocus(date, 1);\n            break;\n          }\n\n        case 'ArrowUp':\n        case 'Up':\n          {\n            this.changeFocus(date, -3);\n            break;\n          }\n\n        case 'ArrowDown':\n        case 'Down':\n          {\n            this.changeFocus(date, 3);\n            break;\n          }\n      }\n    },\n\n    /*\r\n    * Emit input event with selected date as payload for v-model in parent\r\n    */\n    updateSelectedDate: function updateSelectedDate(date) {\n      if (!this.range && !this.multiple) {\n        this.emitChosenDate(date);\n      } else if (this.range) {\n        this.handleSelectRangeDate(date);\n      } else if (this.multiple) {\n        this.selectMultipleDates(date);\n      }\n    },\n\n    /*\r\n     * Emit select event with chosen date as payload\r\n     */\n    emitChosenDate: function emitChosenDate(day) {\n      if (this.disabled) return;\n\n      if (!this.multiple) {\n        if (this.selectableDate(day)) {\n          this.$emit('input', day);\n        }\n      } else {\n        this.selectMultipleDates(day);\n      }\n    },\n\n    /*\r\n    * If both begin and end dates are set, reset the end date and set the begin date.\r\n    * If only begin date is selected, emit an array of the begin date and the new date.\r\n    * If not set, only set the begin date.\r\n    */\n    handleSelectRangeDate: function handleSelectRangeDate(date) {\n      if (this.disabled) return;\n\n      if (this.selectedBeginDate && this.selectedEndDate) {\n        this.selectedBeginDate = date;\n        this.selectedEndDate = undefined;\n        this.$emit('range-start', date);\n      } else if (this.selectedBeginDate && !this.selectedEndDate) {\n        if (this.selectedBeginDate > date) {\n          this.selectedEndDate = this.selectedBeginDate;\n          this.selectedBeginDate = date;\n        } else {\n          this.selectedEndDate = date;\n        }\n\n        this.$emit('range-end', date);\n        this.$emit('input', [this.selectedBeginDate, this.selectedEndDate]);\n      } else {\n        this.selectedBeginDate = date;\n        this.$emit('range-start', date);\n      }\n    },\n    setRangeHoverEndDate: function setRangeHoverEndDate(day) {\n      if (this.range) {\n        this.hoveredEndDate = day;\n      }\n    },\n    changeFocus: function changeFocus(month, inc) {\n      var nextMonth = month;\n      nextMonth.setMonth(month.getMonth() + inc);\n      this.$emit('change-focus', nextMonth);\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$2 = script$2;\n/* template */\n\nvar __vue_render__$2 = function __vue_render__$2() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('section', {\n    staticClass: \"datepicker-table\"\n  }, [_c('div', {\n    staticClass: \"datepicker-body\",\n    \"class\": {\n      'has-events': _vm.hasEvents\n    }\n  }, [_c('div', {\n    staticClass: \"datepicker-months\"\n  }, [_vm._l(_vm.monthDates, function (date, index) {\n    return [_vm.selectableDate(date) && !_vm.disabled ? _c('a', {\n      key: index,\n      ref: \"month-\" + date.getMonth(),\n      refInFor: true,\n      staticClass: \"datepicker-cell\",\n      \"class\": [_vm.classObject(date), {\n        'has-event': _vm.eventsDateMatch(date)\n      }, _vm.indicators],\n      attrs: {\n        \"role\": \"button\",\n        \"href\": \"#\",\n        \"disabled\": _vm.disabled,\n        \"tabindex\": _vm.focused.month === date.getMonth() ? null : -1\n      },\n      on: {\n        \"click\": function click($event) {\n          $event.preventDefault();\n          return _vm.updateSelectedDate(date);\n        },\n        \"mouseenter\": function mouseenter($event) {\n          return _vm.setRangeHoverEndDate(date);\n        },\n        \"keydown\": function keydown($event) {\n          $event.preventDefault();\n          return _vm.manageKeydown($event, date);\n        }\n      }\n    }, [_vm._v(\" \" + _vm._s(_vm.monthNames[date.getMonth()]) + \" \"), _vm.eventsDateMatch(date) ? _c('div', {\n      staticClass: \"events\"\n    }, _vm._l(_vm.eventsDateMatch(date), function (event, index) {\n      return _c('div', {\n        key: index,\n        staticClass: \"event\",\n        \"class\": event.type\n      });\n    }), 0) : _vm._e()]) : _c('div', {\n      key: index,\n      staticClass: \"datepicker-cell\",\n      \"class\": _vm.classObject(date)\n    }, [_vm._v(\" \" + _vm._s(_vm.monthNames[date.getMonth()]) + \" \")])];\n  })], 2)])]);\n};\n\nvar __vue_staticRenderFns__$2 = [];\n/* style */\n\nvar __vue_inject_styles__$2 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$2 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$2 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$2 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar DatepickerMonth = __vue_normalize__({\n  render: __vue_render__$2,\n  staticRenderFns: __vue_staticRenderFns__$2\n}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, undefined, undefined);\n\nvar _components;\n\nvar defaultDateFormatter = function defaultDateFormatter(date, vm) {\n  var targetDates = Array.isArray(date) ? date : [date];\n  var dates = targetDates.map(function (date) {\n    var d = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 12);\n    return !vm.isTypeMonth ? vm.dtf.format(d) : vm.dtfMonth.format(d);\n  });\n  return !vm.multiple ? dates.join(' - ') : dates.join(', ');\n};\n\nvar defaultDateParser = function defaultDateParser(date, vm) {\n  if (vm.dtf.formatToParts && typeof vm.dtf.formatToParts === 'function') {\n    var formatRegex = (vm.isTypeMonth ? vm.dtfMonth : vm.dtf).formatToParts(new Date(2000, 11, 25)).map(function (part) {\n      if (part.type === 'literal') {\n        return part.value;\n      }\n\n      return \"((?!=<\".concat(part.type, \">)\\\\d+)\");\n    }).join('');\n    var dateGroups = matchWithGroups(formatRegex, date); // We do a simple validation for the group.\n    // If it is not valid, it will fallback to Date.parse below\n\n    if (dateGroups.year && dateGroups.year.length === 4 && dateGroups.month && dateGroups.month <= 12) {\n      if (vm.isTypeMonth) return new Date(dateGroups.year, dateGroups.month - 1);else if (dateGroups.day && dateGroups.day <= 31) {\n        return new Date(dateGroups.year, dateGroups.month - 1, dateGroups.day, 12);\n      }\n    }\n  } // Fallback if formatToParts is not supported or if we were not able to parse a valid date\n\n\n  if (!vm.isTypeMonth) return new Date(Date.parse(date));\n\n  if (date) {\n    var s = date.split('/');\n    var year = s[0].length === 4 ? s[0] : s[1];\n    var month = s[0].length === 2 ? s[0] : s[1];\n\n    if (year && month) {\n      return new Date(parseInt(year, 10), parseInt(month - 1, 10), 1, 0, 0, 0, 0);\n    }\n  }\n\n  return null;\n};\n\nvar script$3 = {\n  name: 'BDatepicker',\n  components: (_components = {}, _defineProperty(_components, DatepickerTable.name, DatepickerTable), _defineProperty(_components, DatepickerMonth.name, DatepickerMonth), _defineProperty(_components, Input.name, Input), _defineProperty(_components, Field.name, Field), _defineProperty(_components, Select.name, Select), _defineProperty(_components, Icon.name, Icon), _defineProperty(_components, Dropdown.name, Dropdown), _defineProperty(_components, DropdownItem.name, DropdownItem), _components),\n  mixins: [FormElementMixin],\n  inheritAttrs: false,\n  provide: function provide() {\n    return {\n      $datepicker: this\n    };\n  },\n  props: {\n    value: {\n      type: [Date, Array]\n    },\n    dayNames: {\n      type: Array,\n      \"default\": function _default() {\n        if (!Array.isArray(config.defaultDayNames)) {\n          return undefined;\n        }\n\n        return config.defaultDayNames;\n      }\n    },\n    monthNames: {\n      type: Array,\n      \"default\": function _default() {\n        if (!Array.isArray(config.defaultMonthNames)) {\n          return undefined;\n        }\n\n        return config.defaultMonthNames;\n      }\n    },\n    firstDayOfWeek: {\n      type: Number,\n      \"default\": function _default() {\n        if (typeof config.defaultFirstDayOfWeek === 'number') {\n          return config.defaultFirstDayOfWeek;\n        } else {\n          return 0;\n        }\n      }\n    },\n    inline: Boolean,\n    minDate: Date,\n    maxDate: Date,\n    focusedDate: Date,\n    placeholder: String,\n    editable: Boolean,\n    disabled: Boolean,\n    horizontalTimePicker: Boolean,\n    unselectableDates: [Array, Function],\n    unselectableDaysOfWeek: {\n      type: Array,\n      \"default\": function _default() {\n        return config.defaultUnselectableDaysOfWeek;\n      }\n    },\n    selectableDates: [Array, Function],\n    dateFormatter: {\n      type: Function,\n      \"default\": function _default(date, vm) {\n        if (typeof config.defaultDateFormatter === 'function') {\n          return config.defaultDateFormatter(date);\n        } else {\n          return defaultDateFormatter(date, vm);\n        }\n      }\n    },\n    dateParser: {\n      type: Function,\n      \"default\": function _default(date, vm) {\n        if (typeof config.defaultDateParser === 'function') {\n          return config.defaultDateParser(date);\n        } else {\n          return defaultDateParser(date, vm);\n        }\n      }\n    },\n    dateCreator: {\n      type: Function,\n      \"default\": function _default() {\n        if (typeof config.defaultDateCreator === 'function') {\n          return config.defaultDateCreator();\n        } else {\n          return new Date();\n        }\n      }\n    },\n    mobileNative: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultDatepickerMobileNative;\n      }\n    },\n    position: String,\n    iconRight: String,\n    iconRightClickable: Boolean,\n    events: Array,\n    indicators: {\n      type: String,\n      \"default\": 'dots'\n    },\n    openOnFocus: Boolean,\n    iconPrev: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultIconPrev;\n      }\n    },\n    iconNext: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultIconNext;\n      }\n    },\n    yearsRange: {\n      type: Array,\n      \"default\": function _default() {\n        return config.defaultDatepickerYearsRange;\n      }\n    },\n    type: {\n      type: String,\n      validator: function validator(value) {\n        return ['month'].indexOf(value) >= 0;\n      }\n    },\n    nearbyMonthDays: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultDatepickerNearbyMonthDays;\n      }\n    },\n    nearbySelectableMonthDays: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultDatepickerNearbySelectableMonthDays;\n      }\n    },\n    showWeekNumber: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultDatepickerShowWeekNumber;\n      }\n    },\n    weekNumberClickable: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultDatepickerWeekNumberClickable;\n      }\n    },\n    rulesForFirstWeek: {\n      type: Number,\n      \"default\": function _default() {\n        return 4;\n      }\n    },\n    range: {\n      type: Boolean,\n      \"default\": false\n    },\n    closeOnClick: {\n      type: Boolean,\n      \"default\": true\n    },\n    multiple: {\n      type: Boolean,\n      \"default\": false\n    },\n    mobileModal: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultDatepickerMobileModal;\n      }\n    },\n    focusable: {\n      type: Boolean,\n      \"default\": true\n    },\n    trapFocus: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultTrapFocus;\n      }\n    },\n    appendToBody: Boolean,\n    ariaNextLabel: String,\n    ariaPreviousLabel: String\n  },\n  data: function data() {\n    var focusedDate = (Array.isArray(this.value) ? this.value[0] : this.value) || this.focusedDate || this.dateCreator();\n\n    if (!this.value && this.maxDate && this.maxDate.getFullYear() < focusedDate.getFullYear()) {\n      focusedDate.setFullYear(this.maxDate.getFullYear());\n    }\n\n    return {\n      dateSelected: this.value,\n      focusedDateData: {\n        day: focusedDate.getDate(),\n        month: focusedDate.getMonth(),\n        year: focusedDate.getFullYear()\n      },\n      _elementRef: 'input',\n      _isDatepicker: true\n    };\n  },\n  computed: {\n    computedValue: {\n      get: function get() {\n        return this.dateSelected;\n      },\n      set: function set(value) {\n        var _this = this;\n\n        this.updateInternalState(value);\n        if (!this.multiple) this.togglePicker(false);\n        this.$emit('input', value);\n\n        if (this.useHtml5Validation) {\n          this.$nextTick(function () {\n            _this.checkHtml5Validity();\n          });\n        }\n      }\n    },\n    formattedValue: function formattedValue() {\n      return this.formatValue(this.computedValue);\n    },\n    localeOptions: function localeOptions() {\n      return new Intl.DateTimeFormat(this.locale, {\n        year: 'numeric',\n        month: 'numeric'\n      }).resolvedOptions();\n    },\n    dtf: function dtf() {\n      return new Intl.DateTimeFormat(this.locale);\n    },\n    dtfMonth: function dtfMonth() {\n      return new Intl.DateTimeFormat(this.locale, {\n        year: this.localeOptions.year || 'numeric',\n        month: this.localeOptions.month || '2-digit'\n      });\n    },\n    newMonthNames: function newMonthNames() {\n      if (Array.isArray(this.monthNames)) {\n        return this.monthNames;\n      }\n\n      return getMonthNames(this.locale);\n    },\n    newDayNames: function newDayNames() {\n      if (Array.isArray(this.dayNames)) {\n        return this.dayNames;\n      }\n\n      return getWeekdayNames(this.locale);\n    },\n    listOfMonths: function listOfMonths() {\n      var minMonth = 0;\n      var maxMonth = 12;\n\n      if (this.minDate && this.focusedDateData.year === this.minDate.getFullYear()) {\n        minMonth = this.minDate.getMonth();\n      }\n\n      if (this.maxDate && this.focusedDateData.year === this.maxDate.getFullYear()) {\n        maxMonth = this.maxDate.getMonth();\n      }\n\n      return this.newMonthNames.map(function (name, index) {\n        return {\n          name: name,\n          index: index,\n          disabled: index < minMonth || index > maxMonth\n        };\n      });\n    },\n\n    /*\r\n     * Returns an array of years for the year dropdown. If earliest/latest\r\n     * dates are set by props, range of years will fall within those dates.\r\n     */\n    listOfYears: function listOfYears() {\n      var latestYear = this.focusedDateData.year + this.yearsRange[1];\n\n      if (this.maxDate && this.maxDate.getFullYear() < latestYear) {\n        latestYear = Math.max(this.maxDate.getFullYear(), this.focusedDateData.year);\n      }\n\n      var earliestYear = this.focusedDateData.year + this.yearsRange[0];\n\n      if (this.minDate && this.minDate.getFullYear() > earliestYear) {\n        earliestYear = Math.min(this.minDate.getFullYear(), this.focusedDateData.year);\n      }\n\n      var arrayOfYears = [];\n\n      for (var i = earliestYear; i <= latestYear; i++) {\n        arrayOfYears.push(i);\n      }\n\n      return arrayOfYears.reverse();\n    },\n    showPrev: function showPrev() {\n      if (!this.minDate) return false;\n\n      if (this.isTypeMonth) {\n        return this.focusedDateData.year <= this.minDate.getFullYear();\n      }\n\n      var dateToCheck = new Date(this.focusedDateData.year, this.focusedDateData.month);\n      var date = new Date(this.minDate.getFullYear(), this.minDate.getMonth());\n      return dateToCheck <= date;\n    },\n    showNext: function showNext() {\n      if (!this.maxDate) return false;\n\n      if (this.isTypeMonth) {\n        return this.focusedDateData.year >= this.maxDate.getFullYear();\n      }\n\n      var dateToCheck = new Date(this.focusedDateData.year, this.focusedDateData.month);\n      var date = new Date(this.maxDate.getFullYear(), this.maxDate.getMonth());\n      return dateToCheck >= date;\n    },\n    isMobile: function isMobile$1() {\n      return this.mobileNative && isMobile.any();\n    },\n    isTypeMonth: function isTypeMonth() {\n      return this.type === 'month';\n    },\n    ariaRole: function ariaRole() {\n      if (!this.inline) {\n        return 'dialog';\n      }\n    }\n  },\n  watch: {\n    /**\r\n     * When v-model is changed:\r\n     *   1. Update internal value.\r\n     *   2. If it's invalid, validate again.\r\n     */\n    value: function value(_value) {\n      this.updateInternalState(_value);\n      if (!this.multiple) this.togglePicker(false);\n    },\n    focusedDate: function focusedDate(value) {\n      if (value) {\n        this.focusedDateData = {\n          day: value.getDate(),\n          month: value.getMonth(),\n          year: value.getFullYear()\n        };\n      }\n    },\n\n    /*\r\n     * Emit input event on month and/or year change\r\n     */\n    'focusedDateData.month': function focusedDateDataMonth(value) {\n      this.$emit('change-month', value);\n    },\n    'focusedDateData.year': function focusedDateDataYear(value) {\n      this.$emit('change-year', value);\n    }\n  },\n  methods: {\n    /*\r\n     * Parse string into date\r\n     */\n    onChange: function onChange(value) {\n      var date = this.dateParser(value, this);\n\n      if (date && (!isNaN(date) || Array.isArray(date) && date.length === 2 && !isNaN(date[0]) && !isNaN(date[1]))) {\n        this.computedValue = date;\n      } else {\n        // Force refresh input value when not valid date\n        this.computedValue = null;\n\n        if (this.$refs.input) {\n          this.$refs.input.newValue = this.computedValue;\n        }\n      }\n    },\n\n    /*\r\n     * Format date into string\r\n     */\n    formatValue: function formatValue(value) {\n      if (Array.isArray(value)) {\n        var isArrayWithValidDates = Array.isArray(value) && value.every(function (v) {\n          return !isNaN(v);\n        });\n        return isArrayWithValidDates ? this.dateFormatter(_toConsumableArray(value), this) : null;\n      }\n\n      return value && !isNaN(value) ? this.dateFormatter(value, this) : null;\n    },\n\n    /*\r\n     * Either decrement month by 1 if not January or decrement year by 1\r\n     * and set month to 11 (December) or decrement year when 'month'\r\n     */\n    prev: function prev() {\n      if (this.disabled) return;\n\n      if (this.isTypeMonth) {\n        this.focusedDateData.year -= 1;\n      } else {\n        if (this.focusedDateData.month > 0) {\n          this.focusedDateData.month -= 1;\n        } else {\n          this.focusedDateData.month = 11;\n          this.focusedDateData.year -= 1;\n        }\n      }\n    },\n\n    /*\r\n     * Either increment month by 1 if not December or increment year by 1\r\n     * and set month to 0 (January) or increment year when 'month'\r\n     */\n    next: function next() {\n      if (this.disabled) return;\n\n      if (this.isTypeMonth) {\n        this.focusedDateData.year += 1;\n      } else {\n        if (this.focusedDateData.month < 11) {\n          this.focusedDateData.month += 1;\n        } else {\n          this.focusedDateData.month = 0;\n          this.focusedDateData.year += 1;\n        }\n      }\n    },\n    formatNative: function formatNative(value) {\n      return this.isTypeMonth ? this.formatYYYYMM(value) : this.formatYYYYMMDD(value);\n    },\n\n    /*\r\n     * Format date into string 'YYYY-MM-DD'\r\n     */\n    formatYYYYMMDD: function formatYYYYMMDD(value) {\n      var date = new Date(value);\n\n      if (value && !isNaN(date)) {\n        var year = date.getFullYear();\n        var month = date.getMonth() + 1;\n        var day = date.getDate();\n        return year + '-' + ((month < 10 ? '0' : '') + month) + '-' + ((day < 10 ? '0' : '') + day);\n      }\n\n      return '';\n    },\n\n    /*\r\n     * Format date into string 'YYYY-MM'\r\n     */\n    formatYYYYMM: function formatYYYYMM(value) {\n      var date = new Date(value);\n\n      if (value && !isNaN(date)) {\n        var year = date.getFullYear();\n        var month = date.getMonth() + 1;\n        return year + '-' + ((month < 10 ? '0' : '') + month);\n      }\n\n      return '';\n    },\n\n    /*\r\n     * Parse date from string\r\n     */\n    onChangeNativePicker: function onChangeNativePicker(event) {\n      var date = event.target.value;\n      var s = date ? date.split('-') : [];\n\n      if (s.length === 3) {\n        var year = parseInt(s[0], 10);\n        var month = parseInt(s[1]) - 1;\n        var day = parseInt(s[2]);\n        this.computedValue = new Date(year, month, day);\n      } else {\n        this.computedValue = null;\n      }\n    },\n    updateInternalState: function updateInternalState(value) {\n      if (this.dateSelected === value) return;\n      var isArray = Array.isArray(value);\n      var currentDate = isArray ? !value.length ? this.dateCreator() : value[value.length - 1] : !value ? this.dateCreator() : value;\n\n      if (!isArray || isArray && this.dateSelected && value.length > this.dateSelected.length) {\n        this.focusedDateData = {\n          day: currentDate.getDate(),\n          month: currentDate.getMonth(),\n          year: currentDate.getFullYear()\n        };\n      }\n\n      this.dateSelected = value;\n    },\n\n    /*\r\n     * Toggle datepicker\r\n     */\n    togglePicker: function togglePicker(active) {\n      if (this.$refs.dropdown) {\n        var isActive = typeof active === 'boolean' ? active : !this.$refs.dropdown.isActive;\n\n        if (isActive) {\n          this.$refs.dropdown.isActive = isActive;\n        } else if (this.closeOnClick) {\n          this.$refs.dropdown.isActive = isActive;\n        }\n      }\n    },\n\n    /*\r\n     * Call default onFocus method and show datepicker\r\n     */\n    handleOnFocus: function handleOnFocus(event) {\n      this.onFocus(event);\n\n      if (this.openOnFocus) {\n        this.togglePicker(true);\n      }\n    },\n\n    /*\r\n     * Toggle dropdown\r\n     */\n    toggle: function toggle() {\n      if (this.mobileNative && this.isMobile) {\n        var input = this.$refs.input.$refs.input;\n        input.focus();\n        input.click();\n        return;\n      }\n\n      this.$refs.dropdown.toggle();\n    },\n\n    /*\r\n     * Avoid dropdown toggle when is already visible\r\n     */\n    onInputClick: function onInputClick(event) {\n      if (this.$refs.dropdown.isActive) {\n        event.stopPropagation();\n      }\n    },\n\n    /**\r\n     * Keypress event that is bound to the document.\r\n     */\n    keyPress: function keyPress(_ref) {\n      var key = _ref.key;\n\n      if (this.$refs.dropdown && this.$refs.dropdown.isActive && (key === 'Escape' || key === 'Esc')) {\n        this.togglePicker(false);\n      }\n    },\n\n    /**\r\n     * Emit 'blur' event on dropdown is not active (closed)\r\n     */\n    onActiveChange: function onActiveChange(value) {\n      if (!value) {\n        this.onBlur();\n      }\n      /*\r\n       * Emit 'active-change' when on dropdown active state change\r\n       */\n\n\n      this.$emit('active-change', value);\n    },\n    changeFocus: function changeFocus(day) {\n      this.focusedDateData = {\n        day: day.getDate(),\n        month: day.getMonth(),\n        year: day.getFullYear()\n      };\n    }\n  },\n  created: function created() {\n    if (typeof window !== 'undefined') {\n      document.addEventListener('keyup', this.keyPress);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('keyup', this.keyPress);\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$3 = script$3;\n/* template */\n\nvar __vue_render__$3 = function __vue_render__$3() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"datepicker control\",\n    \"class\": [_vm.size, {\n      'is-expanded': _vm.expanded\n    }]\n  }, [!_vm.isMobile || _vm.inline ? _c('b-dropdown', {\n    ref: \"dropdown\",\n    attrs: {\n      \"position\": _vm.position,\n      \"disabled\": _vm.disabled,\n      \"inline\": _vm.inline,\n      \"mobile-modal\": _vm.mobileModal,\n      \"trap-focus\": _vm.trapFocus,\n      \"aria-role\": _vm.ariaRole,\n      \"append-to-body\": _vm.appendToBody,\n      \"append-to-body-copy-parent\": \"\"\n    },\n    on: {\n      \"active-change\": _vm.onActiveChange\n    },\n    scopedSlots: _vm._u([!_vm.inline ? {\n      key: \"trigger\",\n      fn: function fn() {\n        return [_vm._t(\"trigger\", [_c('b-input', _vm._b({\n          ref: \"input\",\n          attrs: {\n            \"autocomplete\": \"off\",\n            \"value\": _vm.formattedValue,\n            \"placeholder\": _vm.placeholder,\n            \"size\": _vm.size,\n            \"icon\": _vm.icon,\n            \"icon-right\": _vm.iconRight,\n            \"icon-right-clickable\": _vm.iconRightClickable,\n            \"icon-pack\": _vm.iconPack,\n            \"rounded\": _vm.rounded,\n            \"loading\": _vm.loading,\n            \"disabled\": _vm.disabled,\n            \"readonly\": !_vm.editable,\n            \"use-html5-validation\": false\n          },\n          on: {\n            \"icon-right-click\": function iconRightClick($event) {\n              return _vm.$emit('icon-right-click', $event);\n            },\n            \"focus\": _vm.handleOnFocus\n          },\n          nativeOn: {\n            \"click\": function click($event) {\n              return _vm.onInputClick($event);\n            },\n            \"keyup\": function keyup($event) {\n              if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) {\n                return null;\n              }\n\n              return _vm.togglePicker(true);\n            },\n            \"change\": function change($event) {\n              return _vm.onChange($event.target.value);\n            }\n          }\n        }, 'b-input', _vm.$attrs, false))])];\n      },\n      proxy: true\n    } : null], null, true)\n  }, [_c('b-dropdown-item', {\n    \"class\": {\n      'dropdown-horizonal-timepicker': _vm.horizontalTimePicker\n    },\n    attrs: {\n      \"disabled\": _vm.disabled,\n      \"focusable\": _vm.focusable,\n      \"custom\": \"\"\n    }\n  }, [_c('div', [_c('header', {\n    staticClass: \"datepicker-header\"\n  }, [_vm.$slots.header !== undefined && _vm.$slots.header.length ? [_vm._t(\"header\")] : _c('div', {\n    staticClass: \"pagination field is-centered\",\n    \"class\": _vm.size\n  }, [_c('a', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: !_vm.showPrev && !_vm.disabled,\n      expression: \"!showPrev && !disabled\"\n    }],\n    staticClass: \"pagination-previous\",\n    attrs: {\n      \"role\": \"button\",\n      \"href\": \"#\",\n      \"disabled\": _vm.disabled,\n      \"aria-label\": _vm.ariaPreviousLabel\n    },\n    on: {\n      \"click\": function click($event) {\n        $event.preventDefault();\n        return _vm.prev($event);\n      },\n      \"keydown\": [function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.prev($event);\n      }, function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"space\", 32, $event.key, [\" \", \"Spacebar\"])) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.prev($event);\n      }]\n    }\n  }, [_c('b-icon', {\n    attrs: {\n      \"icon\": _vm.iconPrev,\n      \"pack\": _vm.iconPack,\n      \"both\": \"\",\n      \"type\": \"is-primary is-clickable\"\n    }\n  })], 1), _c('a', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: !_vm.showNext && !_vm.disabled,\n      expression: \"!showNext && !disabled\"\n    }],\n    staticClass: \"pagination-next\",\n    attrs: {\n      \"role\": \"button\",\n      \"href\": \"#\",\n      \"disabled\": _vm.disabled,\n      \"aria-label\": _vm.ariaNextLabel\n    },\n    on: {\n      \"click\": function click($event) {\n        $event.preventDefault();\n        return _vm.next($event);\n      },\n      \"keydown\": [function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.next($event);\n      }, function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"space\", 32, $event.key, [\" \", \"Spacebar\"])) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.next($event);\n      }]\n    }\n  }, [_c('b-icon', {\n    attrs: {\n      \"icon\": _vm.iconNext,\n      \"pack\": _vm.iconPack,\n      \"both\": \"\",\n      \"type\": \"is-primary is-clickable\"\n    }\n  })], 1), _c('div', {\n    staticClass: \"pagination-list\"\n  }, [_c('b-field', [!_vm.isTypeMonth ? _c('b-select', {\n    attrs: {\n      \"disabled\": _vm.disabled,\n      \"size\": _vm.size\n    },\n    model: {\n      value: _vm.focusedDateData.month,\n      callback: function callback($$v) {\n        _vm.$set(_vm.focusedDateData, \"month\", $$v);\n      },\n      expression: \"focusedDateData.month\"\n    }\n  }, _vm._l(_vm.listOfMonths, function (month) {\n    return _c('option', {\n      key: month.name,\n      attrs: {\n        \"disabled\": month.disabled\n      },\n      domProps: {\n        \"value\": month.index\n      }\n    }, [_vm._v(\" \" + _vm._s(month.name) + \" \")]);\n  }), 0) : _vm._e(), _c('b-select', {\n    attrs: {\n      \"disabled\": _vm.disabled,\n      \"size\": _vm.size\n    },\n    model: {\n      value: _vm.focusedDateData.year,\n      callback: function callback($$v) {\n        _vm.$set(_vm.focusedDateData, \"year\", $$v);\n      },\n      expression: \"focusedDateData.year\"\n    }\n  }, _vm._l(_vm.listOfYears, function (year) {\n    return _c('option', {\n      key: year,\n      domProps: {\n        \"value\": year\n      }\n    }, [_vm._v(\" \" + _vm._s(year) + \" \")]);\n  }), 0)], 1)], 1)])], 2), !_vm.isTypeMonth ? _c('div', {\n    staticClass: \"datepicker-content\",\n    \"class\": {\n      'content-horizonal-timepicker': _vm.horizontalTimePicker\n    }\n  }, [_c('b-datepicker-table', {\n    attrs: {\n      \"day-names\": _vm.newDayNames,\n      \"month-names\": _vm.newMonthNames,\n      \"first-day-of-week\": _vm.firstDayOfWeek,\n      \"rules-for-first-week\": _vm.rulesForFirstWeek,\n      \"min-date\": _vm.minDate,\n      \"max-date\": _vm.maxDate,\n      \"focused\": _vm.focusedDateData,\n      \"disabled\": _vm.disabled,\n      \"unselectable-dates\": _vm.unselectableDates,\n      \"unselectable-days-of-week\": _vm.unselectableDaysOfWeek,\n      \"selectable-dates\": _vm.selectableDates,\n      \"events\": _vm.events,\n      \"indicators\": _vm.indicators,\n      \"date-creator\": _vm.dateCreator,\n      \"type-month\": _vm.isTypeMonth,\n      \"nearby-month-days\": _vm.nearbyMonthDays,\n      \"nearby-selectable-month-days\": _vm.nearbySelectableMonthDays,\n      \"show-week-number\": _vm.showWeekNumber,\n      \"week-number-clickable\": _vm.weekNumberClickable,\n      \"range\": _vm.range,\n      \"multiple\": _vm.multiple\n    },\n    on: {\n      \"range-start\": function rangeStart(date) {\n        return _vm.$emit('range-start', date);\n      },\n      \"range-end\": function rangeEnd(date) {\n        return _vm.$emit('range-end', date);\n      },\n      \"close\": function close($event) {\n        return _vm.togglePicker(false);\n      },\n      \"update:focused\": function updateFocused($event) {\n        _vm.focusedDateData = $event;\n      }\n    },\n    model: {\n      value: _vm.computedValue,\n      callback: function callback($$v) {\n        _vm.computedValue = $$v;\n      },\n      expression: \"computedValue\"\n    }\n  })], 1) : _c('div', [_c('b-datepicker-month', {\n    attrs: {\n      \"month-names\": _vm.newMonthNames,\n      \"min-date\": _vm.minDate,\n      \"max-date\": _vm.maxDate,\n      \"focused\": _vm.focusedDateData,\n      \"disabled\": _vm.disabled,\n      \"unselectable-dates\": _vm.unselectableDates,\n      \"unselectable-days-of-week\": _vm.unselectableDaysOfWeek,\n      \"selectable-dates\": _vm.selectableDates,\n      \"events\": _vm.events,\n      \"indicators\": _vm.indicators,\n      \"date-creator\": _vm.dateCreator,\n      \"range\": _vm.range,\n      \"multiple\": _vm.multiple\n    },\n    on: {\n      \"range-start\": function rangeStart(date) {\n        return _vm.$emit('range-start', date);\n      },\n      \"range-end\": function rangeEnd(date) {\n        return _vm.$emit('range-end', date);\n      },\n      \"close\": function close($event) {\n        return _vm.togglePicker(false);\n      },\n      \"change-focus\": _vm.changeFocus,\n      \"update:focused\": function updateFocused($event) {\n        _vm.focusedDateData = $event;\n      }\n    },\n    model: {\n      value: _vm.computedValue,\n      callback: function callback($$v) {\n        _vm.computedValue = $$v;\n      },\n      expression: \"computedValue\"\n    }\n  })], 1)]), _vm.$slots[\"default\"] !== undefined && _vm.$slots[\"default\"].length ? _c('footer', {\n    staticClass: \"datepicker-footer\",\n    \"class\": {\n      'footer-horizontal-timepicker': _vm.horizontalTimePicker\n    }\n  }, [_vm._t(\"default\")], 2) : _vm._e()])], 1) : _c('b-input', _vm._b({\n    ref: \"input\",\n    attrs: {\n      \"type\": !_vm.isTypeMonth ? 'date' : 'month',\n      \"autocomplete\": \"off\",\n      \"value\": _vm.formatNative(_vm.computedValue),\n      \"placeholder\": _vm.placeholder,\n      \"size\": _vm.size,\n      \"icon\": _vm.icon,\n      \"icon-pack\": _vm.iconPack,\n      \"rounded\": _vm.rounded,\n      \"loading\": _vm.loading,\n      \"max\": _vm.formatNative(_vm.maxDate),\n      \"min\": _vm.formatNative(_vm.minDate),\n      \"disabled\": _vm.disabled,\n      \"readonly\": false,\n      \"use-html5-validation\": false\n    },\n    on: {\n      \"focus\": _vm.onFocus,\n      \"blur\": _vm.onBlur\n    },\n    nativeOn: {\n      \"change\": function change($event) {\n        return _vm.onChangeNativePicker($event);\n      }\n    }\n  }, 'b-input', _vm.$attrs, false))], 1);\n};\n\nvar __vue_staticRenderFns__$3 = [];\n/* style */\n\nvar __vue_inject_styles__$3 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$3 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$3 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$3 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Datepicker = __vue_normalize__({\n  render: __vue_render__$3,\n  staticRenderFns: __vue_staticRenderFns__$3\n}, __vue_inject_styles__$3, __vue_script__$3, __vue_scope_id__$3, __vue_is_functional_template__$3, __vue_module_identifier__$3, undefined, undefined);\n\nexport { Datepicker as D };","map":null,"metadata":{},"sourceType":"module"}