{"ast":null,"code":"import { _ as _defineProperty, d as _toConsumableArray } from './chunk-455cdeae.js';\nimport { bound } from './helpers.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js';\nimport { T as Tooltip } from './chunk-9b0b8225.js';\nvar script = {\n  name: 'BSliderThumb',\n  components: _defineProperty({}, Tooltip.name, Tooltip),\n  inheritAttrs: false,\n  props: {\n    value: {\n      type: Number,\n      \"default\": 0\n    },\n    type: {\n      type: String,\n      \"default\": ''\n    },\n    tooltip: {\n      type: Boolean,\n      \"default\": true\n    },\n    indicator: {\n      type: Boolean,\n      \"default\": false\n    },\n    customFormatter: Function,\n    format: {\n      type: String,\n      \"default\": 'raw',\n      validator: function validator(value) {\n        return ['raw', 'percent'].indexOf(value) >= 0;\n      }\n    },\n    locale: {\n      type: [String, Array],\n      \"default\": function _default() {\n        return config.defaultLocale;\n      }\n    },\n    tooltipAlways: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      isFocused: false,\n      dragging: false,\n      startX: 0,\n      startPosition: 0,\n      newPosition: null,\n      oldValue: this.value\n    };\n  },\n  computed: {\n    disabled: function disabled() {\n      return this.$parent.disabled;\n    },\n    max: function max() {\n      return this.$parent.max;\n    },\n    min: function min() {\n      return this.$parent.min;\n    },\n    step: function step() {\n      return this.$parent.step;\n    },\n    precision: function precision() {\n      return this.$parent.precision;\n    },\n    currentPosition: function currentPosition() {\n      return \"\".concat((this.value - this.min) / (this.max - this.min) * 100, \"%\");\n    },\n    wrapperStyle: function wrapperStyle() {\n      return {\n        left: this.currentPosition\n      };\n    },\n    formattedValue: function formattedValue() {\n      if (typeof this.customFormatter !== 'undefined') {\n        return this.customFormatter(this.value);\n      }\n\n      if (this.format === 'percent') {\n        return new Intl.NumberFormat(this.locale, {\n          style: 'percent'\n        }).format((this.value - this.min) / (this.max - this.min));\n      }\n\n      return new Intl.NumberFormat(this.locale).format(this.value);\n    }\n  },\n  methods: {\n    onFocus: function onFocus() {\n      this.isFocused = true;\n    },\n    onBlur: function onBlur() {\n      this.isFocused = false;\n    },\n    onButtonDown: function onButtonDown(event) {\n      if (this.disabled) return;\n      event.preventDefault();\n      this.onDragStart(event);\n\n      if (typeof window !== 'undefined') {\n        document.addEventListener('mousemove', this.onDragging);\n        document.addEventListener('touchmove', this.onDragging);\n        document.addEventListener('mouseup', this.onDragEnd);\n        document.addEventListener('touchend', this.onDragEnd);\n        document.addEventListener('contextmenu', this.onDragEnd);\n      }\n    },\n    onLeftKeyDown: function onLeftKeyDown() {\n      if (this.disabled || this.value === this.min) return;\n      this.newPosition = parseFloat(this.currentPosition) - this.step / (this.max - this.min) * 100;\n      this.setPosition(this.newPosition);\n      this.$parent.emitValue('change');\n    },\n    onRightKeyDown: function onRightKeyDown() {\n      if (this.disabled || this.value === this.max) return;\n      this.newPosition = parseFloat(this.currentPosition) + this.step / (this.max - this.min) * 100;\n      this.setPosition(this.newPosition);\n      this.$parent.emitValue('change');\n    },\n    onHomeKeyDown: function onHomeKeyDown() {\n      if (this.disabled || this.value === this.min) return;\n      this.newPosition = 0;\n      this.setPosition(this.newPosition);\n      this.$parent.emitValue('change');\n    },\n    onEndKeyDown: function onEndKeyDown() {\n      if (this.disabled || this.value === this.max) return;\n      this.newPosition = 100;\n      this.setPosition(this.newPosition);\n      this.$parent.emitValue('change');\n    },\n    onDragStart: function onDragStart(event) {\n      this.dragging = true;\n      this.$emit('dragstart');\n\n      if (event.type === 'touchstart') {\n        event.clientX = event.touches[0].clientX;\n      }\n\n      this.startX = event.clientX;\n      this.startPosition = parseFloat(this.currentPosition);\n      this.newPosition = this.startPosition;\n    },\n    onDragging: function onDragging(event) {\n      if (this.dragging) {\n        if (event.type === 'touchmove') {\n          event.clientX = event.touches[0].clientX;\n        }\n\n        var diff = (event.clientX - this.startX) / this.$parent.sliderSize() * 100;\n        this.newPosition = this.startPosition + diff;\n        this.setPosition(this.newPosition);\n      }\n    },\n    onDragEnd: function onDragEnd() {\n      this.dragging = false;\n      this.$emit('dragend');\n\n      if (this.value !== this.oldValue) {\n        this.$parent.emitValue('change');\n      }\n\n      this.setPosition(this.newPosition);\n\n      if (typeof window !== 'undefined') {\n        document.removeEventListener('mousemove', this.onDragging);\n        document.removeEventListener('touchmove', this.onDragging);\n        document.removeEventListener('mouseup', this.onDragEnd);\n        document.removeEventListener('touchend', this.onDragEnd);\n        document.removeEventListener('contextmenu', this.onDragEnd);\n      }\n    },\n    setPosition: function setPosition(percent) {\n      if (percent === null || isNaN(percent)) return;\n\n      if (percent < 0) {\n        percent = 0;\n      } else if (percent > 100) {\n        percent = 100;\n      }\n\n      var stepLength = 100 / ((this.max - this.min) / this.step);\n      var steps = Math.round(percent / stepLength);\n      var value = steps * stepLength / 100 * (this.max - this.min) + this.min;\n      value = parseFloat(value.toFixed(this.precision));\n      this.$emit('input', value);\n\n      if (!this.dragging && value !== this.oldValue) {\n        this.oldValue = value;\n      }\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"b-slider-thumb-wrapper\",\n    \"class\": {\n      'is-dragging': _vm.dragging,\n      'has-indicator': _vm.indicator\n    },\n    style: _vm.wrapperStyle\n  }, [_c('b-tooltip', {\n    attrs: {\n      \"label\": _vm.formattedValue,\n      \"type\": _vm.type,\n      \"always\": _vm.dragging || _vm.isFocused || _vm.tooltipAlways,\n      \"active\": !_vm.disabled && _vm.tooltip\n    }\n  }, [_c('div', _vm._b({\n    staticClass: \"b-slider-thumb\",\n    attrs: {\n      \"tabindex\": _vm.disabled ? false : 0\n    },\n    on: {\n      \"mousedown\": _vm.onButtonDown,\n      \"touchstart\": _vm.onButtonDown,\n      \"focus\": _vm.onFocus,\n      \"blur\": _vm.onBlur,\n      \"keydown\": [function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"left\", 37, $event.key, [\"Left\", \"ArrowLeft\"])) {\n          return null;\n        }\n\n        if ('button' in $event && $event.button !== 0) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.onLeftKeyDown($event);\n      }, function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"right\", 39, $event.key, [\"Right\", \"ArrowRight\"])) {\n          return null;\n        }\n\n        if ('button' in $event && $event.button !== 2) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.onRightKeyDown($event);\n      }, function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"down\", 40, $event.key, [\"Down\", \"ArrowDown\"])) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.onLeftKeyDown($event);\n      }, function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"up\", 38, $event.key, [\"Up\", \"ArrowUp\"])) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.onRightKeyDown($event);\n      }, function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"home\", undefined, $event.key, undefined)) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.onHomeKeyDown($event);\n      }, function ($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"end\", undefined, $event.key, undefined)) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.onEndKeyDown($event);\n      }]\n    }\n  }, 'div', _vm.$attrs, false), [_vm.indicator ? _c('span', [_vm._v(_vm._s(_vm.formattedValue))]) : _vm._e()])])], 1);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar SliderThumb = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined); //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nvar script$1 = {\n  name: 'BSliderTick',\n  props: {\n    value: {\n      type: Number,\n      \"default\": 0\n    }\n  },\n  computed: {\n    position: function position() {\n      var pos = (this.value - this.$parent.min) / (this.$parent.max - this.$parent.min) * 100;\n      return pos >= 0 && pos <= 100 ? pos : 0;\n    },\n    hidden: function hidden() {\n      return this.value === this.$parent.min || this.value === this.$parent.max;\n    }\n  },\n  methods: {\n    getTickStyle: function getTickStyle(position) {\n      return {\n        'left': position + '%'\n      };\n    }\n  },\n  created: function created() {\n    if (!this.$parent.$data._isSlider) {\n      this.$destroy();\n      throw new Error('You should wrap bSliderTick on a bSlider');\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$1 = script$1;\n/* template */\n\nvar __vue_render__$1 = function __vue_render__$1() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"b-slider-tick\",\n    \"class\": {\n      'is-tick-hidden': _vm.hidden\n    },\n    style: _vm.getTickStyle(_vm.position)\n  }, [_vm.$slots[\"default\"] ? _c('span', {\n    staticClass: \"b-slider-tick-label\"\n  }, [_vm._t(\"default\")], 2) : _vm._e()]);\n};\n\nvar __vue_staticRenderFns__$1 = [];\n/* style */\n\nvar __vue_inject_styles__$1 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$1 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$1 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$1 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar SliderTick = __vue_normalize__({\n  render: __vue_render__$1,\n  staticRenderFns: __vue_staticRenderFns__$1\n}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, undefined, undefined);\n\nvar _components;\n\nvar script$2 = {\n  name: 'BSlider',\n  components: (_components = {}, _defineProperty(_components, SliderThumb.name, SliderThumb), _defineProperty(_components, SliderTick.name, SliderTick), _components),\n  props: {\n    value: {\n      type: [Number, Array],\n      \"default\": 0\n    },\n    min: {\n      type: Number,\n      \"default\": 0\n    },\n    max: {\n      type: Number,\n      \"default\": 100\n    },\n    step: {\n      type: Number,\n      \"default\": 1\n    },\n    type: {\n      type: String,\n      \"default\": 'is-primary'\n    },\n    size: String,\n    ticks: {\n      type: Boolean,\n      \"default\": false\n    },\n    tooltip: {\n      type: Boolean,\n      \"default\": true\n    },\n    tooltipType: String,\n    rounded: {\n      type: Boolean,\n      \"default\": false\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    lazy: {\n      type: Boolean,\n      \"default\": false\n    },\n    customFormatter: Function,\n    ariaLabel: [String, Array],\n    biggerSliderFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    indicator: {\n      type: Boolean,\n      \"default\": false\n    },\n    format: {\n      type: String,\n      \"default\": 'raw',\n      validator: function validator(value) {\n        return ['raw', 'percent'].indexOf(value) >= 0;\n      }\n    },\n    locale: {\n      type: [String, Array],\n      \"default\": function _default() {\n        return config.defaultLocale;\n      }\n    },\n    tooltipAlways: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      value1: null,\n      value2: null,\n      dragging: false,\n      isRange: false,\n      _isSlider: true // Used by Thumb and Tick\n\n    };\n  },\n  computed: {\n    newTooltipType: function newTooltipType() {\n      return this.tooltipType ? this.tooltipType : this.type;\n    },\n    tickValues: function tickValues() {\n      if (!this.ticks || this.min > this.max || this.step === 0) return [];\n      var result = [];\n\n      for (var i = this.min + this.step; i < this.max; i = i + this.step) {\n        result.push(i);\n      }\n\n      return result;\n    },\n    minValue: function minValue() {\n      return Math.min(this.value1, this.value2);\n    },\n    maxValue: function maxValue() {\n      return Math.max(this.value1, this.value2);\n    },\n    barSize: function barSize() {\n      return this.isRange ? \"\".concat(100 * (this.maxValue - this.minValue) / (this.max - this.min), \"%\") : \"\".concat(100 * (this.value1 - this.min) / (this.max - this.min), \"%\");\n    },\n    barStart: function barStart() {\n      return this.isRange ? \"\".concat(100 * (this.minValue - this.min) / (this.max - this.min), \"%\") : '0%';\n    },\n    precision: function precision() {\n      var precisions = [this.min, this.max, this.step].map(function (item) {\n        var decimal = ('' + item).split('.')[1];\n        return decimal ? decimal.length : 0;\n      });\n      return Math.max.apply(Math, _toConsumableArray(precisions));\n    },\n    barStyle: function barStyle() {\n      return {\n        width: this.barSize,\n        left: this.barStart\n      };\n    },\n    rootClasses: function rootClasses() {\n      return {\n        'is-rounded': this.rounded,\n        'is-dragging': this.dragging,\n        'is-disabled': this.disabled,\n        'slider-focus': this.biggerSliderFocus\n      };\n    }\n  },\n  watch: {\n    /**\r\n    * When v-model is changed set the new active step.\r\n    */\n    value: function value(_value) {\n      this.setValues(_value);\n    },\n    value1: function value1() {\n      this.onInternalValueUpdate();\n    },\n    value2: function value2() {\n      this.onInternalValueUpdate();\n    },\n    min: function min() {\n      this.setValues(this.value);\n    },\n    max: function max() {\n      this.setValues(this.value);\n    }\n  },\n  methods: {\n    setValues: function setValues(newValue) {\n      if (this.min > this.max) {\n        return;\n      }\n\n      if (Array.isArray(newValue)) {\n        this.isRange = true;\n        var smallValue = typeof newValue[0] !== 'number' || isNaN(newValue[0]) ? this.min : bound(newValue[0], this.min, this.max);\n        var largeValue = typeof newValue[1] !== 'number' || isNaN(newValue[1]) ? this.max : bound(newValue[1], this.min, this.max);\n        this.value1 = this.isThumbReversed ? largeValue : smallValue;\n        this.value2 = this.isThumbReversed ? smallValue : largeValue;\n      } else {\n        this.isRange = false;\n        this.value1 = isNaN(newValue) ? this.min : bound(newValue, this.min, this.max);\n        this.value2 = null;\n      }\n    },\n    onInternalValueUpdate: function onInternalValueUpdate() {\n      if (this.isRange) {\n        this.isThumbReversed = this.value1 > this.value2;\n      }\n\n      if (!this.lazy || !this.dragging) {\n        this.emitValue('input');\n      }\n\n      if (this.dragging) {\n        this.emitValue('dragging');\n      }\n    },\n    sliderSize: function sliderSize() {\n      return this.$refs.slider.getBoundingClientRect().width;\n    },\n    onSliderClick: function onSliderClick(event) {\n      if (this.disabled || this.isTrackClickDisabled) return;\n      var sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left;\n      var percent = (event.clientX - sliderOffsetLeft) / this.sliderSize() * 100;\n      var targetValue = this.min + percent * (this.max - this.min) / 100;\n      var diffFirst = Math.abs(targetValue - this.value1);\n\n      if (!this.isRange) {\n        if (diffFirst < this.step / 2) return;\n        this.$refs.button1.setPosition(percent);\n      } else {\n        var diffSecond = Math.abs(targetValue - this.value2);\n\n        if (diffFirst <= diffSecond) {\n          if (diffFirst < this.step / 2) return;\n          this.$refs['button1'].setPosition(percent);\n        } else {\n          if (diffSecond < this.step / 2) return;\n          this.$refs['button2'].setPosition(percent);\n        }\n      }\n\n      this.emitValue('change');\n    },\n    onDragStart: function onDragStart() {\n      this.dragging = true;\n      this.$emit('dragstart');\n    },\n    onDragEnd: function onDragEnd() {\n      var _this = this;\n\n      this.isTrackClickDisabled = true;\n      setTimeout(function () {\n        // avoid triggering onSliderClick after dragend\n        _this.isTrackClickDisabled = false;\n      }, 0);\n      this.dragging = false;\n      this.$emit('dragend');\n\n      if (this.lazy) {\n        this.emitValue('input');\n      }\n    },\n    emitValue: function emitValue(type) {\n      this.$emit(type, this.isRange ? [this.minValue, this.maxValue] : this.value1);\n    }\n  },\n  created: function created() {\n    this.isThumbReversed = false;\n    this.isTrackClickDisabled = false;\n    this.setValues(this.value);\n  }\n};\n/* script */\n\nvar __vue_script__$2 = script$2;\n/* template */\n\nvar __vue_render__$2 = function __vue_render__$2() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    staticClass: \"b-slider\",\n    \"class\": [_vm.size, _vm.type, _vm.rootClasses],\n    on: {\n      \"click\": _vm.onSliderClick\n    }\n  }, [_c('div', {\n    ref: \"slider\",\n    staticClass: \"b-slider-track\"\n  }, [_c('div', {\n    staticClass: \"b-slider-fill\",\n    style: _vm.barStyle\n  }), _vm.ticks ? _vm._l(_vm.tickValues, function (val, key) {\n    return _c('b-slider-tick', {\n      key: key,\n      attrs: {\n        \"value\": val\n      }\n    });\n  }) : _vm._e(), _vm._t(\"default\"), _c('b-slider-thumb', {\n    ref: \"button1\",\n    attrs: {\n      \"tooltip-always\": _vm.tooltipAlways,\n      \"type\": _vm.newTooltipType,\n      \"tooltip\": _vm.tooltip,\n      \"custom-formatter\": _vm.customFormatter,\n      \"indicator\": _vm.indicator,\n      \"format\": _vm.format,\n      \"locale\": _vm.locale,\n      \"role\": \"slider\",\n      \"aria-valuenow\": _vm.value1,\n      \"aria-valuemin\": _vm.min,\n      \"aria-valuemax\": _vm.max,\n      \"aria-orientation\": \"horizontal\",\n      \"aria-label\": Array.isArray(_vm.ariaLabel) ? _vm.ariaLabel[0] : _vm.ariaLabel,\n      \"aria-disabled\": _vm.disabled\n    },\n    on: {\n      \"dragstart\": _vm.onDragStart,\n      \"dragend\": _vm.onDragEnd\n    },\n    model: {\n      value: _vm.value1,\n      callback: function callback($$v) {\n        _vm.value1 = $$v;\n      },\n      expression: \"value1\"\n    }\n  }), _vm.isRange ? _c('b-slider-thumb', {\n    ref: \"button2\",\n    attrs: {\n      \"tooltip-always\": _vm.tooltipAlways,\n      \"type\": _vm.newTooltipType,\n      \"tooltip\": _vm.tooltip,\n      \"custom-formatter\": _vm.customFormatter,\n      \"indicator\": _vm.indicator,\n      \"format\": _vm.format,\n      \"locale\": _vm.locale,\n      \"role\": \"slider\",\n      \"aria-valuenow\": _vm.value2,\n      \"aria-valuemin\": _vm.min,\n      \"aria-valuemax\": _vm.max,\n      \"aria-orientation\": \"horizontal\",\n      \"aria-label\": Array.isArray(_vm.ariaLabel) ? _vm.ariaLabel[1] : '',\n      \"aria-disabled\": _vm.disabled\n    },\n    on: {\n      \"dragstart\": _vm.onDragStart,\n      \"dragend\": _vm.onDragEnd\n    },\n    model: {\n      value: _vm.value2,\n      callback: function callback($$v) {\n        _vm.value2 = $$v;\n      },\n      expression: \"value2\"\n    }\n  }) : _vm._e()], 2)]);\n};\n\nvar __vue_staticRenderFns__$2 = [];\n/* style */\n\nvar __vue_inject_styles__$2 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$2 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$2 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$2 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Slider = __vue_normalize__({\n  render: __vue_render__$2,\n  staticRenderFns: __vue_staticRenderFns__$2\n}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Slider);\n    registerComponent(Vue, SliderTick);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Slider as BSlider, SliderTick as BSliderTick };","map":null,"metadata":{},"sourceType":"module"}