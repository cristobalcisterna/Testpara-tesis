{"ast":null,"code":"import { removeElement } from './helpers.js';\nimport { c as config } from './chunk-e92e3389.js';\nvar NoticeMixin = {\n  props: {\n    type: {\n      type: String,\n      \"default\": 'is-dark'\n    },\n    message: [String, Array],\n    duration: Number,\n    queue: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    indefinite: {\n      type: Boolean,\n      \"default\": false\n    },\n    pauseOnHover: {\n      type: Boolean,\n      \"default\": false\n    },\n    position: {\n      type: String,\n      \"default\": 'is-top',\n      validator: function validator(value) {\n        return ['is-top-right', 'is-top', 'is-top-left', 'is-bottom-right', 'is-bottom', 'is-bottom-left'].indexOf(value) > -1;\n      }\n    },\n    container: String\n  },\n  data: function data() {\n    return {\n      isActive: false,\n      isPaused: false,\n      parentTop: null,\n      parentBottom: null,\n      newContainer: this.container || config.defaultContainerElement\n    };\n  },\n  computed: {\n    correctParent: function correctParent() {\n      switch (this.position) {\n        case 'is-top-right':\n        case 'is-top':\n        case 'is-top-left':\n          return this.parentTop;\n\n        case 'is-bottom-right':\n        case 'is-bottom':\n        case 'is-bottom-left':\n          return this.parentBottom;\n      }\n    },\n    transition: function transition() {\n      switch (this.position) {\n        case 'is-top-right':\n        case 'is-top':\n        case 'is-top-left':\n          return {\n            enter: 'fadeInDown',\n            leave: 'fadeOut'\n          };\n\n        case 'is-bottom-right':\n        case 'is-bottom':\n        case 'is-bottom-left':\n          return {\n            enter: 'fadeInUp',\n            leave: 'fadeOut'\n          };\n      }\n    }\n  },\n  methods: {\n    pause: function pause() {\n      if (this.pauseOnHover && !this.indefinite) {\n        this.isPaused = true;\n        clearInterval(this.$buefy.globalNoticeInterval);\n      }\n    },\n    removePause: function removePause() {\n      if (this.pauseOnHover && !this.indefinite) {\n        this.isPaused = false;\n        this.close();\n      }\n    },\n    shouldQueue: function shouldQueue() {\n      var queue = this.queue !== undefined ? this.queue : config.defaultNoticeQueue;\n      if (!queue) return false;\n      return this.parentTop.childElementCount > 0 || this.parentBottom.childElementCount > 0;\n    },\n    click: function click() {\n      this.$emit('click');\n    },\n    close: function close() {\n      var _this = this;\n\n      if (!this.isPaused) {\n        clearTimeout(this.timer);\n        this.isActive = false;\n        this.$emit('close'); // Timeout for the animation complete before destroying\n\n        setTimeout(function () {\n          _this.$destroy();\n\n          removeElement(_this.$el);\n        }, 150);\n      }\n    },\n    timeoutCallback: function timeoutCallback() {\n      return this.close();\n    },\n    showNotice: function showNotice() {\n      var _this2 = this;\n\n      if (this.shouldQueue()) this.correctParent.innerHTML = '';\n      this.correctParent.insertAdjacentElement('afterbegin', this.$el);\n      this.isActive = true;\n\n      if (!this.indefinite) {\n        this.timer = setTimeout(function () {\n          return _this2.timeoutCallback();\n        }, this.newDuration);\n      }\n    },\n    setupContainer: function setupContainer() {\n      this.parentTop = document.querySelector((this.newContainer ? this.newContainer : 'body') + '>.notices.is-top');\n      this.parentBottom = document.querySelector((this.newContainer ? this.newContainer : 'body') + '>.notices.is-bottom');\n      if (this.parentTop && this.parentBottom) return;\n\n      if (!this.parentTop) {\n        this.parentTop = document.createElement('div');\n        this.parentTop.className = 'notices is-top';\n      }\n\n      if (!this.parentBottom) {\n        this.parentBottom = document.createElement('div');\n        this.parentBottom.className = 'notices is-bottom';\n      }\n\n      var container = document.querySelector(this.newContainer) || document.body;\n      container.appendChild(this.parentTop);\n      container.appendChild(this.parentBottom);\n\n      if (this.newContainer) {\n        this.parentTop.classList.add('has-custom-container');\n        this.parentBottom.classList.add('has-custom-container');\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.setupContainer();\n  },\n  mounted: function mounted() {\n    this.showNotice();\n  }\n};\nexport { NoticeMixin as N };","map":null,"metadata":{},"sourceType":"module"}