{"ast":null,"code":"import { _ as _defineProperty } from './chunk-455cdeae.js';\nimport { c as config } from './chunk-e92e3389.js';\nimport { I as Icon } from './chunk-7e17a637.js';\nimport { _ as __vue_normalize__ } from './chunk-cca88db8.js'; //\n\nvar script = {\n  name: 'BPaginationButton',\n  props: {\n    page: {\n      type: Object,\n      required: true\n    },\n    tag: {\n      type: String,\n      \"default\": 'a',\n      validator: function validator(value) {\n        return config.defaultLinkTags.indexOf(value) >= 0;\n      }\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  computed: {\n    href: function href() {\n      if (this.tag === 'a') {\n        return '#';\n      }\n    },\n    isDisabled: function isDisabled() {\n      return this.disabled || this.page.disabled;\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _obj;\n\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c(_vm.tag, _vm._b({\n    tag: \"component\",\n    staticClass: \"pagination-link\",\n    \"class\": (_obj = {\n      'is-current': _vm.page.isCurrent\n    }, _obj[_vm.page[\"class\"]] = true, _obj),\n    attrs: {\n      \"role\": \"button\",\n      \"href\": _vm.href,\n      \"disabled\": _vm.isDisabled,\n      \"aria-label\": _vm.page['aria-label'],\n      \"aria-current\": _vm.page.isCurrent\n    },\n    on: {\n      \"click\": function click($event) {\n        $event.preventDefault();\n        return _vm.page.click($event);\n      }\n    }\n  }, 'component', _vm.$attrs, false), [_vm._t(\"default\", [_vm._v(_vm._s(_vm.page.number))])], 2);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar PaginationButton = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nfunction debounce(func, wait, immediate) {\n  var timeout;\n  return function () {\n    var context = this;\n    var args = arguments;\n\n    var later = function later() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\nvar _components;\n\nvar script$1 = {\n  name: 'BPagination',\n  components: (_components = {}, _defineProperty(_components, Icon.name, Icon), _defineProperty(_components, PaginationButton.name, PaginationButton), _components),\n  // deprecated, to replace with default 'value' in the next breaking change\n  model: {\n    prop: 'current',\n    event: 'update:current'\n  },\n  props: {\n    total: [Number, String],\n    perPage: {\n      type: [Number, String],\n      \"default\": 20\n    },\n    current: {\n      type: [Number, String],\n      \"default\": 1\n    },\n    rangeBefore: {\n      type: [Number, String],\n      \"default\": 1\n    },\n    rangeAfter: {\n      type: [Number, String],\n      \"default\": 1\n    },\n    size: String,\n    simple: Boolean,\n    rounded: Boolean,\n    order: String,\n    iconPack: String,\n    iconPrev: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultIconPrev;\n      }\n    },\n    iconNext: {\n      type: String,\n      \"default\": function _default() {\n        return config.defaultIconNext;\n      }\n    },\n    ariaNextLabel: String,\n    ariaPreviousLabel: String,\n    ariaPageLabel: String,\n    ariaCurrentLabel: String,\n    pageInput: {\n      type: Boolean,\n      \"default\": false\n    },\n    pageInputPosition: String,\n    debouncePageInput: [Number, String]\n  },\n  data: function data() {\n    return {\n      inputValue: this.current\n    };\n  },\n  computed: {\n    rootClasses: function rootClasses() {\n      return [this.order, this.size, this.pageInputPosition, {\n        'is-simple': this.simple,\n        'is-rounded': this.rounded,\n        'has-input': this.pageInput\n      }];\n    },\n    beforeCurrent: function beforeCurrent() {\n      return parseInt(this.rangeBefore);\n    },\n    afterCurrent: function afterCurrent() {\n      return parseInt(this.rangeAfter);\n    },\n\n    /**\r\n    * Total page size (count).\r\n    */\n    pageCount: function pageCount() {\n      return Math.ceil(this.total / this.perPage);\n    },\n\n    /**\r\n    * First item of the page (count).\r\n    */\n    firstItem: function firstItem() {\n      var firstItem = this.current * this.perPage - this.perPage + 1;\n      return firstItem >= 0 ? firstItem : 0;\n    },\n\n    /**\r\n    * Check if previous button is available.\r\n    */\n    hasPrev: function hasPrev() {\n      return this.current > 1;\n    },\n\n    /**\r\n     * Check if first page button should be visible.\r\n    */\n    hasFirst: function hasFirst() {\n      return this.current >= 2 + this.beforeCurrent;\n    },\n\n    /**\r\n    * Check if first ellipsis should be visible.\r\n    */\n    hasFirstEllipsis: function hasFirstEllipsis() {\n      return this.current >= this.beforeCurrent + 4;\n    },\n\n    /**\r\n    * Check if last page button should be visible.\r\n    */\n    hasLast: function hasLast() {\n      return this.current <= this.pageCount - (1 + this.afterCurrent);\n    },\n\n    /**\r\n    * Check if last ellipsis should be visible.\r\n    */\n    hasLastEllipsis: function hasLastEllipsis() {\n      return this.current < this.pageCount - (2 + this.afterCurrent);\n    },\n\n    /**\r\n    * Check if next button is available.\r\n    */\n    hasNext: function hasNext() {\n      return this.current < this.pageCount;\n    },\n\n    /**\r\n    * Get near pages, 1 before and 1 after the current.\r\n    * Also add the click event to the array.\r\n    */\n    pagesInRange: function pagesInRange() {\n      if (this.simple) return;\n      var left = Math.max(1, this.current - this.beforeCurrent);\n\n      if (left - 1 === 2) {\n        left--; // Do not show the ellipsis if there is only one to hide\n      }\n\n      var right = Math.min(this.current + this.afterCurrent, this.pageCount);\n\n      if (this.pageCount - right === 2) {\n        right++; // Do not show the ellipsis if there is only one to hide\n      }\n\n      var pages = [];\n\n      for (var i = left; i <= right; i++) {\n        pages.push(this.getPage(i));\n      }\n\n      return pages;\n    }\n  },\n  watch: {\n    /**\r\n    * If current page is trying to be greater than page count, set to last.\r\n    */\n    pageCount: function pageCount(value) {\n      if (this.current > value) this.last();\n    },\n    current: function current(value) {\n      this.inputValue = value;\n    },\n    debouncePageInput: {\n      handler: function handler(value) {\n        this.debounceHandlePageInput = debounce(this.handleOnInputPageChange, value);\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    /**\r\n    * Previous button click listener.\r\n    */\n    prev: function prev(event) {\n      this.changePage(this.current - 1, event);\n    },\n\n    /**\r\n     * Next button click listener.\r\n    */\n    next: function next(event) {\n      this.changePage(this.current + 1, event);\n    },\n\n    /**\r\n     * First button click listener.\r\n    */\n    first: function first(event) {\n      this.changePage(1, event);\n    },\n\n    /**\r\n    * Last button click listener.\r\n    */\n    last: function last(event) {\n      this.changePage(this.pageCount, event);\n    },\n    changePage: function changePage(num, event) {\n      if (this.current === num || num < 1 || num > this.pageCount) return;\n      this.$emit('update:current', num);\n      this.$emit('change', num); // Set focus on element to keep tab order\n\n      if (event && event.target) {\n        this.$nextTick(function () {\n          return event.target.focus();\n        });\n      }\n    },\n    getPage: function getPage(num) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return {\n        number: num,\n        isCurrent: this.current === num,\n        click: function click(event) {\n          return _this.changePage(num, event);\n        },\n        input: function input(event, inputNum) {\n          return _this.changePage(+inputNum, event);\n        },\n        disabled: options.disabled || false,\n        \"class\": options[\"class\"] || '',\n        'aria-label': options['aria-label'] || this.getAriaPageLabel(num, this.current === num)\n      };\n    },\n\n    /**\r\n    * Get text for aria-label according to page number.\r\n    */\n    getAriaPageLabel: function getAriaPageLabel(pageNumber, isCurrent) {\n      if (this.ariaPageLabel && (!isCurrent || !this.ariaCurrentLabel)) {\n        return this.ariaPageLabel + ' ' + pageNumber + '.';\n      } else if (this.ariaPageLabel && isCurrent && this.ariaCurrentLabel) {\n        return this.ariaCurrentLabel + ', ' + this.ariaPageLabel + ' ' + pageNumber + '.';\n      }\n\n      return null;\n    },\n    handleOnInputPageChange: function handleOnInputPageChange(event) {\n      this.getPage(this.inputValue).input(event, this.inputValue);\n    },\n    handleOnInputDebounce: function handleOnInputDebounce(event) {\n      if (this.debouncePageInput) {\n        this.debounceHandlePageInput(event);\n      } else {\n        this.handleOnInputPageChange(event);\n      }\n    },\n    handleOnKeyPress: function handleOnKeyPress(event) {\n      // --- This is required to only allow numeric inputs for the page input - --- //\n      // --- size attribute does not work with input type number. --- //\n      var ASCIICode = event.which || event.keyCode;\n\n      if (ASCIICode >= 48 && ASCIICode <= 57) {\n        return true;\n      } else {\n        return event.preventDefault();\n      }\n    },\n    handleAllowableInputPageRange: function handleAllowableInputPageRange(event) {\n      if (+event.target.value > 0 && +event.target.value <= this.pageCount) {\n        this.handleOnInputValue(event);\n      } else {\n        // --- It is nessacery to set inputValue to 1 and then to '' so that the DOM- --- //\n        // --- will update the input component even when Backspace is used and then-\n        // --- 0 us entered. --- //\n        this.inputValue = 1;\n        this.inputValue = '';\n      }\n    },\n    handleOnInputValue: function handleOnInputValue(event) {\n      var inputValue = +event.target.value;\n      this.inputValue = inputValue;\n\n      if (Number.isInteger(this.inputValue)) {\n        this.handleOnInputDebounce(event);\n      } else {\n        // --- if NaN, then set inputValue back to current --- //\n        this.inputValue = this.current;\n      }\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$1 = script$1;\n/* template */\n\nvar __vue_render__$1 = function __vue_render__$1() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('nav', {\n    staticClass: \"pagination\",\n    \"class\": _vm.rootClasses\n  }, [_vm.$scopedSlots.previous ? _vm._t(\"previous\", [_c('b-icon', {\n    attrs: {\n      \"icon\": _vm.iconPrev,\n      \"pack\": _vm.iconPack,\n      \"both\": \"\",\n      \"aria-hidden\": \"true\"\n    }\n  })], {\n    \"page\": _vm.getPage(_vm.current - 1, {\n      disabled: !_vm.hasPrev,\n      \"class\": 'pagination-previous',\n      'aria-label': _vm.ariaPreviousLabel\n    })\n  }) : _c('BPaginationButton', {\n    staticClass: \"pagination-previous\",\n    attrs: {\n      \"disabled\": !_vm.hasPrev,\n      \"page\": _vm.getPage(_vm.current - 1),\n      \"aria-label\": _vm.ariaPreviousLabel\n    }\n  }, [_c('b-icon', {\n    attrs: {\n      \"icon\": _vm.iconPrev,\n      \"pack\": _vm.iconPack,\n      \"both\": \"\",\n      \"aria-hidden\": \"true\"\n    }\n  })], 1), _vm.$scopedSlots.next ? _vm._t(\"next\", [_c('b-icon', {\n    attrs: {\n      \"icon\": _vm.iconNext,\n      \"pack\": _vm.iconPack,\n      \"both\": \"\",\n      \"aria-hidden\": \"true\"\n    }\n  })], {\n    \"page\": _vm.getPage(_vm.current + 1, {\n      disabled: !_vm.hasNext,\n      \"class\": 'pagination-next',\n      'aria-label': _vm.ariaNextLabel\n    })\n  }) : _c('BPaginationButton', {\n    staticClass: \"pagination-next\",\n    attrs: {\n      \"disabled\": !_vm.hasNext,\n      \"page\": _vm.getPage(_vm.current + 1),\n      \"aria-label\": _vm.ariaNextLabel\n    }\n  }, [_c('b-icon', {\n    attrs: {\n      \"icon\": _vm.iconNext,\n      \"pack\": _vm.iconPack,\n      \"both\": \"\",\n      \"aria-hidden\": \"true\"\n    }\n  })], 1), _c('div', {\n    staticClass: \"control pagination-input\"\n  }, [_vm.pageInput ? _c('input', {\n    staticClass: \"input\",\n    attrs: {\n      \"size\": _vm.pageCount.toString().length,\n      \"maxlength\": _vm.pageCount.toString().length\n    },\n    domProps: {\n      \"value\": _vm.inputValue\n    },\n    on: {\n      \"input\": _vm.handleAllowableInputPageRange,\n      \"keypress\": _vm.handleOnKeyPress\n    }\n  }) : _vm._e()]), _vm.simple ? _c('small', {\n    staticClass: \"info\"\n  }, [_vm.perPage == 1 ? [_vm._v(\" \" + _vm._s(_vm.firstItem) + \" / \" + _vm._s(_vm.total) + \" \")] : [_vm._v(\" \" + _vm._s(_vm.firstItem) + \"-\" + _vm._s(Math.min(_vm.current * _vm.perPage, _vm.total)) + \" / \" + _vm._s(_vm.total) + \" \")]], 2) : _c('ul', {\n    staticClass: \"pagination-list\"\n  }, [_vm.hasFirst ? _c('li', [_vm.$scopedSlots[\"default\"] ? _vm._t(\"default\", null, {\n    \"page\": _vm.getPage(1)\n  }) : _c('BPaginationButton', {\n    attrs: {\n      \"page\": _vm.getPage(1)\n    }\n  })], 2) : _vm._e(), _vm.hasFirstEllipsis ? _c('li', [_c('span', {\n    staticClass: \"pagination-ellipsis\"\n  }, [_vm._v(\"…\")])]) : _vm._e(), _vm._l(_vm.pagesInRange, function (page) {\n    return _c('li', {\n      key: page.number\n    }, [_vm.$scopedSlots[\"default\"] ? _vm._t(\"default\", null, {\n      \"page\": page\n    }) : _c('BPaginationButton', {\n      attrs: {\n        \"page\": page\n      }\n    })], 2);\n  }), _vm.hasLastEllipsis ? _c('li', [_c('span', {\n    staticClass: \"pagination-ellipsis\"\n  }, [_vm._v(\"…\")])]) : _vm._e(), _vm.hasLast ? _c('li', [_vm.$scopedSlots[\"default\"] ? _vm._t(\"default\", null, {\n    \"page\": _vm.getPage(_vm.pageCount)\n  }) : _c('BPaginationButton', {\n    attrs: {\n      \"page\": _vm.getPage(_vm.pageCount)\n    }\n  })], 2) : _vm._e()], 2)], 2);\n};\n\nvar __vue_staticRenderFns__$1 = [];\n/* style */\n\nvar __vue_inject_styles__$1 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$1 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$1 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$1 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Pagination = __vue_normalize__({\n  render: __vue_render__$1,\n  staticRenderFns: __vue_staticRenderFns__$1\n}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, undefined, undefined);\n\nexport { Pagination as P, PaginationButton as a, debounce as d };","map":null,"metadata":{},"sourceType":"module"}