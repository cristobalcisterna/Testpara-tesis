{"ast":null,"code":"import { b as _typeof, _ as _defineProperty } from './chunk-455cdeae.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js'; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar script = {\n  name: 'NavbarBurger',\n  props: {\n    isOpened: {\n      type: Boolean,\n      \"default\": false\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('a', _vm._g({\n    staticClass: \"navbar-burger burger\",\n    \"class\": {\n      'is-active': _vm.isOpened\n    },\n    attrs: {\n      \"role\": \"button\",\n      \"aria-label\": \"menu\",\n      \"aria-expanded\": _vm.isOpened,\n      \"tabindex\": \"0\"\n    }\n  }, _vm.$listeners), [_c('span', {\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }), _c('span', {\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }), _c('span', {\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  })]);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar NavbarBurger = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar isTouch = typeof window !== 'undefined' && ('ontouchstart' in window || navigator.msMaxTouchPoints > 0);\nvar events = isTouch ? ['touchstart', 'click'] : ['click'];\nvar instances = [];\n\nfunction processArgs(bindingValue) {\n  var isFunction = typeof bindingValue === 'function';\n\n  if (!isFunction && _typeof(bindingValue) !== 'object') {\n    throw new Error(\"v-click-outside: Binding value should be a function or an object, \".concat(_typeof(bindingValue), \" given\"));\n  }\n\n  return {\n    handler: isFunction ? bindingValue : bindingValue.handler,\n    middleware: bindingValue.middleware || function (isClickOutside) {\n      return isClickOutside;\n    },\n    events: bindingValue.events || events\n  };\n}\n\nfunction onEvent(_ref) {\n  var el = _ref.el,\n      event = _ref.event,\n      handler = _ref.handler,\n      middleware = _ref.middleware;\n  var isClickOutside = event.target !== el && !el.contains(event.target);\n\n  if (!isClickOutside || !middleware(event, el)) {\n    return;\n  }\n\n  handler(event, el);\n}\n\nfunction toggleEventListeners() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      eventHandlers = _ref2.eventHandlers;\n\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'add';\n  eventHandlers.forEach(function (_ref3) {\n    var event = _ref3.event,\n        handler = _ref3.handler;\n    document[\"\".concat(action, \"EventListener\")](event, handler);\n  });\n}\n\nfunction bind(el, _ref4) {\n  var value = _ref4.value;\n\n  var _processArgs = processArgs(value),\n      _handler = _processArgs.handler,\n      middleware = _processArgs.middleware,\n      events = _processArgs.events;\n\n  var instance = {\n    el: el,\n    eventHandlers: events.map(function (eventName) {\n      return {\n        event: eventName,\n        handler: function handler(event) {\n          return onEvent({\n            event: event,\n            el: el,\n            handler: _handler,\n            middleware: middleware\n          });\n        }\n      };\n    })\n  };\n  toggleEventListeners(instance, 'add');\n  instances.push(instance);\n}\n\nfunction update(el, _ref5) {\n  var value = _ref5.value;\n\n  var _processArgs2 = processArgs(value),\n      _handler2 = _processArgs2.handler,\n      middleware = _processArgs2.middleware,\n      events = _processArgs2.events; // `filter` instead of `find` for compat with IE\n\n\n  var instance = instances.filter(function (instance) {\n    return instance.el === el;\n  })[0];\n  toggleEventListeners(instance, 'remove');\n  instance.eventHandlers = events.map(function (eventName) {\n    return {\n      event: eventName,\n      handler: function handler(event) {\n        return onEvent({\n          event: event,\n          el: el,\n          handler: _handler2,\n          middleware: middleware\n        });\n      }\n    };\n  });\n  toggleEventListeners(instance, 'add');\n}\n\nfunction unbind(el) {\n  // `filter` instead of `find` for compat with IE\n  var instance = instances.filter(function (instance) {\n    return instance.el === el;\n  })[0];\n  toggleEventListeners(instance, 'remove');\n}\n\nvar directive = {\n  bind: bind,\n  update: update,\n  unbind: unbind,\n  instances: instances\n};\nvar FIXED_TOP_CLASS = 'is-fixed-top';\nvar BODY_FIXED_TOP_CLASS = 'has-navbar-fixed-top';\nvar BODY_SPACED_FIXED_TOP_CLASS = 'has-spaced-navbar-fixed-top';\nvar FIXED_BOTTOM_CLASS = 'is-fixed-bottom';\nvar BODY_FIXED_BOTTOM_CLASS = 'has-navbar-fixed-bottom';\nvar BODY_SPACED_FIXED_BOTTOM_CLASS = 'has-spaced-navbar-fixed-bottom';\nvar BODY_CENTERED_CLASS = 'has-navbar-centered';\n\nvar isFilled = function isFilled(str) {\n  return !!str;\n};\n\nvar script$1 = {\n  name: 'BNavbar',\n  components: {\n    NavbarBurger: NavbarBurger\n  },\n  directives: {\n    clickOutside: directive\n  },\n  // deprecated, to replace with default 'value' in the next breaking change\n  model: {\n    prop: 'active',\n    event: 'update:active'\n  },\n  props: {\n    type: [String, Object],\n    transparent: {\n      type: Boolean,\n      \"default\": false\n    },\n    fixedTop: {\n      type: Boolean,\n      \"default\": false\n    },\n    fixedBottom: {\n      type: Boolean,\n      \"default\": false\n    },\n    active: {\n      type: Boolean,\n      \"default\": false\n    },\n    centered: {\n      type: Boolean,\n      \"default\": false\n    },\n    wrapperClass: {\n      type: [String, Array, Object]\n    },\n    closeOnClick: {\n      type: Boolean,\n      \"default\": true\n    },\n    mobileBurger: {\n      type: Boolean,\n      \"default\": true\n    },\n    spaced: Boolean,\n    shadow: Boolean\n  },\n  data: function data() {\n    return {\n      internalIsActive: this.active,\n      _isNavBar: true // Used internally by NavbarItem\n\n    };\n  },\n  computed: {\n    isOpened: function isOpened() {\n      return this.internalIsActive;\n    },\n    computedClasses: function computedClasses() {\n      var _ref;\n\n      return [this.type, (_ref = {}, _defineProperty(_ref, FIXED_TOP_CLASS, this.fixedTop), _defineProperty(_ref, FIXED_BOTTOM_CLASS, this.fixedBottom), _defineProperty(_ref, BODY_CENTERED_CLASS, this.centered), _defineProperty(_ref, 'is-spaced', this.spaced), _defineProperty(_ref, 'has-shadow', this.shadow), _defineProperty(_ref, 'is-transparent', this.transparent), _ref)];\n    }\n  },\n  watch: {\n    active: {\n      handler: function handler(active) {\n        this.internalIsActive = active;\n      },\n      immediate: true\n    },\n    fixedTop: function fixedTop(isSet) {\n      // toggle body class only on update to handle multiple navbar\n      this.setBodyFixedTopClass(isSet);\n    },\n    bottomTop: function bottomTop(isSet) {\n      // toggle body class only on update to handle multiple navbar\n      this.setBodyFixedBottomClass(isSet);\n    }\n  },\n  methods: {\n    toggleActive: function toggleActive() {\n      this.internalIsActive = !this.internalIsActive;\n      this.emitUpdateParentEvent();\n    },\n    closeMenu: function closeMenu() {\n      if (this.closeOnClick && this.internalIsActive) {\n        this.internalIsActive = false;\n        this.emitUpdateParentEvent();\n      }\n    },\n    emitUpdateParentEvent: function emitUpdateParentEvent() {\n      this.$emit('update:active', this.internalIsActive);\n    },\n    setBodyClass: function setBodyClass(className) {\n      if (typeof window !== 'undefined') {\n        document.body.classList.add(className);\n      }\n    },\n    removeBodyClass: function removeBodyClass(className) {\n      if (typeof window !== 'undefined') {\n        document.body.classList.remove(className);\n      }\n    },\n    checkIfFixedPropertiesAreColliding: function checkIfFixedPropertiesAreColliding() {\n      var areColliding = this.fixedTop && this.fixedBottom;\n\n      if (areColliding) {\n        throw new Error('You should choose if the BNavbar is fixed bottom or fixed top, but not both');\n      }\n    },\n    genNavbar: function genNavbar(createElement) {\n      var navBarSlots = [this.genNavbarBrandNode(createElement), this.genNavbarSlotsNode(createElement)];\n\n      if (!isFilled(this.wrapperClass)) {\n        return this.genNavbarSlots(createElement, navBarSlots);\n      } // It wraps the slots into a div with the provided wrapperClass prop\n\n\n      var navWrapper = createElement('div', {\n        \"class\": this.wrapperClass\n      }, navBarSlots);\n      return this.genNavbarSlots(createElement, [navWrapper]);\n    },\n    genNavbarSlots: function genNavbarSlots(createElement, slots) {\n      return createElement('nav', {\n        staticClass: 'navbar',\n        \"class\": this.computedClasses,\n        attrs: {\n          role: 'navigation',\n          'aria-label': 'main navigation'\n        },\n        directives: [{\n          name: 'click-outside',\n          value: this.closeMenu\n        }]\n      }, slots);\n    },\n    genNavbarBrandNode: function genNavbarBrandNode(createElement) {\n      return createElement('div', {\n        \"class\": 'navbar-brand'\n      }, [this.$slots.brand, this.genBurgerNode(createElement)]);\n    },\n    genBurgerNode: function genBurgerNode(createElement) {\n      var _this = this;\n\n      if (this.mobileBurger) {\n        var defaultBurgerNode = createElement('navbar-burger', {\n          props: {\n            isOpened: this.isOpened\n          },\n          on: {\n            click: this.toggleActive,\n            keyup: function keyup(event) {\n              if (event.keyCode !== 13) return;\n\n              _this.toggleActive();\n            }\n          }\n        });\n        var hasBurgerSlot = !!this.$scopedSlots.burger;\n        return hasBurgerSlot ? this.$scopedSlots.burger({\n          isOpened: this.isOpened,\n          toggleActive: this.toggleActive\n        }) : defaultBurgerNode;\n      }\n    },\n    genNavbarSlotsNode: function genNavbarSlotsNode(createElement) {\n      return createElement('div', {\n        staticClass: 'navbar-menu',\n        \"class\": {\n          'is-active': this.isOpened\n        }\n      }, [this.genMenuPosition(createElement, 'start'), this.genMenuPosition(createElement, 'end')]);\n    },\n    genMenuPosition: function genMenuPosition(createElement, positionName) {\n      return createElement('div', {\n        staticClass: \"navbar-\".concat(positionName)\n      }, this.$slots[positionName]);\n    },\n    setBodyFixedTopClass: function setBodyFixedTopClass(isSet) {\n      this.checkIfFixedPropertiesAreColliding();\n\n      if (isSet) {\n        // TODO Apply only one of the classes once PR is merged in Bulma:\n        // https://github.com/jgthms/bulma/pull/2737\n        this.setBodyClass(BODY_FIXED_TOP_CLASS);\n        this.spaced && this.setBodyClass(BODY_SPACED_FIXED_TOP_CLASS);\n      } else {\n        this.removeBodyClass(BODY_FIXED_TOP_CLASS);\n        this.removeBodyClass(BODY_SPACED_FIXED_TOP_CLASS);\n      }\n    },\n    setBodyFixedBottomClass: function setBodyFixedBottomClass(isSet) {\n      this.checkIfFixedPropertiesAreColliding();\n\n      if (isSet) {\n        // TODO Apply only one of the classes once PR is merged in Bulma:\n        // https://github.com/jgthms/bulma/pull/2737\n        this.setBodyClass(BODY_FIXED_BOTTOM_CLASS);\n        this.spaced && this.setBodyClass(BODY_SPACED_FIXED_BOTTOM_CLASS);\n      } else {\n        this.removeBodyClass(BODY_FIXED_BOTTOM_CLASS);\n        this.removeBodyClass(BODY_SPACED_FIXED_BOTTOM_CLASS);\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.fixedTop && this.setBodyFixedTopClass(true);\n    this.fixedBottom && this.setBodyFixedBottomClass(true);\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.fixedTop) {\n      var className = this.spaced ? BODY_SPACED_FIXED_TOP_CLASS : BODY_FIXED_TOP_CLASS;\n      this.removeBodyClass(className);\n    } else if (this.fixedBottom) {\n      var _className = this.spaced ? BODY_SPACED_FIXED_BOTTOM_CLASS : BODY_FIXED_BOTTOM_CLASS;\n\n      this.removeBodyClass(_className);\n    }\n  },\n  render: function render(createElement, fn) {\n    return this.genNavbar(createElement);\n  }\n};\n/* script */\n\nvar __vue_script__$1 = script$1;\n/* template */\n\n/* style */\n\nvar __vue_inject_styles__$1 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$1 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$1 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$1 = undefined;\n/* style inject */\n\n/* style inject SSR */\n\nvar Navbar = __vue_normalize__({}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, undefined, undefined); //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nvar clickableWhiteList = ['div', 'span', 'input'];\nvar script$2 = {\n  name: 'BNavbarItem',\n  inheritAttrs: false,\n  props: {\n    tag: {\n      type: String,\n      \"default\": 'a'\n    },\n    active: Boolean\n  },\n  methods: {\n    /**\r\n     * Keypress event that is bound to the document\r\n     */\n    keyPress: function keyPress(_ref) {\n      var key = _ref.key;\n\n      if (key === 'Escape' || key === 'Esc') {\n        this.closeMenuRecursive(this, ['NavBar']);\n      }\n    },\n\n    /**\r\n     * Close parent if clicked outside.\r\n     */\n    handleClickEvent: function handleClickEvent(event) {\n      var isOnWhiteList = clickableWhiteList.some(function (item) {\n        return item === event.target.localName;\n      });\n\n      if (!isOnWhiteList) {\n        var parent = this.closeMenuRecursive(this, ['NavbarDropdown', 'NavBar']);\n        if (parent && parent.$data._isNavbarDropdown) this.closeMenuRecursive(parent, ['NavBar']);\n      }\n    },\n\n    /**\r\n     * Close parent recursively\r\n     */\n    closeMenuRecursive: function closeMenuRecursive(current, targetComponents) {\n      if (!current.$parent) return null;\n      var foundItem = targetComponents.reduce(function (acc, item) {\n        if (current.$parent.$data[\"_is\".concat(item)]) {\n          current.$parent.closeMenu();\n          return current.$parent;\n        }\n\n        return acc;\n      }, null);\n      return foundItem || this.closeMenuRecursive(current.$parent, targetComponents);\n    }\n  },\n  mounted: function mounted() {\n    if (typeof window !== 'undefined') {\n      this.$el.addEventListener('click', this.handleClickEvent);\n      document.addEventListener('keyup', this.keyPress);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      this.$el.removeEventListener('click', this.handleClickEvent);\n      document.removeEventListener('keyup', this.keyPress);\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$2 = script$2;\n/* template */\n\nvar __vue_render__$1 = function __vue_render__$1() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c(_vm.tag, _vm._g(_vm._b({\n    tag: \"component\",\n    staticClass: \"navbar-item\",\n    \"class\": {\n      'is-active': _vm.active\n    }\n  }, 'component', _vm.$attrs, false), _vm.$listeners), [_vm._t(\"default\")], 2);\n};\n\nvar __vue_staticRenderFns__$1 = [];\n/* style */\n\nvar __vue_inject_styles__$2 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$2 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$2 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$2 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar NavbarItem = __vue_normalize__({\n  render: __vue_render__$1,\n  staticRenderFns: __vue_staticRenderFns__$1\n}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, undefined, undefined); //\n\n\nvar script$3 = {\n  name: 'BNavbarDropdown',\n  directives: {\n    clickOutside: directive\n  },\n  inheritAttrs: false,\n  props: {\n    label: String,\n    hoverable: Boolean,\n    active: Boolean,\n    right: Boolean,\n    arrowless: Boolean,\n    boxed: Boolean,\n    closeOnClick: {\n      type: Boolean,\n      \"default\": true\n    },\n    collapsible: Boolean,\n    tag: {\n      type: String,\n      \"default\": 'a'\n    }\n  },\n  data: function data() {\n    return {\n      newActive: this.active,\n      isHoverable: this.hoverable,\n      _isNavbarDropdown: true // Used internally by NavbarItem\n\n    };\n  },\n  watch: {\n    active: function active(value) {\n      this.newActive = value;\n    },\n    newActive: function newActive(value) {\n      this.$emit('active-change', value);\n    }\n  },\n  methods: {\n    toggleMenu: function toggleMenu() {\n      this.newActive = !this.newActive;\n    },\n    showMenu: function showMenu() {\n      this.newActive = true;\n    },\n\n    /**\r\n    * See naming convetion of navbaritem\r\n    */\n    closeMenu: function closeMenu() {\n      this.newActive = !this.closeOnClick;\n\n      if (this.hoverable && this.closeOnClick) {\n        this.isHoverable = false;\n      }\n    },\n    checkHoverable: function checkHoverable() {\n      if (this.hoverable) {\n        this.isHoverable = true;\n      }\n    }\n  }\n};\n/* script */\n\nvar __vue_script__$3 = script$3;\n/* template */\n\nvar __vue_render__$2 = function __vue_render__$2() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('div', {\n    directives: [{\n      name: \"click-outside\",\n      rawName: \"v-click-outside\",\n      value: _vm.closeMenu,\n      expression: \"closeMenu\"\n    }],\n    staticClass: \"navbar-item has-dropdown\",\n    \"class\": {\n      'is-hoverable': _vm.isHoverable,\n      'is-active': _vm.newActive\n    },\n    on: {\n      \"mouseenter\": _vm.checkHoverable\n    }\n  }, [_c(_vm.tag, _vm._g(_vm._b({\n    tag: \"component\",\n    staticClass: \"navbar-link\",\n    \"class\": {\n      'is-arrowless': _vm.arrowless,\n      'is-active': _vm.newActive && _vm.collapsible\n    },\n    attrs: {\n      \"aria-haspopup\": \"true\",\n      \"tabindex\": \"0\"\n    },\n    on: {\n      \"click\": function click($event) {\n        $event.preventDefault();\n        return _vm.toggleMenu($event);\n      },\n      \"keyup\": function keyup($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) {\n          return null;\n        }\n\n        return _vm.toggleMenu($event);\n      }\n    }\n  }, 'component', _vm.$attrs, false), _vm.$listeners), [_vm.label ? [_vm._v(_vm._s(_vm.label))] : _vm._t(\"label\")], 2), _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: !_vm.collapsible || _vm.collapsible && _vm.newActive,\n      expression: \"!collapsible || (collapsible && newActive)\"\n    }],\n    staticClass: \"navbar-dropdown\",\n    \"class\": {\n      'is-right': _vm.right,\n      'is-boxed': _vm.boxed\n    }\n  }, [_vm._t(\"default\")], 2)], 1);\n};\n\nvar __vue_staticRenderFns__$2 = [];\n/* style */\n\nvar __vue_inject_styles__$3 = undefined;\n/* scoped */\n\nvar __vue_scope_id__$3 = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__$3 = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__$3 = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar NavbarDropdown = __vue_normalize__({\n  render: __vue_render__$2,\n  staticRenderFns: __vue_staticRenderFns__$2\n}, __vue_inject_styles__$3, __vue_script__$3, __vue_scope_id__$3, __vue_is_functional_template__$3, __vue_module_identifier__$3, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Navbar);\n    registerComponent(Vue, NavbarItem);\n    registerComponent(Vue, NavbarDropdown);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Navbar as BNavbar, NavbarDropdown as BNavbarDropdown, NavbarItem as BNavbarItem };","map":null,"metadata":{},"sourceType":"module"}