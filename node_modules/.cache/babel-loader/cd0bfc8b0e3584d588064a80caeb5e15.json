{"ast":null,"code":"import { _ as _defineProperty } from './chunk-455cdeae.js';\nimport { hasFlag } from './helpers.js';\nvar items = 1;\nvar sorted = 3;\nvar Sorted = sorted;\n\nvar ProviderParentMixin = function ProviderParentMixin(itemName) {\n  var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var mixin = {\n    provide: function provide() {\n      return _defineProperty({}, 'b' + itemName, this);\n    }\n  };\n\n  if (hasFlag(flags, items)) {\n    mixin.data = function () {\n      return {\n        childItems: []\n      };\n    };\n\n    mixin.methods = {\n      _registerItem: function _registerItem(item) {\n        this.childItems.push(item);\n      },\n      _unregisterItem: function _unregisterItem(item) {\n        this.childItems = this.childItems.filter(function (i) {\n          return i !== item;\n        });\n      }\n    };\n\n    if (hasFlag(flags, sorted)) {\n      mixin.watch = {\n        /**\r\n         * When items are added/removed deep search in the elements default's slot\r\n         * And mark the items with their index\r\n         */\n        childItems: function childItems(items) {\n          if (items.length > 0 && this.$scopedSlots[\"default\"]) {\n            var tag = items[0].$vnode.tag;\n            var index = 0;\n\n            var deepSearch = function deepSearch(children) {\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                var _loop = function _loop() {\n                  var child = _step.value;\n\n                  if (child.tag === tag) {\n                    // An item with the same tag will for sure be found\n                    var it = items.find(function (i) {\n                      return i.$vnode === child;\n                    });\n\n                    if (it) {\n                      it.index = index++;\n                    }\n                  } else if (child.tag) {\n                    var sub = child.componentInstance ? child.componentInstance.$scopedSlots[\"default\"] ? child.componentInstance.$scopedSlots[\"default\"]() : child.componentInstance.$children : child.children;\n\n                    if (Array.isArray(sub) && sub.length > 0) {\n                      deepSearch(sub.map(function (e) {\n                        return e.$vnode;\n                      }));\n                    }\n                  }\n                };\n\n                for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  _loop();\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                    _iterator[\"return\"]();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              return false;\n            };\n\n            deepSearch(this.$scopedSlots[\"default\"]());\n          }\n        }\n      };\n      mixin.computed = {\n        /**\r\n         * When items are added/removed sort them according to their position\r\n         */\n        sortedItems: function sortedItems() {\n          return this.childItems.slice().sort(function (i1, i2) {\n            return i1.index - i2.index;\n          });\n        }\n      };\n    }\n  }\n\n  return mixin;\n};\n\nvar sorted$1 = 1;\nvar optional = 2;\nvar Sorted$1 = sorted$1;\n\nvar InjectedChildMixin = function InjectedChildMixin(parentItemName) {\n  var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var mixin = {\n    inject: {\n      parent: {\n        from: 'b' + parentItemName,\n        \"default\": false\n      }\n    },\n    created: function created() {\n      if (!this.parent) {\n        if (!hasFlag(flags, optional)) {\n          this.$destroy();\n          throw new Error('You should wrap ' + this.$options.name + ' in a ' + parentItemName);\n        }\n      } else if (this.parent._registerItem) {\n        this.parent._registerItem(this);\n      }\n    },\n    beforeDestroy: function beforeDestroy() {\n      if (this.parent && this.parent._unregisterItem) {\n        this.parent._unregisterItem(this);\n      }\n    }\n  };\n\n  if (hasFlag(flags, sorted$1)) {\n    mixin.data = function () {\n      return {\n        index: null\n      };\n    };\n  }\n\n  return mixin;\n};\n\nexport { InjectedChildMixin as I, ProviderParentMixin as P, Sorted as S, Sorted$1 as a };","map":null,"metadata":{},"sourceType":"module"}