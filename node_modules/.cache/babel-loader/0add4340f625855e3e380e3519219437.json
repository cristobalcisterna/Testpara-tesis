{"ast":null,"code":"import { c as config } from './chunk-652f2dad.js';\nimport { _ as __vue_normalize__, r as registerComponent, u as use } from './chunk-cca88db8.js'; //\n\nvar script = {\n  name: 'BSwitch',\n  props: {\n    value: [String, Number, Boolean, Function, Object, Array, Date],\n    nativeValue: [String, Number, Boolean, Function, Object, Array, Date],\n    disabled: Boolean,\n    type: String,\n    passiveType: String,\n    name: String,\n    required: Boolean,\n    size: String,\n    ariaLabelledby: String,\n    trueValue: {\n      type: [String, Number, Boolean, Function, Object, Array, Date],\n      \"default\": true\n    },\n    falseValue: {\n      type: [String, Number, Boolean, Function, Object, Array, Date],\n      \"default\": false\n    },\n    rounded: {\n      type: Boolean,\n      \"default\": function _default() {\n        return config.defaultSwitchRounded;\n      }\n    },\n    outlined: {\n      type: Boolean,\n      \"default\": false\n    },\n    leftLabel: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      newValue: this.value,\n      isMouseDown: false\n    };\n  },\n  computed: {\n    computedValue: {\n      get: function get() {\n        return this.newValue;\n      },\n      set: function set(value) {\n        this.newValue = value;\n        this.$emit('input', value);\n      }\n    },\n    newClass: function newClass() {\n      return [this.size, {\n        'is-disabled': this.disabled,\n        'is-rounded': this.rounded,\n        'is-outlined': this.outlined,\n        'has-left-label': this.leftLabel\n      }];\n    },\n    checkClasses: function checkClasses() {\n      return [{\n        'is-elastic': this.isMouseDown && !this.disabled\n      }, this.passiveType && \"\".concat(this.passiveType, \"-passive\"), this.type];\n    },\n    showControlLabel: function showControlLabel() {\n      return !!this.$slots[\"default\"];\n    }\n  },\n  watch: {\n    /**\r\n    * When v-model change, set internal value.\r\n    */\n    value: function value(_value) {\n      this.newValue = _value;\n    }\n  },\n  methods: {\n    focus: function focus() {\n      // MacOS FireFox and Safari do not focus when clicked\n      this.$refs.input.focus();\n    }\n  }\n};\n/* script */\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return _c('label', {\n    ref: \"label\",\n    staticClass: \"switch\",\n    \"class\": _vm.newClass,\n    attrs: {\n      \"disabled\": _vm.disabled\n    },\n    on: {\n      \"click\": _vm.focus,\n      \"keydown\": function keydown($event) {\n        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) {\n          return null;\n        }\n\n        $event.preventDefault();\n        return _vm.$refs.label.click();\n      },\n      \"mousedown\": function mousedown($event) {\n        _vm.isMouseDown = true;\n      },\n      \"mouseup\": function mouseup($event) {\n        _vm.isMouseDown = false;\n      },\n      \"mouseout\": function mouseout($event) {\n        _vm.isMouseDown = false;\n      },\n      \"blur\": function blur($event) {\n        _vm.isMouseDown = false;\n      }\n    }\n  }, [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: _vm.computedValue,\n      expression: \"computedValue\"\n    }],\n    ref: \"input\",\n    attrs: {\n      \"type\": \"checkbox\",\n      \"disabled\": _vm.disabled,\n      \"name\": _vm.name,\n      \"required\": _vm.required,\n      \"true-value\": _vm.trueValue,\n      \"false-value\": _vm.falseValue,\n      \"aria-labelledby\": _vm.ariaLabelledby\n    },\n    domProps: {\n      \"value\": _vm.nativeValue,\n      \"checked\": Array.isArray(_vm.computedValue) ? _vm._i(_vm.computedValue, _vm.nativeValue) > -1 : _vm._q(_vm.computedValue, _vm.trueValue)\n    },\n    on: {\n      \"click\": function click($event) {\n        $event.stopPropagation();\n      },\n      \"change\": function change($event) {\n        var $$a = _vm.computedValue,\n            $$el = $event.target,\n            $$c = $$el.checked ? _vm.trueValue : _vm.falseValue;\n\n        if (Array.isArray($$a)) {\n          var $$v = _vm.nativeValue,\n              $$i = _vm._i($$a, $$v);\n\n          if ($$el.checked) {\n            $$i < 0 && (_vm.computedValue = $$a.concat([$$v]));\n          } else {\n            $$i > -1 && (_vm.computedValue = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));\n          }\n        } else {\n          _vm.computedValue = $$c;\n        }\n      }\n    }\n  }), _c('span', {\n    staticClass: \"check\",\n    \"class\": _vm.checkClasses\n  }), _vm.showControlLabel ? _c('span', {\n    staticClass: \"control-label\",\n    attrs: {\n      \"id\": _vm.ariaLabelledby\n    }\n  }, [_vm._t(\"default\")], 2) : _vm._e()]);\n};\n\nvar __vue_staticRenderFns__ = [];\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\nvar Switch = __vue_normalize__({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);\n\nvar Plugin = {\n  install: function install(Vue) {\n    registerComponent(Vue, Switch);\n  }\n};\nuse(Plugin);\nexport default Plugin;\nexport { Switch as BSwitch };","map":null,"metadata":{},"sourceType":"module"}